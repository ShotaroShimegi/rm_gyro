
rm_gyro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007764  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000380  080078f8  080078f8  000178f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c78  08007c78  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08007c78  08007c78  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007c78  08007c78  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c78  08007c78  00017c78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007c7c  08007c7c  00017c7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08007c80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e8  200001dc  08007e5c  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003c4  08007e5c  000203c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021fe5  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003dd8  00000000  00000000  000421f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001318  00000000  00000000  00045fd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001160  00000000  00000000  000472e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001c9f5  00000000  00000000  00048448  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013c34  00000000  00000000  00064e3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008e036  00000000  00000000  00078a71  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00106aa7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005cc8  00000000  00000000  00106b24  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080078dc 	.word	0x080078dc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	080078dc 	.word	0x080078dc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c4c:	4b08      	ldr	r3, [pc, #32]	; (8000c70 <HAL_Init+0x28>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a07      	ldr	r2, [pc, #28]	; (8000c70 <HAL_Init+0x28>)
 8000c52:	f043 0310 	orr.w	r3, r3, #16
 8000c56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c58:	2003      	movs	r0, #3
 8000c5a:	f000 fc2d 	bl	80014b8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c5e:	2000      	movs	r0, #0
 8000c60:	f000 f808 	bl	8000c74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c64:	f004 f844 	bl	8004cf0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c68:	2300      	movs	r3, #0
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40022000 	.word	0x40022000

08000c74 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c7c:	4b12      	ldr	r3, [pc, #72]	; (8000cc8 <HAL_InitTick+0x54>)
 8000c7e:	681a      	ldr	r2, [r3, #0]
 8000c80:	4b12      	ldr	r3, [pc, #72]	; (8000ccc <HAL_InitTick+0x58>)
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	4619      	mov	r1, r3
 8000c86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c92:	4618      	mov	r0, r3
 8000c94:	f000 fc45 	bl	8001522 <HAL_SYSTICK_Config>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	e00e      	b.n	8000cc0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	2b0f      	cmp	r3, #15
 8000ca6:	d80a      	bhi.n	8000cbe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ca8:	2200      	movs	r2, #0
 8000caa:	6879      	ldr	r1, [r7, #4]
 8000cac:	f04f 30ff 	mov.w	r0, #4294967295
 8000cb0:	f000 fc0d 	bl	80014ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cb4:	4a06      	ldr	r2, [pc, #24]	; (8000cd0 <HAL_InitTick+0x5c>)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	e000      	b.n	8000cc0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cbe:	2301      	movs	r3, #1
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	3708      	adds	r7, #8
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	20000008 	.word	0x20000008
 8000ccc:	20000004 	.word	0x20000004
 8000cd0:	20000000 	.word	0x20000000

08000cd4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cd8:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <HAL_IncTick+0x20>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	461a      	mov	r2, r3
 8000cde:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <HAL_IncTick+0x24>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4413      	add	r3, r2
 8000ce4:	4a04      	ldr	r2, [pc, #16]	; (8000cf8 <HAL_IncTick+0x24>)
 8000ce6:	6013      	str	r3, [r2, #0]
}
 8000ce8:	bf00      	nop
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	20000004 	.word	0x20000004
 8000cf8:	20000204 	.word	0x20000204

08000cfc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  return uwTick;  
 8000d00:	4b03      	ldr	r3, [pc, #12]	; (8000d10 <HAL_GetTick+0x14>)
 8000d02:	681b      	ldr	r3, [r3, #0]
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	20000204 	.word	0x20000204

08000d14 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b084      	sub	sp, #16
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d1c:	f7ff ffee 	bl	8000cfc <HAL_GetTick>
 8000d20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d2c:	d005      	beq.n	8000d3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d2e:	4b09      	ldr	r3, [pc, #36]	; (8000d54 <HAL_Delay+0x40>)
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	461a      	mov	r2, r3
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	4413      	add	r3, r2
 8000d38:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000d3a:	bf00      	nop
 8000d3c:	f7ff ffde 	bl	8000cfc <HAL_GetTick>
 8000d40:	4602      	mov	r2, r0
 8000d42:	68bb      	ldr	r3, [r7, #8]
 8000d44:	1ad3      	subs	r3, r2, r3
 8000d46:	68fa      	ldr	r2, [r7, #12]
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	d8f7      	bhi.n	8000d3c <HAL_Delay+0x28>
  {
  }
}
 8000d4c:	bf00      	nop
 8000d4e:	3710      	adds	r7, #16
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	20000004 	.word	0x20000004

08000d58 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b084      	sub	sp, #16
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d101      	bne.n	8000d6a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000d66:	2301      	movs	r3, #1
 8000d68:	e0ed      	b.n	8000f46 <HAL_CAN_Init+0x1ee>
  assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

  if (hcan->State == HAL_CAN_STATE_RESET)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d102      	bne.n	8000d7c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000d76:	6878      	ldr	r0, [r7, #4]
 8000d78:	f003 fcd4 	bl	8004724 <HAL_CAN_MspInit>
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	681a      	ldr	r2, [r3, #0]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f022 0202 	bic.w	r2, r2, #2
 8000d8a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d8c:	f7ff ffb6 	bl	8000cfc <HAL_GetTick>
 8000d90:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000d92:	e012      	b.n	8000dba <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d94:	f7ff ffb2 	bl	8000cfc <HAL_GetTick>
 8000d98:	4602      	mov	r2, r0
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	1ad3      	subs	r3, r2, r3
 8000d9e:	2b0a      	cmp	r3, #10
 8000da0:	d90b      	bls.n	8000dba <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000da6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	2205      	movs	r2, #5
 8000db2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000db6:	2301      	movs	r3, #1
 8000db8:	e0c5      	b.n	8000f46 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	f003 0302 	and.w	r3, r3, #2
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d1e5      	bne.n	8000d94 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f042 0201 	orr.w	r2, r2, #1
 8000dd6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000dd8:	f7ff ff90 	bl	8000cfc <HAL_GetTick>
 8000ddc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000dde:	e012      	b.n	8000e06 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000de0:	f7ff ff8c 	bl	8000cfc <HAL_GetTick>
 8000de4:	4602      	mov	r2, r0
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	1ad3      	subs	r3, r2, r3
 8000dea:	2b0a      	cmp	r3, #10
 8000dec:	d90b      	bls.n	8000e06 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000df2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	2205      	movs	r2, #5
 8000dfe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000e02:	2301      	movs	r3, #1
 8000e04:	e09f      	b.n	8000f46 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	f003 0301 	and.w	r3, r3, #1
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d0e5      	beq.n	8000de0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	7e1b      	ldrb	r3, [r3, #24]
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d108      	bne.n	8000e2e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	e007      	b.n	8000e3e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e3c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	7e5b      	ldrb	r3, [r3, #25]
 8000e42:	2b01      	cmp	r3, #1
 8000e44:	d108      	bne.n	8000e58 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000e54:	601a      	str	r2, [r3, #0]
 8000e56:	e007      	b.n	8000e68 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000e66:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	7e9b      	ldrb	r3, [r3, #26]
 8000e6c:	2b01      	cmp	r3, #1
 8000e6e:	d108      	bne.n	8000e82 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f042 0220 	orr.w	r2, r2, #32
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	e007      	b.n	8000e92 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f022 0220 	bic.w	r2, r2, #32
 8000e90:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	7edb      	ldrb	r3, [r3, #27]
 8000e96:	2b01      	cmp	r3, #1
 8000e98:	d108      	bne.n	8000eac <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f022 0210 	bic.w	r2, r2, #16
 8000ea8:	601a      	str	r2, [r3, #0]
 8000eaa:	e007      	b.n	8000ebc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f042 0210 	orr.w	r2, r2, #16
 8000eba:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	7f1b      	ldrb	r3, [r3, #28]
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	d108      	bne.n	8000ed6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f042 0208 	orr.w	r2, r2, #8
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	e007      	b.n	8000ee6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f022 0208 	bic.w	r2, r2, #8
 8000ee4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	7f5b      	ldrb	r3, [r3, #29]
 8000eea:	2b01      	cmp	r3, #1
 8000eec:	d108      	bne.n	8000f00 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f042 0204 	orr.w	r2, r2, #4
 8000efc:	601a      	str	r2, [r3, #0]
 8000efe:	e007      	b.n	8000f10 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f022 0204 	bic.w	r2, r2, #4
 8000f0e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	689a      	ldr	r2, [r3, #8]
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	431a      	orrs	r2, r3
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	691b      	ldr	r3, [r3, #16]
 8000f1e:	431a      	orrs	r2, r3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	695b      	ldr	r3, [r3, #20]
 8000f24:	ea42 0103 	orr.w	r1, r2, r3
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	1e5a      	subs	r2, r3, #1
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	430a      	orrs	r2, r1
 8000f34:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2200      	movs	r2, #0
 8000f3a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2201      	movs	r2, #1
 8000f40:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000f44:	2300      	movs	r3, #0
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3710      	adds	r7, #16
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}

08000f4e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000f4e:	b480      	push	{r7}
 8000f50:	b087      	sub	sp, #28
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	6078      	str	r0, [r7, #4]
 8000f56:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f64:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000f66:	7cfb      	ldrb	r3, [r7, #19]
 8000f68:	2b01      	cmp	r3, #1
 8000f6a:	d003      	beq.n	8000f74 <HAL_CAN_ConfigFilter+0x26>
 8000f6c:	7cfb      	ldrb	r3, [r7, #19]
 8000f6e:	2b02      	cmp	r3, #2
 8000f70:	f040 80aa 	bne.w	80010c8 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000f7a:	f043 0201 	orr.w	r2, r3, #1
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	695b      	ldr	r3, [r3, #20]
 8000f88:	f003 031f 	and.w	r3, r3, #31
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f92:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	43db      	mvns	r3, r3
 8000f9e:	401a      	ands	r2, r3
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	69db      	ldr	r3, [r3, #28]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d123      	bne.n	8000ff6 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	43db      	mvns	r3, r3
 8000fb8:	401a      	ands	r2, r3
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000fcc:	683a      	ldr	r2, [r7, #0]
 8000fce:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000fd0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	3248      	adds	r2, #72	; 0x48
 8000fd6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	689b      	ldr	r3, [r3, #8]
 8000fde:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000fea:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000fec:	6979      	ldr	r1, [r7, #20]
 8000fee:	3348      	adds	r3, #72	; 0x48
 8000ff0:	00db      	lsls	r3, r3, #3
 8000ff2:	440b      	add	r3, r1
 8000ff4:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	69db      	ldr	r3, [r3, #28]
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d122      	bne.n	8001044 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	431a      	orrs	r2, r3
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800101a:	683a      	ldr	r2, [r7, #0]
 800101c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800101e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	3248      	adds	r2, #72	; 0x48
 8001024:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	689b      	ldr	r3, [r3, #8]
 800102c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	68db      	ldr	r3, [r3, #12]
 8001032:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001038:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800103a:	6979      	ldr	r1, [r7, #20]
 800103c:	3348      	adds	r3, #72	; 0x48
 800103e:	00db      	lsls	r3, r3, #3
 8001040:	440b      	add	r3, r1
 8001042:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	699b      	ldr	r3, [r3, #24]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d109      	bne.n	8001060 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	43db      	mvns	r3, r3
 8001056:	401a      	ands	r2, r3
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800105e:	e007      	b.n	8001070 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	431a      	orrs	r2, r3
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	691b      	ldr	r3, [r3, #16]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d109      	bne.n	800108c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	43db      	mvns	r3, r3
 8001082:	401a      	ands	r2, r3
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800108a:	e007      	b.n	800109c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	431a      	orrs	r2, r3
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	6a1b      	ldr	r3, [r3, #32]
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d107      	bne.n	80010b4 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	431a      	orrs	r2, r3
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80010ba:	f023 0201 	bic.w	r2, r3, #1
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80010c4:	2300      	movs	r3, #0
 80010c6:	e006      	b.n	80010d6 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010cc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80010d4:	2301      	movs	r3, #1
  }
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	371c      	adds	r7, #28
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr

080010e2 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80010e2:	b580      	push	{r7, lr}
 80010e4:	b084      	sub	sp, #16
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d12e      	bne.n	8001154 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2202      	movs	r2, #2
 80010fa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f022 0201 	bic.w	r2, r2, #1
 800110c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800110e:	f7ff fdf5 	bl	8000cfc <HAL_GetTick>
 8001112:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001114:	e012      	b.n	800113c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001116:	f7ff fdf1 	bl	8000cfc <HAL_GetTick>
 800111a:	4602      	mov	r2, r0
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	1ad3      	subs	r3, r2, r3
 8001120:	2b0a      	cmp	r3, #10
 8001122:	d90b      	bls.n	800113c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001128:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2205      	movs	r2, #5
 8001134:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001138:	2301      	movs	r3, #1
 800113a:	e012      	b.n	8001162 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	f003 0301 	and.w	r3, r3, #1
 8001146:	2b00      	cmp	r3, #0
 8001148:	d1e5      	bne.n	8001116 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2200      	movs	r2, #0
 800114e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001150:	2300      	movs	r3, #0
 8001152:	e006      	b.n	8001162 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001158:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001160:	2301      	movs	r3, #1
  }
}
 8001162:	4618      	mov	r0, r3
 8001164:	3710      	adds	r7, #16
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}

0800116a <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800116a:	b480      	push	{r7}
 800116c:	b089      	sub	sp, #36	; 0x24
 800116e:	af00      	add	r7, sp, #0
 8001170:	60f8      	str	r0, [r7, #12]
 8001172:	60b9      	str	r1, [r7, #8]
 8001174:	607a      	str	r2, [r7, #4]
 8001176:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800117e:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	689b      	ldr	r3, [r3, #8]
 8001186:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001188:	7ffb      	ldrb	r3, [r7, #31]
 800118a:	2b01      	cmp	r3, #1
 800118c:	d003      	beq.n	8001196 <HAL_CAN_AddTxMessage+0x2c>
 800118e:	7ffb      	ldrb	r3, [r7, #31]
 8001190:	2b02      	cmp	r3, #2
 8001192:	f040 80b8 	bne.w	8001306 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001196:	69bb      	ldr	r3, [r7, #24]
 8001198:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800119c:	2b00      	cmp	r3, #0
 800119e:	d10a      	bne.n	80011b6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80011a0:	69bb      	ldr	r3, [r7, #24]
 80011a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d105      	bne.n	80011b6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80011aa:	69bb      	ldr	r3, [r7, #24]
 80011ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	f000 80a0 	beq.w	80012f6 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80011b6:	69bb      	ldr	r3, [r7, #24]
 80011b8:	0e1b      	lsrs	r3, r3, #24
 80011ba:	f003 0303 	and.w	r3, r3, #3
 80011be:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	2b02      	cmp	r3, #2
 80011c4:	d907      	bls.n	80011d6 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ca:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80011d2:	2301      	movs	r3, #1
 80011d4:	e09e      	b.n	8001314 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80011d6:	2201      	movs	r2, #1
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	409a      	lsls	r2, r3
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d10d      	bne.n	8001204 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80011ee:	68bb      	ldr	r3, [r7, #8]
 80011f0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80011f2:	68f9      	ldr	r1, [r7, #12]
 80011f4:	6809      	ldr	r1, [r1, #0]
 80011f6:	431a      	orrs	r2, r3
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	3318      	adds	r3, #24
 80011fc:	011b      	lsls	r3, r3, #4
 80011fe:	440b      	add	r3, r1
 8001200:	601a      	str	r2, [r3, #0]
 8001202:	e00f      	b.n	8001224 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800120a:	68bb      	ldr	r3, [r7, #8]
 800120c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800120e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001214:	68f9      	ldr	r1, [r7, #12]
 8001216:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001218:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	3318      	adds	r3, #24
 800121e:	011b      	lsls	r3, r3, #4
 8001220:	440b      	add	r3, r1
 8001222:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	6819      	ldr	r1, [r3, #0]
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	691a      	ldr	r2, [r3, #16]
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	3318      	adds	r3, #24
 8001230:	011b      	lsls	r3, r3, #4
 8001232:	440b      	add	r3, r1
 8001234:	3304      	adds	r3, #4
 8001236:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	7d1b      	ldrb	r3, [r3, #20]
 800123c:	2b01      	cmp	r3, #1
 800123e:	d111      	bne.n	8001264 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	3318      	adds	r3, #24
 8001248:	011b      	lsls	r3, r3, #4
 800124a:	4413      	add	r3, r2
 800124c:	3304      	adds	r3, #4
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	68fa      	ldr	r2, [r7, #12]
 8001252:	6811      	ldr	r1, [r2, #0]
 8001254:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	3318      	adds	r3, #24
 800125c:	011b      	lsls	r3, r3, #4
 800125e:	440b      	add	r3, r1
 8001260:	3304      	adds	r3, #4
 8001262:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	3307      	adds	r3, #7
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	061a      	lsls	r2, r3, #24
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	3306      	adds	r3, #6
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	041b      	lsls	r3, r3, #16
 8001274:	431a      	orrs	r2, r3
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	3305      	adds	r3, #5
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	021b      	lsls	r3, r3, #8
 800127e:	4313      	orrs	r3, r2
 8001280:	687a      	ldr	r2, [r7, #4]
 8001282:	3204      	adds	r2, #4
 8001284:	7812      	ldrb	r2, [r2, #0]
 8001286:	4610      	mov	r0, r2
 8001288:	68fa      	ldr	r2, [r7, #12]
 800128a:	6811      	ldr	r1, [r2, #0]
 800128c:	ea43 0200 	orr.w	r2, r3, r0
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	011b      	lsls	r3, r3, #4
 8001294:	440b      	add	r3, r1
 8001296:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800129a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	3303      	adds	r3, #3
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	061a      	lsls	r2, r3, #24
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	3302      	adds	r3, #2
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	041b      	lsls	r3, r3, #16
 80012ac:	431a      	orrs	r2, r3
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	3301      	adds	r3, #1
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	021b      	lsls	r3, r3, #8
 80012b6:	4313      	orrs	r3, r2
 80012b8:	687a      	ldr	r2, [r7, #4]
 80012ba:	7812      	ldrb	r2, [r2, #0]
 80012bc:	4610      	mov	r0, r2
 80012be:	68fa      	ldr	r2, [r7, #12]
 80012c0:	6811      	ldr	r1, [r2, #0]
 80012c2:	ea43 0200 	orr.w	r2, r3, r0
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	011b      	lsls	r3, r3, #4
 80012ca:	440b      	add	r3, r1
 80012cc:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80012d0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	3318      	adds	r3, #24
 80012da:	011b      	lsls	r3, r3, #4
 80012dc:	4413      	add	r3, r2
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	68fa      	ldr	r2, [r7, #12]
 80012e2:	6811      	ldr	r1, [r2, #0]
 80012e4:	f043 0201 	orr.w	r2, r3, #1
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	3318      	adds	r3, #24
 80012ec:	011b      	lsls	r3, r3, #4
 80012ee:	440b      	add	r3, r1
 80012f0:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80012f2:	2300      	movs	r3, #0
 80012f4:	e00e      	b.n	8001314 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012fa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	e006      	b.n	8001314 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800130a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
  }
}
 8001314:	4618      	mov	r0, r3
 8001316:	3724      	adds	r7, #36	; 0x24
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr

08001320 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001320:	b480      	push	{r7}
 8001322:	b085      	sub	sp, #20
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	f003 0307 	and.w	r3, r3, #7
 800132e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001330:	4b0c      	ldr	r3, [pc, #48]	; (8001364 <NVIC_SetPriorityGrouping+0x44>)
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001336:	68ba      	ldr	r2, [r7, #8]
 8001338:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800133c:	4013      	ands	r3, r2
 800133e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001348:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800134c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001350:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001352:	4a04      	ldr	r2, [pc, #16]	; (8001364 <NVIC_SetPriorityGrouping+0x44>)
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	60d3      	str	r3, [r2, #12]
}
 8001358:	bf00      	nop
 800135a:	3714      	adds	r7, #20
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr
 8001364:	e000ed00 	.word	0xe000ed00

08001368 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800136c:	4b04      	ldr	r3, [pc, #16]	; (8001380 <NVIC_GetPriorityGrouping+0x18>)
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	0a1b      	lsrs	r3, r3, #8
 8001372:	f003 0307 	and.w	r3, r3, #7
}
 8001376:	4618      	mov	r0, r3
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr
 8001380:	e000ed00 	.word	0xe000ed00

08001384 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	4603      	mov	r3, r0
 800138c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800138e:	79fb      	ldrb	r3, [r7, #7]
 8001390:	f003 021f 	and.w	r2, r3, #31
 8001394:	4907      	ldr	r1, [pc, #28]	; (80013b4 <NVIC_EnableIRQ+0x30>)
 8001396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139a:	095b      	lsrs	r3, r3, #5
 800139c:	2001      	movs	r0, #1
 800139e:	fa00 f202 	lsl.w	r2, r0, r2
 80013a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80013a6:	bf00      	nop
 80013a8:	370c      	adds	r7, #12
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	e000e100 	.word	0xe000e100

080013b8 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	4603      	mov	r3, r0
 80013c0:	6039      	str	r1, [r7, #0]
 80013c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80013c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	da0b      	bge.n	80013e4 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	b2da      	uxtb	r2, r3
 80013d0:	490c      	ldr	r1, [pc, #48]	; (8001404 <NVIC_SetPriority+0x4c>)
 80013d2:	79fb      	ldrb	r3, [r7, #7]
 80013d4:	f003 030f 	and.w	r3, r3, #15
 80013d8:	3b04      	subs	r3, #4
 80013da:	0112      	lsls	r2, r2, #4
 80013dc:	b2d2      	uxtb	r2, r2
 80013de:	440b      	add	r3, r1
 80013e0:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013e2:	e009      	b.n	80013f8 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	b2da      	uxtb	r2, r3
 80013e8:	4907      	ldr	r1, [pc, #28]	; (8001408 <NVIC_SetPriority+0x50>)
 80013ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ee:	0112      	lsls	r2, r2, #4
 80013f0:	b2d2      	uxtb	r2, r2
 80013f2:	440b      	add	r3, r1
 80013f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80013f8:	bf00      	nop
 80013fa:	370c      	adds	r7, #12
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr
 8001404:	e000ed00 	.word	0xe000ed00
 8001408:	e000e100 	.word	0xe000e100

0800140c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800140c:	b480      	push	{r7}
 800140e:	b089      	sub	sp, #36	; 0x24
 8001410:	af00      	add	r7, sp, #0
 8001412:	60f8      	str	r0, [r7, #12]
 8001414:	60b9      	str	r1, [r7, #8]
 8001416:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	f003 0307 	and.w	r3, r3, #7
 800141e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	f1c3 0307 	rsb	r3, r3, #7
 8001426:	2b04      	cmp	r3, #4
 8001428:	bf28      	it	cs
 800142a:	2304      	movcs	r3, #4
 800142c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	3304      	adds	r3, #4
 8001432:	2b06      	cmp	r3, #6
 8001434:	d902      	bls.n	800143c <NVIC_EncodePriority+0x30>
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	3b03      	subs	r3, #3
 800143a:	e000      	b.n	800143e <NVIC_EncodePriority+0x32>
 800143c:	2300      	movs	r3, #0
 800143e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001440:	f04f 32ff 	mov.w	r2, #4294967295
 8001444:	69bb      	ldr	r3, [r7, #24]
 8001446:	fa02 f303 	lsl.w	r3, r2, r3
 800144a:	43da      	mvns	r2, r3
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	401a      	ands	r2, r3
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001454:	f04f 31ff 	mov.w	r1, #4294967295
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	fa01 f303 	lsl.w	r3, r1, r3
 800145e:	43d9      	mvns	r1, r3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001464:	4313      	orrs	r3, r2
         );
}
 8001466:	4618      	mov	r0, r3
 8001468:	3724      	adds	r7, #36	; 0x24
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
	...

08001474 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	3b01      	subs	r3, #1
 8001480:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001484:	d301      	bcc.n	800148a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001486:	2301      	movs	r3, #1
 8001488:	e00f      	b.n	80014aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800148a:	4a0a      	ldr	r2, [pc, #40]	; (80014b4 <SysTick_Config+0x40>)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	3b01      	subs	r3, #1
 8001490:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001492:	210f      	movs	r1, #15
 8001494:	f04f 30ff 	mov.w	r0, #4294967295
 8001498:	f7ff ff8e 	bl	80013b8 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800149c:	4b05      	ldr	r3, [pc, #20]	; (80014b4 <SysTick_Config+0x40>)
 800149e:	2200      	movs	r2, #0
 80014a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014a2:	4b04      	ldr	r3, [pc, #16]	; (80014b4 <SysTick_Config+0x40>)
 80014a4:	2207      	movs	r2, #7
 80014a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014a8:	2300      	movs	r3, #0
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	e000e010 	.word	0xe000e010

080014b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014c0:	6878      	ldr	r0, [r7, #4]
 80014c2:	f7ff ff2d 	bl	8001320 <NVIC_SetPriorityGrouping>
}
 80014c6:	bf00      	nop
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}

080014ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b086      	sub	sp, #24
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	4603      	mov	r3, r0
 80014d6:	60b9      	str	r1, [r7, #8]
 80014d8:	607a      	str	r2, [r7, #4]
 80014da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014dc:	2300      	movs	r3, #0
 80014de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014e0:	f7ff ff42 	bl	8001368 <NVIC_GetPriorityGrouping>
 80014e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014e6:	687a      	ldr	r2, [r7, #4]
 80014e8:	68b9      	ldr	r1, [r7, #8]
 80014ea:	6978      	ldr	r0, [r7, #20]
 80014ec:	f7ff ff8e 	bl	800140c <NVIC_EncodePriority>
 80014f0:	4602      	mov	r2, r0
 80014f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014f6:	4611      	mov	r1, r2
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff ff5d 	bl	80013b8 <NVIC_SetPriority>
}
 80014fe:	bf00      	nop
 8001500:	3718      	adds	r7, #24
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}

08001506 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001506:	b580      	push	{r7, lr}
 8001508:	b082      	sub	sp, #8
 800150a:	af00      	add	r7, sp, #0
 800150c:	4603      	mov	r3, r0
 800150e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001510:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff ff35 	bl	8001384 <NVIC_EnableIRQ>
}
 800151a:	bf00      	nop
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}

08001522 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001522:	b580      	push	{r7, lr}
 8001524:	b082      	sub	sp, #8
 8001526:	af00      	add	r7, sp, #0
 8001528:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f7ff ffa2 	bl	8001474 <SysTick_Config>
 8001530:	4603      	mov	r3, r0
}
 8001532:	4618      	mov	r0, r3
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
	...

0800153c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800153c:	b480      	push	{r7}
 800153e:	b087      	sub	sp, #28
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001546:	2300      	movs	r3, #0
 8001548:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800154a:	2300      	movs	r3, #0
 800154c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800154e:	2300      	movs	r3, #0
 8001550:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001552:	e14e      	b.n	80017f2 <HAL_GPIO_Init+0x2b6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	2101      	movs	r1, #1
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	fa01 f303 	lsl.w	r3, r1, r3
 8001560:	4013      	ands	r3, r2
 8001562:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	2b00      	cmp	r3, #0
 8001568:	f000 8140 	beq.w	80017ec <HAL_GPIO_Init+0x2b0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	2b02      	cmp	r3, #2
 8001572:	d003      	beq.n	800157c <HAL_GPIO_Init+0x40>
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	2b12      	cmp	r3, #18
 800157a:	d123      	bne.n	80015c4 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	08da      	lsrs	r2, r3, #3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	3208      	adds	r2, #8
 8001584:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001588:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	f003 0307 	and.w	r3, r3, #7
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	220f      	movs	r2, #15
 8001594:	fa02 f303 	lsl.w	r3, r2, r3
 8001598:	43db      	mvns	r3, r3
 800159a:	693a      	ldr	r2, [r7, #16]
 800159c:	4013      	ands	r3, r2
 800159e:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	691a      	ldr	r2, [r3, #16]
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	f003 0307 	and.w	r3, r3, #7
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	fa02 f303 	lsl.w	r3, r2, r3
 80015b0:	693a      	ldr	r2, [r7, #16]
 80015b2:	4313      	orrs	r3, r2
 80015b4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	08da      	lsrs	r2, r3, #3
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	3208      	adds	r2, #8
 80015be:	6939      	ldr	r1, [r7, #16]
 80015c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	005b      	lsls	r3, r3, #1
 80015ce:	2203      	movs	r2, #3
 80015d0:	fa02 f303 	lsl.w	r3, r2, r3
 80015d4:	43db      	mvns	r3, r3
 80015d6:	693a      	ldr	r2, [r7, #16]
 80015d8:	4013      	ands	r3, r2
 80015da:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f003 0203 	and.w	r2, r3, #3
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	005b      	lsls	r3, r3, #1
 80015e8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ec:	693a      	ldr	r2, [r7, #16]
 80015ee:	4313      	orrs	r3, r2
 80015f0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	693a      	ldr	r2, [r7, #16]
 80015f6:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d00b      	beq.n	8001618 <HAL_GPIO_Init+0xdc>
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	2b02      	cmp	r3, #2
 8001606:	d007      	beq.n	8001618 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800160c:	2b11      	cmp	r3, #17
 800160e:	d003      	beq.n	8001618 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	2b12      	cmp	r3, #18
 8001616:	d130      	bne.n	800167a <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	2203      	movs	r2, #3
 8001624:	fa02 f303 	lsl.w	r3, r2, r3
 8001628:	43db      	mvns	r3, r3
 800162a:	693a      	ldr	r2, [r7, #16]
 800162c:	4013      	ands	r3, r2
 800162e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	68da      	ldr	r2, [r3, #12]
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	005b      	lsls	r3, r3, #1
 8001638:	fa02 f303 	lsl.w	r3, r2, r3
 800163c:	693a      	ldr	r2, [r7, #16]
 800163e:	4313      	orrs	r3, r2
 8001640:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	693a      	ldr	r2, [r7, #16]
 8001646:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800164e:	2201      	movs	r2, #1
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	fa02 f303 	lsl.w	r3, r2, r3
 8001656:	43db      	mvns	r3, r3
 8001658:	693a      	ldr	r2, [r7, #16]
 800165a:	4013      	ands	r3, r2
 800165c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	091b      	lsrs	r3, r3, #4
 8001664:	f003 0201 	and.w	r2, r3, #1
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	fa02 f303 	lsl.w	r3, r2, r3
 800166e:	693a      	ldr	r2, [r7, #16]
 8001670:	4313      	orrs	r3, r2
 8001672:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	693a      	ldr	r2, [r7, #16]
 8001678:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	68db      	ldr	r3, [r3, #12]
 800167e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	005b      	lsls	r3, r3, #1
 8001684:	2203      	movs	r2, #3
 8001686:	fa02 f303 	lsl.w	r3, r2, r3
 800168a:	43db      	mvns	r3, r3
 800168c:	693a      	ldr	r2, [r7, #16]
 800168e:	4013      	ands	r3, r2
 8001690:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	689a      	ldr	r2, [r3, #8]
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	fa02 f303 	lsl.w	r3, r2, r3
 800169e:	693a      	ldr	r2, [r7, #16]
 80016a0:	4313      	orrs	r3, r2
 80016a2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	693a      	ldr	r2, [r7, #16]
 80016a8:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	f000 809a 	beq.w	80017ec <HAL_GPIO_Init+0x2b0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016b8:	4b55      	ldr	r3, [pc, #340]	; (8001810 <HAL_GPIO_Init+0x2d4>)
 80016ba:	699b      	ldr	r3, [r3, #24]
 80016bc:	4a54      	ldr	r2, [pc, #336]	; (8001810 <HAL_GPIO_Init+0x2d4>)
 80016be:	f043 0301 	orr.w	r3, r3, #1
 80016c2:	6193      	str	r3, [r2, #24]
 80016c4:	4b52      	ldr	r3, [pc, #328]	; (8001810 <HAL_GPIO_Init+0x2d4>)
 80016c6:	699b      	ldr	r3, [r3, #24]
 80016c8:	f003 0301 	and.w	r3, r3, #1
 80016cc:	60bb      	str	r3, [r7, #8]
 80016ce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 80016d0:	4a50      	ldr	r2, [pc, #320]	; (8001814 <HAL_GPIO_Init+0x2d8>)
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	089b      	lsrs	r3, r3, #2
 80016d6:	3302      	adds	r3, #2
 80016d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016dc:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	f003 0303 	and.w	r3, r3, #3
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	220f      	movs	r2, #15
 80016e8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ec:	43db      	mvns	r3, r3
 80016ee:	693a      	ldr	r2, [r7, #16]
 80016f0:	4013      	ands	r3, r2
 80016f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80016fa:	d013      	beq.n	8001724 <HAL_GPIO_Init+0x1e8>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	4a46      	ldr	r2, [pc, #280]	; (8001818 <HAL_GPIO_Init+0x2dc>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d00d      	beq.n	8001720 <HAL_GPIO_Init+0x1e4>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	4a45      	ldr	r2, [pc, #276]	; (800181c <HAL_GPIO_Init+0x2e0>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d007      	beq.n	800171c <HAL_GPIO_Init+0x1e0>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	4a44      	ldr	r2, [pc, #272]	; (8001820 <HAL_GPIO_Init+0x2e4>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d101      	bne.n	8001718 <HAL_GPIO_Init+0x1dc>
 8001714:	2303      	movs	r3, #3
 8001716:	e006      	b.n	8001726 <HAL_GPIO_Init+0x1ea>
 8001718:	2305      	movs	r3, #5
 800171a:	e004      	b.n	8001726 <HAL_GPIO_Init+0x1ea>
 800171c:	2302      	movs	r3, #2
 800171e:	e002      	b.n	8001726 <HAL_GPIO_Init+0x1ea>
 8001720:	2301      	movs	r3, #1
 8001722:	e000      	b.n	8001726 <HAL_GPIO_Init+0x1ea>
 8001724:	2300      	movs	r3, #0
 8001726:	697a      	ldr	r2, [r7, #20]
 8001728:	f002 0203 	and.w	r2, r2, #3
 800172c:	0092      	lsls	r2, r2, #2
 800172e:	4093      	lsls	r3, r2
 8001730:	693a      	ldr	r2, [r7, #16]
 8001732:	4313      	orrs	r3, r2
 8001734:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001736:	4937      	ldr	r1, [pc, #220]	; (8001814 <HAL_GPIO_Init+0x2d8>)
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	089b      	lsrs	r3, r3, #2
 800173c:	3302      	adds	r3, #2
 800173e:	693a      	ldr	r2, [r7, #16]
 8001740:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001744:	4b37      	ldr	r3, [pc, #220]	; (8001824 <HAL_GPIO_Init+0x2e8>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	43db      	mvns	r3, r3
 800174e:	693a      	ldr	r2, [r7, #16]
 8001750:	4013      	ands	r3, r2
 8001752:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800175c:	2b00      	cmp	r3, #0
 800175e:	d003      	beq.n	8001768 <HAL_GPIO_Init+0x22c>
        {
          temp |= iocurrent;
 8001760:	693a      	ldr	r2, [r7, #16]
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	4313      	orrs	r3, r2
 8001766:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001768:	4a2e      	ldr	r2, [pc, #184]	; (8001824 <HAL_GPIO_Init+0x2e8>)
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800176e:	4b2d      	ldr	r3, [pc, #180]	; (8001824 <HAL_GPIO_Init+0x2e8>)
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	43db      	mvns	r3, r3
 8001778:	693a      	ldr	r2, [r7, #16]
 800177a:	4013      	ands	r3, r2
 800177c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d003      	beq.n	8001792 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 800178a:	693a      	ldr	r2, [r7, #16]
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	4313      	orrs	r3, r2
 8001790:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001792:	4a24      	ldr	r2, [pc, #144]	; (8001824 <HAL_GPIO_Init+0x2e8>)
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001798:	4b22      	ldr	r3, [pc, #136]	; (8001824 <HAL_GPIO_Init+0x2e8>)
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	43db      	mvns	r3, r3
 80017a2:	693a      	ldr	r2, [r7, #16]
 80017a4:	4013      	ands	r3, r2
 80017a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d003      	beq.n	80017bc <HAL_GPIO_Init+0x280>
        {
          temp |= iocurrent;
 80017b4:	693a      	ldr	r2, [r7, #16]
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	4313      	orrs	r3, r2
 80017ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80017bc:	4a19      	ldr	r2, [pc, #100]	; (8001824 <HAL_GPIO_Init+0x2e8>)
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017c2:	4b18      	ldr	r3, [pc, #96]	; (8001824 <HAL_GPIO_Init+0x2e8>)
 80017c4:	68db      	ldr	r3, [r3, #12]
 80017c6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	43db      	mvns	r3, r3
 80017cc:	693a      	ldr	r2, [r7, #16]
 80017ce:	4013      	ands	r3, r2
 80017d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d003      	beq.n	80017e6 <HAL_GPIO_Init+0x2aa>
        {
          temp |= iocurrent;
 80017de:	693a      	ldr	r2, [r7, #16]
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	4313      	orrs	r3, r2
 80017e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80017e6:	4a0f      	ldr	r2, [pc, #60]	; (8001824 <HAL_GPIO_Init+0x2e8>)
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	3301      	adds	r3, #1
 80017f0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	fa22 f303 	lsr.w	r3, r2, r3
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	f47f aea9 	bne.w	8001554 <HAL_GPIO_Init+0x18>
  }
}
 8001802:	bf00      	nop
 8001804:	371c      	adds	r7, #28
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	40021000 	.word	0x40021000
 8001814:	40010000 	.word	0x40010000
 8001818:	48000400 	.word	0x48000400
 800181c:	48000800 	.word	0x48000800
 8001820:	48000c00 	.word	0x48000c00
 8001824:	40010400 	.word	0x40010400

08001828 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	460b      	mov	r3, r1
 8001832:	807b      	strh	r3, [r7, #2]
 8001834:	4613      	mov	r3, r2
 8001836:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001838:	787b      	ldrb	r3, [r7, #1]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d003      	beq.n	8001846 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800183e:	887a      	ldrh	r2, [r7, #2]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001844:	e002      	b.n	800184c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001846:	887a      	ldrh	r2, [r7, #2]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800184c:	bf00      	nop
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr

08001858 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d101      	bne.n	800186a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e081      	b.n	800196e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001870:	b2db      	uxtb	r3, r3
 8001872:	2b00      	cmp	r3, #0
 8001874:	d106      	bne.n	8001884 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2200      	movs	r2, #0
 800187a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f003 f834 	bl	80048ec <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2224      	movs	r2, #36	; 0x24
 8001888:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f022 0201 	bic.w	r2, r2, #1
 800189a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	685a      	ldr	r2, [r3, #4]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80018a8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	689a      	ldr	r2, [r3, #8]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80018b8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	68db      	ldr	r3, [r3, #12]
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d107      	bne.n	80018d2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	689a      	ldr	r2, [r3, #8]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80018ce:	609a      	str	r2, [r3, #8]
 80018d0:	e006      	b.n	80018e0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	689a      	ldr	r2, [r3, #8]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80018de:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	2b02      	cmp	r3, #2
 80018e6:	d104      	bne.n	80018f2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80018f0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	687a      	ldr	r2, [r7, #4]
 80018fa:	6812      	ldr	r2, [r2, #0]
 80018fc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001900:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001904:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	68da      	ldr	r2, [r3, #12]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001914:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	691a      	ldr	r2, [r3, #16]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	695b      	ldr	r3, [r3, #20]
 800191e:	ea42 0103 	orr.w	r1, r2, r3
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	699b      	ldr	r3, [r3, #24]
 8001926:	021a      	lsls	r2, r3, #8
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	430a      	orrs	r2, r1
 800192e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	69d9      	ldr	r1, [r3, #28]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6a1a      	ldr	r2, [r3, #32]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	430a      	orrs	r2, r1
 800193e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f042 0201 	orr.w	r2, r2, #1
 800194e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2200      	movs	r2, #0
 8001954:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2220      	movs	r2, #32
 800195a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2200      	movs	r2, #0
 8001962:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2200      	movs	r2, #0
 8001968:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800196c:	2300      	movs	r3, #0
}
 800196e:	4618      	mov	r0, r3
 8001970:	3708      	adds	r7, #8
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}

08001976 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001976:	b480      	push	{r7}
 8001978:	b083      	sub	sp, #12
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
 800197e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001986:	b2db      	uxtb	r3, r3
 8001988:	2b20      	cmp	r3, #32
 800198a:	d138      	bne.n	80019fe <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001992:	2b01      	cmp	r3, #1
 8001994:	d101      	bne.n	800199a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001996:	2302      	movs	r3, #2
 8001998:	e032      	b.n	8001a00 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2201      	movs	r2, #1
 800199e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2224      	movs	r2, #36	; 0x24
 80019a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f022 0201 	bic.w	r2, r2, #1
 80019b8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80019c8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	6819      	ldr	r1, [r3, #0]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	683a      	ldr	r2, [r7, #0]
 80019d6:	430a      	orrs	r2, r1
 80019d8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f042 0201 	orr.w	r2, r2, #1
 80019e8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2220      	movs	r2, #32
 80019ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2200      	movs	r2, #0
 80019f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80019fa:	2300      	movs	r3, #0
 80019fc:	e000      	b.n	8001a00 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80019fe:	2302      	movs	r3, #2
  }
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	370c      	adds	r7, #12
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr

08001a0c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b085      	sub	sp, #20
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8001a16:	2300      	movs	r3, #0
 8001a18:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	2b20      	cmp	r3, #32
 8001a24:	d139      	bne.n	8001a9a <HAL_I2CEx_ConfigDigitalFilter+0x8e>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d101      	bne.n	8001a34 <HAL_I2CEx_ConfigDigitalFilter+0x28>
 8001a30:	2302      	movs	r3, #2
 8001a32:	e033      	b.n	8001a9c <HAL_I2CEx_ConfigDigitalFilter+0x90>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2201      	movs	r2, #1
 8001a38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2224      	movs	r2, #36	; 0x24
 8001a40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f022 0201 	bic.w	r2, r2, #1
 8001a52:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001a62:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	021b      	lsls	r3, r3, #8
 8001a68:	68fa      	ldr	r2, [r7, #12]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	68fa      	ldr	r2, [r7, #12]
 8001a74:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f042 0201 	orr.w	r2, r2, #1
 8001a84:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2220      	movs	r2, #32
 8001a8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2200      	movs	r2, #0
 8001a92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001a96:	2300      	movs	r3, #0
 8001a98:	e000      	b.n	8001a9c <HAL_I2CEx_ConfigDigitalFilter+0x90>
  }
  else
  {
    return HAL_BUSY;
 8001a9a:	2302      	movs	r3, #2
  }
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3714      	adds	r7, #20
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr

08001aa8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	1d3b      	adds	r3, r7, #4
 8001ab2:	6018      	str	r0, [r3, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ab4:	1d3b      	adds	r3, r7, #4
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d102      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	f000 beda 	b.w	8002876 <HAL_RCC_OscConfig+0xdce>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ac2:	1d3b      	adds	r3, r7, #4
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 0301 	and.w	r3, r3, #1
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	f000 816e 	beq.w	8001dae <HAL_RCC_OscConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001ad2:	4bb5      	ldr	r3, [pc, #724]	; (8001da8 <HAL_RCC_OscConfig+0x300>)
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f003 030c 	and.w	r3, r3, #12
 8001ada:	2b04      	cmp	r3, #4
 8001adc:	d00c      	beq.n	8001af8 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ade:	4bb2      	ldr	r3, [pc, #712]	; (8001da8 <HAL_RCC_OscConfig+0x300>)
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	f003 030c 	and.w	r3, r3, #12
 8001ae6:	2b08      	cmp	r3, #8
 8001ae8:	d15a      	bne.n	8001ba0 <HAL_RCC_OscConfig+0xf8>
 8001aea:	4baf      	ldr	r3, [pc, #700]	; (8001da8 <HAL_RCC_OscConfig+0x300>)
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001af2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001af6:	d153      	bne.n	8001ba0 <HAL_RCC_OscConfig+0xf8>
 8001af8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001afc:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b00:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001b04:	fa93 f3a3 	rbit	r3, r3
 8001b08:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001b0c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b10:	fab3 f383 	clz	r3, r3
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	095b      	lsrs	r3, r3, #5
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	f043 0301 	orr.w	r3, r3, #1
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d102      	bne.n	8001b2a <HAL_RCC_OscConfig+0x82>
 8001b24:	4ba0      	ldr	r3, [pc, #640]	; (8001da8 <HAL_RCC_OscConfig+0x300>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	e015      	b.n	8001b56 <HAL_RCC_OscConfig+0xae>
 8001b2a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b2e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b32:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001b36:	fa93 f3a3 	rbit	r3, r3
 8001b3a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001b3e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b42:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001b46:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001b4a:	fa93 f3a3 	rbit	r3, r3
 8001b4e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001b52:	4b95      	ldr	r3, [pc, #596]	; (8001da8 <HAL_RCC_OscConfig+0x300>)
 8001b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b56:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b5a:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001b5e:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001b62:	fa92 f2a2 	rbit	r2, r2
 8001b66:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return(result);
 8001b6a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001b6e:	fab2 f282 	clz	r2, r2
 8001b72:	b252      	sxtb	r2, r2
 8001b74:	f042 0220 	orr.w	r2, r2, #32
 8001b78:	b252      	sxtb	r2, r2
 8001b7a:	b2d2      	uxtb	r2, r2
 8001b7c:	f002 021f 	and.w	r2, r2, #31
 8001b80:	2101      	movs	r1, #1
 8001b82:	fa01 f202 	lsl.w	r2, r1, r2
 8001b86:	4013      	ands	r3, r2
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	f000 810f 	beq.w	8001dac <HAL_RCC_OscConfig+0x304>
 8001b8e:	1d3b      	adds	r3, r7, #4
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	f040 8109 	bne.w	8001dac <HAL_RCC_OscConfig+0x304>
      {
        return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	f000 be6b 	b.w	8002876 <HAL_RCC_OscConfig+0xdce>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ba0:	1d3b      	adds	r3, r7, #4
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001baa:	d106      	bne.n	8001bba <HAL_RCC_OscConfig+0x112>
 8001bac:	4b7e      	ldr	r3, [pc, #504]	; (8001da8 <HAL_RCC_OscConfig+0x300>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a7d      	ldr	r2, [pc, #500]	; (8001da8 <HAL_RCC_OscConfig+0x300>)
 8001bb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bb6:	6013      	str	r3, [r2, #0]
 8001bb8:	e030      	b.n	8001c1c <HAL_RCC_OscConfig+0x174>
 8001bba:	1d3b      	adds	r3, r7, #4
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d10c      	bne.n	8001bde <HAL_RCC_OscConfig+0x136>
 8001bc4:	4b78      	ldr	r3, [pc, #480]	; (8001da8 <HAL_RCC_OscConfig+0x300>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a77      	ldr	r2, [pc, #476]	; (8001da8 <HAL_RCC_OscConfig+0x300>)
 8001bca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bce:	6013      	str	r3, [r2, #0]
 8001bd0:	4b75      	ldr	r3, [pc, #468]	; (8001da8 <HAL_RCC_OscConfig+0x300>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a74      	ldr	r2, [pc, #464]	; (8001da8 <HAL_RCC_OscConfig+0x300>)
 8001bd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bda:	6013      	str	r3, [r2, #0]
 8001bdc:	e01e      	b.n	8001c1c <HAL_RCC_OscConfig+0x174>
 8001bde:	1d3b      	adds	r3, r7, #4
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001be8:	d10c      	bne.n	8001c04 <HAL_RCC_OscConfig+0x15c>
 8001bea:	4b6f      	ldr	r3, [pc, #444]	; (8001da8 <HAL_RCC_OscConfig+0x300>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a6e      	ldr	r2, [pc, #440]	; (8001da8 <HAL_RCC_OscConfig+0x300>)
 8001bf0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bf4:	6013      	str	r3, [r2, #0]
 8001bf6:	4b6c      	ldr	r3, [pc, #432]	; (8001da8 <HAL_RCC_OscConfig+0x300>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a6b      	ldr	r2, [pc, #428]	; (8001da8 <HAL_RCC_OscConfig+0x300>)
 8001bfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c00:	6013      	str	r3, [r2, #0]
 8001c02:	e00b      	b.n	8001c1c <HAL_RCC_OscConfig+0x174>
 8001c04:	4b68      	ldr	r3, [pc, #416]	; (8001da8 <HAL_RCC_OscConfig+0x300>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a67      	ldr	r2, [pc, #412]	; (8001da8 <HAL_RCC_OscConfig+0x300>)
 8001c0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c0e:	6013      	str	r3, [r2, #0]
 8001c10:	4b65      	ldr	r3, [pc, #404]	; (8001da8 <HAL_RCC_OscConfig+0x300>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a64      	ldr	r2, [pc, #400]	; (8001da8 <HAL_RCC_OscConfig+0x300>)
 8001c16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c1a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c1c:	4b62      	ldr	r3, [pc, #392]	; (8001da8 <HAL_RCC_OscConfig+0x300>)
 8001c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c20:	f023 020f 	bic.w	r2, r3, #15
 8001c24:	1d3b      	adds	r3, r7, #4
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	495f      	ldr	r1, [pc, #380]	; (8001da8 <HAL_RCC_OscConfig+0x300>)
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c30:	1d3b      	adds	r3, r7, #4
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d05a      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x248>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c3a:	f7ff f85f 	bl	8000cfc <HAL_GetTick>
 8001c3e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c42:	e00a      	b.n	8001c5a <HAL_RCC_OscConfig+0x1b2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c44:	f7ff f85a 	bl	8000cfc <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	2b64      	cmp	r3, #100	; 0x64
 8001c52:	d902      	bls.n	8001c5a <HAL_RCC_OscConfig+0x1b2>
          {
            return HAL_TIMEOUT;
 8001c54:	2303      	movs	r3, #3
 8001c56:	f000 be0e 	b.w	8002876 <HAL_RCC_OscConfig+0xdce>
 8001c5a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c5e:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c62:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001c66:	fa93 f3a3 	rbit	r3, r3
 8001c6a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return(result);
 8001c6e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c72:	fab3 f383 	clz	r3, r3
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	095b      	lsrs	r3, r3, #5
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	f043 0301 	orr.w	r3, r3, #1
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d102      	bne.n	8001c8c <HAL_RCC_OscConfig+0x1e4>
 8001c86:	4b48      	ldr	r3, [pc, #288]	; (8001da8 <HAL_RCC_OscConfig+0x300>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	e015      	b.n	8001cb8 <HAL_RCC_OscConfig+0x210>
 8001c8c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c90:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c94:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001c98:	fa93 f3a3 	rbit	r3, r3
 8001c9c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001ca0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ca4:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001ca8:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001cac:	fa93 f3a3 	rbit	r3, r3
 8001cb0:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001cb4:	4b3c      	ldr	r3, [pc, #240]	; (8001da8 <HAL_RCC_OscConfig+0x300>)
 8001cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001cbc:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001cc0:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001cc4:	fa92 f2a2 	rbit	r2, r2
 8001cc8:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return(result);
 8001ccc:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001cd0:	fab2 f282 	clz	r2, r2
 8001cd4:	b252      	sxtb	r2, r2
 8001cd6:	f042 0220 	orr.w	r2, r2, #32
 8001cda:	b252      	sxtb	r2, r2
 8001cdc:	b2d2      	uxtb	r2, r2
 8001cde:	f002 021f 	and.w	r2, r2, #31
 8001ce2:	2101      	movs	r1, #1
 8001ce4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ce8:	4013      	ands	r3, r2
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d0aa      	beq.n	8001c44 <HAL_RCC_OscConfig+0x19c>
 8001cee:	e05e      	b.n	8001dae <HAL_RCC_OscConfig+0x306>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf0:	f7ff f804 	bl	8000cfc <HAL_GetTick>
 8001cf4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cf8:	e00a      	b.n	8001d10 <HAL_RCC_OscConfig+0x268>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cfa:	f7fe ffff 	bl	8000cfc <HAL_GetTick>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	2b64      	cmp	r3, #100	; 0x64
 8001d08:	d902      	bls.n	8001d10 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	f000 bdb3 	b.w	8002876 <HAL_RCC_OscConfig+0xdce>
 8001d10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d14:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d18:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001d1c:	fa93 f3a3 	rbit	r3, r3
 8001d20:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return(result);
 8001d24:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d28:	fab3 f383 	clz	r3, r3
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	095b      	lsrs	r3, r3, #5
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	f043 0301 	orr.w	r3, r3, #1
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d102      	bne.n	8001d42 <HAL_RCC_OscConfig+0x29a>
 8001d3c:	4b1a      	ldr	r3, [pc, #104]	; (8001da8 <HAL_RCC_OscConfig+0x300>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	e015      	b.n	8001d6e <HAL_RCC_OscConfig+0x2c6>
 8001d42:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d46:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d4a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001d4e:	fa93 f3a3 	rbit	r3, r3
 8001d52:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001d56:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d5a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001d5e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001d62:	fa93 f3a3 	rbit	r3, r3
 8001d66:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001d6a:	4b0f      	ldr	r3, [pc, #60]	; (8001da8 <HAL_RCC_OscConfig+0x300>)
 8001d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d6e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d72:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001d76:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001d7a:	fa92 f2a2 	rbit	r2, r2
 8001d7e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return(result);
 8001d82:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001d86:	fab2 f282 	clz	r2, r2
 8001d8a:	b252      	sxtb	r2, r2
 8001d8c:	f042 0220 	orr.w	r2, r2, #32
 8001d90:	b252      	sxtb	r2, r2
 8001d92:	b2d2      	uxtb	r2, r2
 8001d94:	f002 021f 	and.w	r2, r2, #31
 8001d98:	2101      	movs	r1, #1
 8001d9a:	fa01 f202 	lsl.w	r2, r1, r2
 8001d9e:	4013      	ands	r3, r2
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d1aa      	bne.n	8001cfa <HAL_RCC_OscConfig+0x252>
 8001da4:	e003      	b.n	8001dae <HAL_RCC_OscConfig+0x306>
 8001da6:	bf00      	nop
 8001da8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dae:	1d3b      	adds	r3, r7, #4
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 0302 	and.w	r3, r3, #2
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	f000 8170 	beq.w	800209e <HAL_RCC_OscConfig+0x5f6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001dbe:	4bd0      	ldr	r3, [pc, #832]	; (8002100 <HAL_RCC_OscConfig+0x658>)
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	f003 030c 	and.w	r3, r3, #12
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d00b      	beq.n	8001de2 <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001dca:	4bcd      	ldr	r3, [pc, #820]	; (8002100 <HAL_RCC_OscConfig+0x658>)
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	f003 030c 	and.w	r3, r3, #12
 8001dd2:	2b08      	cmp	r3, #8
 8001dd4:	d16d      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x40a>
 8001dd6:	4bca      	ldr	r3, [pc, #808]	; (8002100 <HAL_RCC_OscConfig+0x658>)
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d167      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x40a>
 8001de2:	2302      	movs	r3, #2
 8001de4:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de8:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001dec:	fa93 f3a3 	rbit	r3, r3
 8001df0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return(result);
 8001df4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001df8:	fab3 f383 	clz	r3, r3
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	095b      	lsrs	r3, r3, #5
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	f043 0301 	orr.w	r3, r3, #1
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d102      	bne.n	8001e12 <HAL_RCC_OscConfig+0x36a>
 8001e0c:	4bbc      	ldr	r3, [pc, #752]	; (8002100 <HAL_RCC_OscConfig+0x658>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	e013      	b.n	8001e3a <HAL_RCC_OscConfig+0x392>
 8001e12:	2302      	movs	r3, #2
 8001e14:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e18:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001e1c:	fa93 f3a3 	rbit	r3, r3
 8001e20:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001e24:	2302      	movs	r3, #2
 8001e26:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001e2a:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001e2e:	fa93 f3a3 	rbit	r3, r3
 8001e32:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001e36:	4bb2      	ldr	r3, [pc, #712]	; (8002100 <HAL_RCC_OscConfig+0x658>)
 8001e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e3a:	2202      	movs	r2, #2
 8001e3c:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001e40:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001e44:	fa92 f2a2 	rbit	r2, r2
 8001e48:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return(result);
 8001e4c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001e50:	fab2 f282 	clz	r2, r2
 8001e54:	b252      	sxtb	r2, r2
 8001e56:	f042 0220 	orr.w	r2, r2, #32
 8001e5a:	b252      	sxtb	r2, r2
 8001e5c:	b2d2      	uxtb	r2, r2
 8001e5e:	f002 021f 	and.w	r2, r2, #31
 8001e62:	2101      	movs	r1, #1
 8001e64:	fa01 f202 	lsl.w	r2, r1, r2
 8001e68:	4013      	ands	r3, r2
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d007      	beq.n	8001e7e <HAL_RCC_OscConfig+0x3d6>
 8001e6e:	1d3b      	adds	r3, r7, #4
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	691b      	ldr	r3, [r3, #16]
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d002      	beq.n	8001e7e <HAL_RCC_OscConfig+0x3d6>
      {
        return HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	f000 bcfc 	b.w	8002876 <HAL_RCC_OscConfig+0xdce>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e7e:	4ba0      	ldr	r3, [pc, #640]	; (8002100 <HAL_RCC_OscConfig+0x658>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e86:	1d3b      	adds	r3, r7, #4
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	6959      	ldr	r1, [r3, #20]
 8001e8c:	23f8      	movs	r3, #248	; 0xf8
 8001e8e:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e92:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8001e96:	fa93 f3a3 	rbit	r3, r3
 8001e9a:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
  return(result);
 8001e9e:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001ea2:	fab3 f383 	clz	r3, r3
 8001ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eaa:	4995      	ldr	r1, [pc, #596]	; (8002100 <HAL_RCC_OscConfig+0x658>)
 8001eac:	4313      	orrs	r3, r2
 8001eae:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eb0:	e0f5      	b.n	800209e <HAL_RCC_OscConfig+0x5f6>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001eb2:	1d3b      	adds	r3, r7, #4
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	691b      	ldr	r3, [r3, #16]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	f000 8085 	beq.w	8001fc8 <HAL_RCC_OscConfig+0x520>
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec4:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001ec8:	fa93 f3a3 	rbit	r3, r3
 8001ecc:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return(result);
 8001ed0:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ed4:	fab3 f383 	clz	r3, r3
 8001ed8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001edc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee8:	f7fe ff08 	bl	8000cfc <HAL_GetTick>
 8001eec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ef0:	e00a      	b.n	8001f08 <HAL_RCC_OscConfig+0x460>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ef2:	f7fe ff03 	bl	8000cfc <HAL_GetTick>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d902      	bls.n	8001f08 <HAL_RCC_OscConfig+0x460>
          {
            return HAL_TIMEOUT;
 8001f02:	2303      	movs	r3, #3
 8001f04:	f000 bcb7 	b.w	8002876 <HAL_RCC_OscConfig+0xdce>
 8001f08:	2302      	movs	r3, #2
 8001f0a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f0e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001f12:	fa93 f3a3 	rbit	r3, r3
 8001f16:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return(result);
 8001f1a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f1e:	fab3 f383 	clz	r3, r3
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	095b      	lsrs	r3, r3, #5
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	f043 0301 	orr.w	r3, r3, #1
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d102      	bne.n	8001f38 <HAL_RCC_OscConfig+0x490>
 8001f32:	4b73      	ldr	r3, [pc, #460]	; (8002100 <HAL_RCC_OscConfig+0x658>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	e013      	b.n	8001f60 <HAL_RCC_OscConfig+0x4b8>
 8001f38:	2302      	movs	r3, #2
 8001f3a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f3e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001f42:	fa93 f3a3 	rbit	r3, r3
 8001f46:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001f50:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001f54:	fa93 f3a3 	rbit	r3, r3
 8001f58:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001f5c:	4b68      	ldr	r3, [pc, #416]	; (8002100 <HAL_RCC_OscConfig+0x658>)
 8001f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f60:	2202      	movs	r2, #2
 8001f62:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001f66:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001f6a:	fa92 f2a2 	rbit	r2, r2
 8001f6e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return(result);
 8001f72:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001f76:	fab2 f282 	clz	r2, r2
 8001f7a:	b252      	sxtb	r2, r2
 8001f7c:	f042 0220 	orr.w	r2, r2, #32
 8001f80:	b252      	sxtb	r2, r2
 8001f82:	b2d2      	uxtb	r2, r2
 8001f84:	f002 021f 	and.w	r2, r2, #31
 8001f88:	2101      	movs	r1, #1
 8001f8a:	fa01 f202 	lsl.w	r2, r1, r2
 8001f8e:	4013      	ands	r3, r2
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d0ae      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x44a>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f94:	4b5a      	ldr	r3, [pc, #360]	; (8002100 <HAL_RCC_OscConfig+0x658>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f9c:	1d3b      	adds	r3, r7, #4
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	6959      	ldr	r1, [r3, #20]
 8001fa2:	23f8      	movs	r3, #248	; 0xf8
 8001fa4:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa8:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8001fac:	fa93 f3a3 	rbit	r3, r3
 8001fb0:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  return(result);
 8001fb4:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8001fb8:	fab3 f383 	clz	r3, r3
 8001fbc:	fa01 f303 	lsl.w	r3, r1, r3
 8001fc0:	494f      	ldr	r1, [pc, #316]	; (8002100 <HAL_RCC_OscConfig+0x658>)
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	600b      	str	r3, [r1, #0]
 8001fc6:	e06a      	b.n	800209e <HAL_RCC_OscConfig+0x5f6>
 8001fc8:	2301      	movs	r3, #1
 8001fca:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fce:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001fd2:	fa93 f3a3 	rbit	r3, r3
 8001fd6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return(result);
 8001fda:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fde:	fab3 f383 	clz	r3, r3
 8001fe2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001fe6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	461a      	mov	r2, r3
 8001fee:	2300      	movs	r3, #0
 8001ff0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff2:	f7fe fe83 	bl	8000cfc <HAL_GetTick>
 8001ff6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ffa:	e00a      	b.n	8002012 <HAL_RCC_OscConfig+0x56a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ffc:	f7fe fe7e 	bl	8000cfc <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	2b02      	cmp	r3, #2
 800200a:	d902      	bls.n	8002012 <HAL_RCC_OscConfig+0x56a>
          {
            return HAL_TIMEOUT;
 800200c:	2303      	movs	r3, #3
 800200e:	f000 bc32 	b.w	8002876 <HAL_RCC_OscConfig+0xdce>
 8002012:	2302      	movs	r3, #2
 8002014:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002018:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800201c:	fa93 f3a3 	rbit	r3, r3
 8002020:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return(result);
 8002024:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002028:	fab3 f383 	clz	r3, r3
 800202c:	b2db      	uxtb	r3, r3
 800202e:	095b      	lsrs	r3, r3, #5
 8002030:	b2db      	uxtb	r3, r3
 8002032:	f043 0301 	orr.w	r3, r3, #1
 8002036:	b2db      	uxtb	r3, r3
 8002038:	2b01      	cmp	r3, #1
 800203a:	d102      	bne.n	8002042 <HAL_RCC_OscConfig+0x59a>
 800203c:	4b30      	ldr	r3, [pc, #192]	; (8002100 <HAL_RCC_OscConfig+0x658>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	e013      	b.n	800206a <HAL_RCC_OscConfig+0x5c2>
 8002042:	2302      	movs	r3, #2
 8002044:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002048:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800204c:	fa93 f3a3 	rbit	r3, r3
 8002050:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002054:	2302      	movs	r3, #2
 8002056:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800205a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800205e:	fa93 f3a3 	rbit	r3, r3
 8002062:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002066:	4b26      	ldr	r3, [pc, #152]	; (8002100 <HAL_RCC_OscConfig+0x658>)
 8002068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800206a:	2202      	movs	r2, #2
 800206c:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002070:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8002074:	fa92 f2a2 	rbit	r2, r2
 8002078:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return(result);
 800207c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002080:	fab2 f282 	clz	r2, r2
 8002084:	b252      	sxtb	r2, r2
 8002086:	f042 0220 	orr.w	r2, r2, #32
 800208a:	b252      	sxtb	r2, r2
 800208c:	b2d2      	uxtb	r2, r2
 800208e:	f002 021f 	and.w	r2, r2, #31
 8002092:	2101      	movs	r1, #1
 8002094:	fa01 f202 	lsl.w	r2, r1, r2
 8002098:	4013      	ands	r3, r2
 800209a:	2b00      	cmp	r3, #0
 800209c:	d1ae      	bne.n	8001ffc <HAL_RCC_OscConfig+0x554>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800209e:	1d3b      	adds	r3, r7, #4
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0308 	and.w	r3, r3, #8
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	f000 80d8 	beq.w	800225e <HAL_RCC_OscConfig+0x7b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020ae:	1d3b      	adds	r3, r7, #4
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	699b      	ldr	r3, [r3, #24]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d067      	beq.n	8002188 <HAL_RCC_OscConfig+0x6e0>
 80020b8:	2301      	movs	r3, #1
 80020ba:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80020c2:	fa93 f3a3 	rbit	r3, r3
 80020c6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return(result);
 80020ca:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020ce:	fab3 f383 	clz	r3, r3
 80020d2:	461a      	mov	r2, r3
 80020d4:	4b0b      	ldr	r3, [pc, #44]	; (8002104 <HAL_RCC_OscConfig+0x65c>)
 80020d6:	4413      	add	r3, r2
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	461a      	mov	r2, r3
 80020dc:	2301      	movs	r3, #1
 80020de:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020e0:	f7fe fe0c 	bl	8000cfc <HAL_GetTick>
 80020e4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020e8:	e00e      	b.n	8002108 <HAL_RCC_OscConfig+0x660>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020ea:	f7fe fe07 	bl	8000cfc <HAL_GetTick>
 80020ee:	4602      	mov	r2, r0
 80020f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d906      	bls.n	8002108 <HAL_RCC_OscConfig+0x660>
        {
          return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e3bb      	b.n	8002876 <HAL_RCC_OscConfig+0xdce>
 80020fe:	bf00      	nop
 8002100:	40021000 	.word	0x40021000
 8002104:	10908120 	.word	0x10908120
 8002108:	2302      	movs	r3, #2
 800210a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800210e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002112:	fa93 f3a3 	rbit	r3, r3
 8002116:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800211a:	2302      	movs	r3, #2
 800211c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002120:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002124:	fa93 f2a3 	rbit	r2, r3
 8002128:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800212c:	601a      	str	r2, [r3, #0]
 800212e:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002132:	2202      	movs	r2, #2
 8002134:	601a      	str	r2, [r3, #0]
 8002136:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	fa93 f2a3 	rbit	r2, r3
 8002140:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002144:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002146:	4ba5      	ldr	r3, [pc, #660]	; (80023dc <HAL_RCC_OscConfig+0x934>)
 8002148:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800214a:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800214e:	2102      	movs	r1, #2
 8002150:	6019      	str	r1, [r3, #0]
 8002152:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	fa93 f1a3 	rbit	r1, r3
 800215c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002160:	6019      	str	r1, [r3, #0]
  return(result);
 8002162:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	fab3 f383 	clz	r3, r3
 800216c:	b25b      	sxtb	r3, r3
 800216e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002172:	b25b      	sxtb	r3, r3
 8002174:	b2db      	uxtb	r3, r3
 8002176:	f003 031f 	and.w	r3, r3, #31
 800217a:	2101      	movs	r1, #1
 800217c:	fa01 f303 	lsl.w	r3, r1, r3
 8002180:	4013      	ands	r3, r2
 8002182:	2b00      	cmp	r3, #0
 8002184:	d0b1      	beq.n	80020ea <HAL_RCC_OscConfig+0x642>
 8002186:	e06a      	b.n	800225e <HAL_RCC_OscConfig+0x7b6>
 8002188:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800218c:	2201      	movs	r2, #1
 800218e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002190:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	fa93 f2a3 	rbit	r2, r3
 800219a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800219e:	601a      	str	r2, [r3, #0]
  return(result);
 80021a0:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80021a4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021a6:	fab3 f383 	clz	r3, r3
 80021aa:	461a      	mov	r2, r3
 80021ac:	4b8c      	ldr	r3, [pc, #560]	; (80023e0 <HAL_RCC_OscConfig+0x938>)
 80021ae:	4413      	add	r3, r2
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	461a      	mov	r2, r3
 80021b4:	2300      	movs	r3, #0
 80021b6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021b8:	f7fe fda0 	bl	8000cfc <HAL_GetTick>
 80021bc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021c0:	e009      	b.n	80021d6 <HAL_RCC_OscConfig+0x72e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021c2:	f7fe fd9b 	bl	8000cfc <HAL_GetTick>
 80021c6:	4602      	mov	r2, r0
 80021c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d901      	bls.n	80021d6 <HAL_RCC_OscConfig+0x72e>
        {
          return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e34f      	b.n	8002876 <HAL_RCC_OscConfig+0xdce>
 80021d6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80021da:	2202      	movs	r2, #2
 80021dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021de:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	fa93 f2a3 	rbit	r2, r3
 80021e8:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80021ec:	601a      	str	r2, [r3, #0]
 80021ee:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80021f2:	2202      	movs	r2, #2
 80021f4:	601a      	str	r2, [r3, #0]
 80021f6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	fa93 f2a3 	rbit	r2, r3
 8002200:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002204:	601a      	str	r2, [r3, #0]
 8002206:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800220a:	2202      	movs	r2, #2
 800220c:	601a      	str	r2, [r3, #0]
 800220e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	fa93 f2a3 	rbit	r2, r3
 8002218:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800221c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800221e:	4b6f      	ldr	r3, [pc, #444]	; (80023dc <HAL_RCC_OscConfig+0x934>)
 8002220:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002222:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002226:	2102      	movs	r1, #2
 8002228:	6019      	str	r1, [r3, #0]
 800222a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	fa93 f1a3 	rbit	r1, r3
 8002234:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002238:	6019      	str	r1, [r3, #0]
  return(result);
 800223a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	fab3 f383 	clz	r3, r3
 8002244:	b25b      	sxtb	r3, r3
 8002246:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800224a:	b25b      	sxtb	r3, r3
 800224c:	b2db      	uxtb	r3, r3
 800224e:	f003 031f 	and.w	r3, r3, #31
 8002252:	2101      	movs	r1, #1
 8002254:	fa01 f303 	lsl.w	r3, r1, r3
 8002258:	4013      	ands	r3, r2
 800225a:	2b00      	cmp	r3, #0
 800225c:	d1b1      	bne.n	80021c2 <HAL_RCC_OscConfig+0x71a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800225e:	1d3b      	adds	r3, r7, #4
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0304 	and.w	r3, r3, #4
 8002268:	2b00      	cmp	r3, #0
 800226a:	f000 8159 	beq.w	8002520 <HAL_RCC_OscConfig+0xa78>
  {
    FlagStatus       pwrclkchanged = RESET;
 800226e:	2300      	movs	r3, #0
 8002270:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002274:	4b59      	ldr	r3, [pc, #356]	; (80023dc <HAL_RCC_OscConfig+0x934>)
 8002276:	69db      	ldr	r3, [r3, #28]
 8002278:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d112      	bne.n	80022a6 <HAL_RCC_OscConfig+0x7fe>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002280:	4b56      	ldr	r3, [pc, #344]	; (80023dc <HAL_RCC_OscConfig+0x934>)
 8002282:	69db      	ldr	r3, [r3, #28]
 8002284:	4a55      	ldr	r2, [pc, #340]	; (80023dc <HAL_RCC_OscConfig+0x934>)
 8002286:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800228a:	61d3      	str	r3, [r2, #28]
 800228c:	4b53      	ldr	r3, [pc, #332]	; (80023dc <HAL_RCC_OscConfig+0x934>)
 800228e:	69db      	ldr	r3, [r3, #28]
 8002290:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002294:	f107 030c 	add.w	r3, r7, #12
 8002298:	601a      	str	r2, [r3, #0]
 800229a:	f107 030c 	add.w	r3, r7, #12
 800229e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80022a0:	2301      	movs	r3, #1
 80022a2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022a6:	4b4f      	ldr	r3, [pc, #316]	; (80023e4 <HAL_RCC_OscConfig+0x93c>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d11a      	bne.n	80022e8 <HAL_RCC_OscConfig+0x840>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022b2:	4b4c      	ldr	r3, [pc, #304]	; (80023e4 <HAL_RCC_OscConfig+0x93c>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a4b      	ldr	r2, [pc, #300]	; (80023e4 <HAL_RCC_OscConfig+0x93c>)
 80022b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022bc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022be:	f7fe fd1d 	bl	8000cfc <HAL_GetTick>
 80022c2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022c6:	e009      	b.n	80022dc <HAL_RCC_OscConfig+0x834>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022c8:	f7fe fd18 	bl	8000cfc <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	2b64      	cmp	r3, #100	; 0x64
 80022d6:	d901      	bls.n	80022dc <HAL_RCC_OscConfig+0x834>
        {
          return HAL_TIMEOUT;
 80022d8:	2303      	movs	r3, #3
 80022da:	e2cc      	b.n	8002876 <HAL_RCC_OscConfig+0xdce>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022dc:	4b41      	ldr	r3, [pc, #260]	; (80023e4 <HAL_RCC_OscConfig+0x93c>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d0ef      	beq.n	80022c8 <HAL_RCC_OscConfig+0x820>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022e8:	1d3b      	adds	r3, r7, #4
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	68db      	ldr	r3, [r3, #12]
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d106      	bne.n	8002300 <HAL_RCC_OscConfig+0x858>
 80022f2:	4b3a      	ldr	r3, [pc, #232]	; (80023dc <HAL_RCC_OscConfig+0x934>)
 80022f4:	6a1b      	ldr	r3, [r3, #32]
 80022f6:	4a39      	ldr	r2, [pc, #228]	; (80023dc <HAL_RCC_OscConfig+0x934>)
 80022f8:	f043 0301 	orr.w	r3, r3, #1
 80022fc:	6213      	str	r3, [r2, #32]
 80022fe:	e02f      	b.n	8002360 <HAL_RCC_OscConfig+0x8b8>
 8002300:	1d3b      	adds	r3, r7, #4
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	68db      	ldr	r3, [r3, #12]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d10c      	bne.n	8002324 <HAL_RCC_OscConfig+0x87c>
 800230a:	4b34      	ldr	r3, [pc, #208]	; (80023dc <HAL_RCC_OscConfig+0x934>)
 800230c:	6a1b      	ldr	r3, [r3, #32]
 800230e:	4a33      	ldr	r2, [pc, #204]	; (80023dc <HAL_RCC_OscConfig+0x934>)
 8002310:	f023 0301 	bic.w	r3, r3, #1
 8002314:	6213      	str	r3, [r2, #32]
 8002316:	4b31      	ldr	r3, [pc, #196]	; (80023dc <HAL_RCC_OscConfig+0x934>)
 8002318:	6a1b      	ldr	r3, [r3, #32]
 800231a:	4a30      	ldr	r2, [pc, #192]	; (80023dc <HAL_RCC_OscConfig+0x934>)
 800231c:	f023 0304 	bic.w	r3, r3, #4
 8002320:	6213      	str	r3, [r2, #32]
 8002322:	e01d      	b.n	8002360 <HAL_RCC_OscConfig+0x8b8>
 8002324:	1d3b      	adds	r3, r7, #4
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	68db      	ldr	r3, [r3, #12]
 800232a:	2b05      	cmp	r3, #5
 800232c:	d10c      	bne.n	8002348 <HAL_RCC_OscConfig+0x8a0>
 800232e:	4b2b      	ldr	r3, [pc, #172]	; (80023dc <HAL_RCC_OscConfig+0x934>)
 8002330:	6a1b      	ldr	r3, [r3, #32]
 8002332:	4a2a      	ldr	r2, [pc, #168]	; (80023dc <HAL_RCC_OscConfig+0x934>)
 8002334:	f043 0304 	orr.w	r3, r3, #4
 8002338:	6213      	str	r3, [r2, #32]
 800233a:	4b28      	ldr	r3, [pc, #160]	; (80023dc <HAL_RCC_OscConfig+0x934>)
 800233c:	6a1b      	ldr	r3, [r3, #32]
 800233e:	4a27      	ldr	r2, [pc, #156]	; (80023dc <HAL_RCC_OscConfig+0x934>)
 8002340:	f043 0301 	orr.w	r3, r3, #1
 8002344:	6213      	str	r3, [r2, #32]
 8002346:	e00b      	b.n	8002360 <HAL_RCC_OscConfig+0x8b8>
 8002348:	4b24      	ldr	r3, [pc, #144]	; (80023dc <HAL_RCC_OscConfig+0x934>)
 800234a:	6a1b      	ldr	r3, [r3, #32]
 800234c:	4a23      	ldr	r2, [pc, #140]	; (80023dc <HAL_RCC_OscConfig+0x934>)
 800234e:	f023 0301 	bic.w	r3, r3, #1
 8002352:	6213      	str	r3, [r2, #32]
 8002354:	4b21      	ldr	r3, [pc, #132]	; (80023dc <HAL_RCC_OscConfig+0x934>)
 8002356:	6a1b      	ldr	r3, [r3, #32]
 8002358:	4a20      	ldr	r2, [pc, #128]	; (80023dc <HAL_RCC_OscConfig+0x934>)
 800235a:	f023 0304 	bic.w	r3, r3, #4
 800235e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002360:	1d3b      	adds	r3, r7, #4
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d06b      	beq.n	8002442 <HAL_RCC_OscConfig+0x99a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800236a:	f7fe fcc7 	bl	8000cfc <HAL_GetTick>
 800236e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002372:	e00b      	b.n	800238c <HAL_RCC_OscConfig+0x8e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002374:	f7fe fcc2 	bl	8000cfc <HAL_GetTick>
 8002378:	4602      	mov	r2, r0
 800237a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800237e:	1ad3      	subs	r3, r2, r3
 8002380:	f241 3288 	movw	r2, #5000	; 0x1388
 8002384:	4293      	cmp	r3, r2
 8002386:	d901      	bls.n	800238c <HAL_RCC_OscConfig+0x8e4>
        {
          return HAL_TIMEOUT;
 8002388:	2303      	movs	r3, #3
 800238a:	e274      	b.n	8002876 <HAL_RCC_OscConfig+0xdce>
 800238c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002390:	2202      	movs	r2, #2
 8002392:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002394:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	fa93 f2a3 	rbit	r2, r3
 800239e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80023a2:	601a      	str	r2, [r3, #0]
 80023a4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80023a8:	2202      	movs	r2, #2
 80023aa:	601a      	str	r2, [r3, #0]
 80023ac:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	fa93 f2a3 	rbit	r2, r3
 80023b6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80023ba:	601a      	str	r2, [r3, #0]
  return(result);
 80023bc:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80023c0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023c2:	fab3 f383 	clz	r3, r3
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	095b      	lsrs	r3, r3, #5
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	f043 0302 	orr.w	r3, r3, #2
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d108      	bne.n	80023e8 <HAL_RCC_OscConfig+0x940>
 80023d6:	4b01      	ldr	r3, [pc, #4]	; (80023dc <HAL_RCC_OscConfig+0x934>)
 80023d8:	6a1b      	ldr	r3, [r3, #32]
 80023da:	e013      	b.n	8002404 <HAL_RCC_OscConfig+0x95c>
 80023dc:	40021000 	.word	0x40021000
 80023e0:	10908120 	.word	0x10908120
 80023e4:	40007000 	.word	0x40007000
 80023e8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80023ec:	2202      	movs	r2, #2
 80023ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	fa93 f2a3 	rbit	r2, r3
 80023fa:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80023fe:	601a      	str	r2, [r3, #0]
 8002400:	4bbb      	ldr	r3, [pc, #748]	; (80026f0 <HAL_RCC_OscConfig+0xc48>)
 8002402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002404:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002408:	2102      	movs	r1, #2
 800240a:	6011      	str	r1, [r2, #0]
 800240c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002410:	6812      	ldr	r2, [r2, #0]
 8002412:	fa92 f1a2 	rbit	r1, r2
 8002416:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800241a:	6011      	str	r1, [r2, #0]
  return(result);
 800241c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002420:	6812      	ldr	r2, [r2, #0]
 8002422:	fab2 f282 	clz	r2, r2
 8002426:	b252      	sxtb	r2, r2
 8002428:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800242c:	b252      	sxtb	r2, r2
 800242e:	b2d2      	uxtb	r2, r2
 8002430:	f002 021f 	and.w	r2, r2, #31
 8002434:	2101      	movs	r1, #1
 8002436:	fa01 f202 	lsl.w	r2, r1, r2
 800243a:	4013      	ands	r3, r2
 800243c:	2b00      	cmp	r3, #0
 800243e:	d099      	beq.n	8002374 <HAL_RCC_OscConfig+0x8cc>
 8002440:	e064      	b.n	800250c <HAL_RCC_OscConfig+0xa64>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002442:	f7fe fc5b 	bl	8000cfc <HAL_GetTick>
 8002446:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800244a:	e00b      	b.n	8002464 <HAL_RCC_OscConfig+0x9bc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800244c:	f7fe fc56 	bl	8000cfc <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	f241 3288 	movw	r2, #5000	; 0x1388
 800245c:	4293      	cmp	r3, r2
 800245e:	d901      	bls.n	8002464 <HAL_RCC_OscConfig+0x9bc>
        {
          return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	e208      	b.n	8002876 <HAL_RCC_OscConfig+0xdce>
 8002464:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002468:	2202      	movs	r2, #2
 800246a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800246c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	fa93 f2a3 	rbit	r2, r3
 8002476:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800247a:	601a      	str	r2, [r3, #0]
 800247c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002480:	2202      	movs	r2, #2
 8002482:	601a      	str	r2, [r3, #0]
 8002484:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	fa93 f2a3 	rbit	r2, r3
 800248e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002492:	601a      	str	r2, [r3, #0]
  return(result);
 8002494:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002498:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800249a:	fab3 f383 	clz	r3, r3
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	095b      	lsrs	r3, r3, #5
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	f043 0302 	orr.w	r3, r3, #2
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d102      	bne.n	80024b4 <HAL_RCC_OscConfig+0xa0c>
 80024ae:	4b90      	ldr	r3, [pc, #576]	; (80026f0 <HAL_RCC_OscConfig+0xc48>)
 80024b0:	6a1b      	ldr	r3, [r3, #32]
 80024b2:	e00d      	b.n	80024d0 <HAL_RCC_OscConfig+0xa28>
 80024b4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80024b8:	2202      	movs	r2, #2
 80024ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024bc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	fa93 f2a3 	rbit	r2, r3
 80024c6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80024ca:	601a      	str	r2, [r3, #0]
 80024cc:	4b88      	ldr	r3, [pc, #544]	; (80026f0 <HAL_RCC_OscConfig+0xc48>)
 80024ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d0:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80024d4:	2102      	movs	r1, #2
 80024d6:	6011      	str	r1, [r2, #0]
 80024d8:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80024dc:	6812      	ldr	r2, [r2, #0]
 80024de:	fa92 f1a2 	rbit	r1, r2
 80024e2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80024e6:	6011      	str	r1, [r2, #0]
  return(result);
 80024e8:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80024ec:	6812      	ldr	r2, [r2, #0]
 80024ee:	fab2 f282 	clz	r2, r2
 80024f2:	b252      	sxtb	r2, r2
 80024f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024f8:	b252      	sxtb	r2, r2
 80024fa:	b2d2      	uxtb	r2, r2
 80024fc:	f002 021f 	and.w	r2, r2, #31
 8002500:	2101      	movs	r1, #1
 8002502:	fa01 f202 	lsl.w	r2, r1, r2
 8002506:	4013      	ands	r3, r2
 8002508:	2b00      	cmp	r3, #0
 800250a:	d19f      	bne.n	800244c <HAL_RCC_OscConfig+0x9a4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800250c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002510:	2b01      	cmp	r3, #1
 8002512:	d105      	bne.n	8002520 <HAL_RCC_OscConfig+0xa78>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002514:	4b76      	ldr	r3, [pc, #472]	; (80026f0 <HAL_RCC_OscConfig+0xc48>)
 8002516:	69db      	ldr	r3, [r3, #28]
 8002518:	4a75      	ldr	r2, [pc, #468]	; (80026f0 <HAL_RCC_OscConfig+0xc48>)
 800251a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800251e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002520:	1d3b      	adds	r3, r7, #4
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	69db      	ldr	r3, [r3, #28]
 8002526:	2b00      	cmp	r3, #0
 8002528:	f000 81a4 	beq.w	8002874 <HAL_RCC_OscConfig+0xdcc>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800252c:	4b70      	ldr	r3, [pc, #448]	; (80026f0 <HAL_RCC_OscConfig+0xc48>)
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f003 030c 	and.w	r3, r3, #12
 8002534:	2b08      	cmp	r3, #8
 8002536:	f000 819b 	beq.w	8002870 <HAL_RCC_OscConfig+0xdc8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800253a:	1d3b      	adds	r3, r7, #4
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	69db      	ldr	r3, [r3, #28]
 8002540:	2b02      	cmp	r3, #2
 8002542:	f040 8113 	bne.w	800276c <HAL_RCC_OscConfig+0xcc4>
 8002546:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800254a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800254e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002550:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	fa93 f2a3 	rbit	r2, r3
 800255a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800255e:	601a      	str	r2, [r3, #0]
  return(result);
 8002560:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002564:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002566:	fab3 f383 	clz	r3, r3
 800256a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800256e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	461a      	mov	r2, r3
 8002576:	2300      	movs	r3, #0
 8002578:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800257a:	f7fe fbbf 	bl	8000cfc <HAL_GetTick>
 800257e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002582:	e009      	b.n	8002598 <HAL_RCC_OscConfig+0xaf0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002584:	f7fe fbba 	bl	8000cfc <HAL_GetTick>
 8002588:	4602      	mov	r2, r0
 800258a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	2b02      	cmp	r3, #2
 8002592:	d901      	bls.n	8002598 <HAL_RCC_OscConfig+0xaf0>
          {
            return HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	e16e      	b.n	8002876 <HAL_RCC_OscConfig+0xdce>
 8002598:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800259c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	fa93 f2a3 	rbit	r2, r3
 80025ac:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80025b0:	601a      	str	r2, [r3, #0]
  return(result);
 80025b2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80025b6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025b8:	fab3 f383 	clz	r3, r3
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	095b      	lsrs	r3, r3, #5
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	f043 0301 	orr.w	r3, r3, #1
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d102      	bne.n	80025d2 <HAL_RCC_OscConfig+0xb2a>
 80025cc:	4b48      	ldr	r3, [pc, #288]	; (80026f0 <HAL_RCC_OscConfig+0xc48>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	e01b      	b.n	800260a <HAL_RCC_OscConfig+0xb62>
 80025d2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80025d6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025dc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	fa93 f2a3 	rbit	r2, r3
 80025e6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80025ea:	601a      	str	r2, [r3, #0]
 80025ec:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80025f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025f4:	601a      	str	r2, [r3, #0]
 80025f6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	fa93 f2a3 	rbit	r2, r3
 8002600:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002604:	601a      	str	r2, [r3, #0]
 8002606:	4b3a      	ldr	r3, [pc, #232]	; (80026f0 <HAL_RCC_OscConfig+0xc48>)
 8002608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800260e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002612:	6011      	str	r1, [r2, #0]
 8002614:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002618:	6812      	ldr	r2, [r2, #0]
 800261a:	fa92 f1a2 	rbit	r1, r2
 800261e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002622:	6011      	str	r1, [r2, #0]
  return(result);
 8002624:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002628:	6812      	ldr	r2, [r2, #0]
 800262a:	fab2 f282 	clz	r2, r2
 800262e:	b252      	sxtb	r2, r2
 8002630:	f042 0220 	orr.w	r2, r2, #32
 8002634:	b252      	sxtb	r2, r2
 8002636:	b2d2      	uxtb	r2, r2
 8002638:	f002 021f 	and.w	r2, r2, #31
 800263c:	2101      	movs	r1, #1
 800263e:	fa01 f202 	lsl.w	r2, r1, r2
 8002642:	4013      	ands	r3, r2
 8002644:	2b00      	cmp	r3, #0
 8002646:	d19d      	bne.n	8002584 <HAL_RCC_OscConfig+0xadc>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002648:	4b29      	ldr	r3, [pc, #164]	; (80026f0 <HAL_RCC_OscConfig+0xc48>)
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002650:	1d3b      	adds	r3, r7, #4
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002656:	1d3b      	adds	r3, r7, #4
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	6a1b      	ldr	r3, [r3, #32]
 800265c:	430b      	orrs	r3, r1
 800265e:	4924      	ldr	r1, [pc, #144]	; (80026f0 <HAL_RCC_OscConfig+0xc48>)
 8002660:	4313      	orrs	r3, r2
 8002662:	604b      	str	r3, [r1, #4]
 8002664:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002668:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800266c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800266e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	fa93 f2a3 	rbit	r2, r3
 8002678:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800267c:	601a      	str	r2, [r3, #0]
  return(result);
 800267e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002682:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002684:	fab3 f383 	clz	r3, r3
 8002688:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800268c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	461a      	mov	r2, r3
 8002694:	2301      	movs	r3, #1
 8002696:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002698:	f7fe fb30 	bl	8000cfc <HAL_GetTick>
 800269c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026a0:	e009      	b.n	80026b6 <HAL_RCC_OscConfig+0xc0e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026a2:	f7fe fb2b 	bl	8000cfc <HAL_GetTick>
 80026a6:	4602      	mov	r2, r0
 80026a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d901      	bls.n	80026b6 <HAL_RCC_OscConfig+0xc0e>
          {
            return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e0df      	b.n	8002876 <HAL_RCC_OscConfig+0xdce>
 80026b6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80026ba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	fa93 f2a3 	rbit	r2, r3
 80026ca:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80026ce:	601a      	str	r2, [r3, #0]
  return(result);
 80026d0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80026d4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026d6:	fab3 f383 	clz	r3, r3
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	095b      	lsrs	r3, r3, #5
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	f043 0301 	orr.w	r3, r3, #1
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d104      	bne.n	80026f4 <HAL_RCC_OscConfig+0xc4c>
 80026ea:	4b01      	ldr	r3, [pc, #4]	; (80026f0 <HAL_RCC_OscConfig+0xc48>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	e01d      	b.n	800272c <HAL_RCC_OscConfig+0xc84>
 80026f0:	40021000 	.word	0x40021000
 80026f4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80026f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026fe:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	fa93 f2a3 	rbit	r2, r3
 8002708:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800270c:	601a      	str	r2, [r3, #0]
 800270e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002712:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002716:	601a      	str	r2, [r3, #0]
 8002718:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	fa93 f2a3 	rbit	r2, r3
 8002722:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002726:	601a      	str	r2, [r3, #0]
 8002728:	4b55      	ldr	r3, [pc, #340]	; (8002880 <HAL_RCC_OscConfig+0xdd8>)
 800272a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002730:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002734:	6011      	str	r1, [r2, #0]
 8002736:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800273a:	6812      	ldr	r2, [r2, #0]
 800273c:	fa92 f1a2 	rbit	r1, r2
 8002740:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002744:	6011      	str	r1, [r2, #0]
  return(result);
 8002746:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800274a:	6812      	ldr	r2, [r2, #0]
 800274c:	fab2 f282 	clz	r2, r2
 8002750:	b252      	sxtb	r2, r2
 8002752:	f042 0220 	orr.w	r2, r2, #32
 8002756:	b252      	sxtb	r2, r2
 8002758:	b2d2      	uxtb	r2, r2
 800275a:	f002 021f 	and.w	r2, r2, #31
 800275e:	2101      	movs	r1, #1
 8002760:	fa01 f202 	lsl.w	r2, r1, r2
 8002764:	4013      	ands	r3, r2
 8002766:	2b00      	cmp	r3, #0
 8002768:	d09b      	beq.n	80026a2 <HAL_RCC_OscConfig+0xbfa>
 800276a:	e083      	b.n	8002874 <HAL_RCC_OscConfig+0xdcc>
 800276c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002770:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002774:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002776:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	fa93 f2a3 	rbit	r2, r3
 8002780:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002784:	601a      	str	r2, [r3, #0]
  return(result);
 8002786:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800278a:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800278c:	fab3 f383 	clz	r3, r3
 8002790:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002794:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	461a      	mov	r2, r3
 800279c:	2300      	movs	r3, #0
 800279e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027a0:	f7fe faac 	bl	8000cfc <HAL_GetTick>
 80027a4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027a8:	e009      	b.n	80027be <HAL_RCC_OscConfig+0xd16>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027aa:	f7fe faa7 	bl	8000cfc <HAL_GetTick>
 80027ae:	4602      	mov	r2, r0
 80027b0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d901      	bls.n	80027be <HAL_RCC_OscConfig+0xd16>
          {
            return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e05b      	b.n	8002876 <HAL_RCC_OscConfig+0xdce>
 80027be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	fa93 f2a3 	rbit	r2, r3
 80027d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80027d6:	601a      	str	r2, [r3, #0]
  return(result);
 80027d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80027dc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027de:	fab3 f383 	clz	r3, r3
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	095b      	lsrs	r3, r3, #5
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	f043 0301 	orr.w	r3, r3, #1
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d102      	bne.n	80027f8 <HAL_RCC_OscConfig+0xd50>
 80027f2:	4b23      	ldr	r3, [pc, #140]	; (8002880 <HAL_RCC_OscConfig+0xdd8>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	e01b      	b.n	8002830 <HAL_RCC_OscConfig+0xd88>
 80027f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002800:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002802:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	fa93 f2a3 	rbit	r2, r3
 800280c:	f107 0320 	add.w	r3, r7, #32
 8002810:	601a      	str	r2, [r3, #0]
 8002812:	f107 031c 	add.w	r3, r7, #28
 8002816:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800281a:	601a      	str	r2, [r3, #0]
 800281c:	f107 031c 	add.w	r3, r7, #28
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	fa93 f2a3 	rbit	r2, r3
 8002826:	f107 0318 	add.w	r3, r7, #24
 800282a:	601a      	str	r2, [r3, #0]
 800282c:	4b14      	ldr	r3, [pc, #80]	; (8002880 <HAL_RCC_OscConfig+0xdd8>)
 800282e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002830:	f107 0214 	add.w	r2, r7, #20
 8002834:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002838:	6011      	str	r1, [r2, #0]
 800283a:	f107 0214 	add.w	r2, r7, #20
 800283e:	6812      	ldr	r2, [r2, #0]
 8002840:	fa92 f1a2 	rbit	r1, r2
 8002844:	f107 0210 	add.w	r2, r7, #16
 8002848:	6011      	str	r1, [r2, #0]
  return(result);
 800284a:	f107 0210 	add.w	r2, r7, #16
 800284e:	6812      	ldr	r2, [r2, #0]
 8002850:	fab2 f282 	clz	r2, r2
 8002854:	b252      	sxtb	r2, r2
 8002856:	f042 0220 	orr.w	r2, r2, #32
 800285a:	b252      	sxtb	r2, r2
 800285c:	b2d2      	uxtb	r2, r2
 800285e:	f002 021f 	and.w	r2, r2, #31
 8002862:	2101      	movs	r1, #1
 8002864:	fa01 f202 	lsl.w	r2, r1, r2
 8002868:	4013      	ands	r3, r2
 800286a:	2b00      	cmp	r3, #0
 800286c:	d19d      	bne.n	80027aa <HAL_RCC_OscConfig+0xd02>
 800286e:	e001      	b.n	8002874 <HAL_RCC_OscConfig+0xdcc>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	e000      	b.n	8002876 <HAL_RCC_OscConfig+0xdce>
    }
  }
  
  return HAL_OK;
 8002874:	2300      	movs	r3, #0
}
 8002876:	4618      	mov	r0, r3
 8002878:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	40021000 	.word	0x40021000

08002884 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b09e      	sub	sp, #120	; 0x78
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800288e:	2300      	movs	r3, #0
 8002890:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d101      	bne.n	800289c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e164      	b.n	8002b66 <HAL_RCC_ClockConfig+0x2e2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800289c:	4b92      	ldr	r3, [pc, #584]	; (8002ae8 <HAL_RCC_ClockConfig+0x264>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0307 	and.w	r3, r3, #7
 80028a4:	683a      	ldr	r2, [r7, #0]
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d910      	bls.n	80028cc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028aa:	4b8f      	ldr	r3, [pc, #572]	; (8002ae8 <HAL_RCC_ClockConfig+0x264>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f023 0207 	bic.w	r2, r3, #7
 80028b2:	498d      	ldr	r1, [pc, #564]	; (8002ae8 <HAL_RCC_ClockConfig+0x264>)
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	4313      	orrs	r3, r2
 80028b8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ba:	4b8b      	ldr	r3, [pc, #556]	; (8002ae8 <HAL_RCC_ClockConfig+0x264>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0307 	and.w	r3, r3, #7
 80028c2:	683a      	ldr	r2, [r7, #0]
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d001      	beq.n	80028cc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e14c      	b.n	8002b66 <HAL_RCC_ClockConfig+0x2e2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 0302 	and.w	r3, r3, #2
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d008      	beq.n	80028ea <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028d8:	4b84      	ldr	r3, [pc, #528]	; (8002aec <HAL_RCC_ClockConfig+0x268>)
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	4981      	ldr	r1, [pc, #516]	; (8002aec <HAL_RCC_ClockConfig+0x268>)
 80028e6:	4313      	orrs	r3, r2
 80028e8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0301 	and.w	r3, r3, #1
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	f000 80df 	beq.w	8002ab6 <HAL_RCC_ClockConfig+0x232>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d13d      	bne.n	800297c <HAL_RCC_ClockConfig+0xf8>
 8002900:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002904:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002906:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002908:	fa93 f3a3 	rbit	r3, r3
 800290c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return(result);
 800290e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002910:	fab3 f383 	clz	r3, r3
 8002914:	b2db      	uxtb	r3, r3
 8002916:	095b      	lsrs	r3, r3, #5
 8002918:	b2db      	uxtb	r3, r3
 800291a:	f043 0301 	orr.w	r3, r3, #1
 800291e:	b2db      	uxtb	r3, r3
 8002920:	2b01      	cmp	r3, #1
 8002922:	d102      	bne.n	800292a <HAL_RCC_ClockConfig+0xa6>
 8002924:	4b71      	ldr	r3, [pc, #452]	; (8002aec <HAL_RCC_ClockConfig+0x268>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	e00f      	b.n	800294a <HAL_RCC_ClockConfig+0xc6>
 800292a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800292e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002930:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002932:	fa93 f3a3 	rbit	r3, r3
 8002936:	667b      	str	r3, [r7, #100]	; 0x64
 8002938:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800293c:	663b      	str	r3, [r7, #96]	; 0x60
 800293e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002940:	fa93 f3a3 	rbit	r3, r3
 8002944:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002946:	4b69      	ldr	r3, [pc, #420]	; (8002aec <HAL_RCC_ClockConfig+0x268>)
 8002948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800294e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002950:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002952:	fa92 f2a2 	rbit	r2, r2
 8002956:	657a      	str	r2, [r7, #84]	; 0x54
  return(result);
 8002958:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800295a:	fab2 f282 	clz	r2, r2
 800295e:	b252      	sxtb	r2, r2
 8002960:	f042 0220 	orr.w	r2, r2, #32
 8002964:	b252      	sxtb	r2, r2
 8002966:	b2d2      	uxtb	r2, r2
 8002968:	f002 021f 	and.w	r2, r2, #31
 800296c:	2101      	movs	r1, #1
 800296e:	fa01 f202 	lsl.w	r2, r1, r2
 8002972:	4013      	ands	r3, r2
 8002974:	2b00      	cmp	r3, #0
 8002976:	d17d      	bne.n	8002a74 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e0f4      	b.n	8002b66 <HAL_RCC_ClockConfig+0x2e2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	2b02      	cmp	r3, #2
 8002982:	d13d      	bne.n	8002a00 <HAL_RCC_ClockConfig+0x17c>
 8002984:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002988:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800298a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800298c:	fa93 f3a3 	rbit	r3, r3
 8002990:	64fb      	str	r3, [r7, #76]	; 0x4c
  return(result);
 8002992:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002994:	fab3 f383 	clz	r3, r3
 8002998:	b2db      	uxtb	r3, r3
 800299a:	095b      	lsrs	r3, r3, #5
 800299c:	b2db      	uxtb	r3, r3
 800299e:	f043 0301 	orr.w	r3, r3, #1
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d102      	bne.n	80029ae <HAL_RCC_ClockConfig+0x12a>
 80029a8:	4b50      	ldr	r3, [pc, #320]	; (8002aec <HAL_RCC_ClockConfig+0x268>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	e00f      	b.n	80029ce <HAL_RCC_ClockConfig+0x14a>
 80029ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029b2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029b6:	fa93 f3a3 	rbit	r3, r3
 80029ba:	647b      	str	r3, [r7, #68]	; 0x44
 80029bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029c0:	643b      	str	r3, [r7, #64]	; 0x40
 80029c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029c4:	fa93 f3a3 	rbit	r3, r3
 80029c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029ca:	4b48      	ldr	r3, [pc, #288]	; (8002aec <HAL_RCC_ClockConfig+0x268>)
 80029cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029d2:	63ba      	str	r2, [r7, #56]	; 0x38
 80029d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80029d6:	fa92 f2a2 	rbit	r2, r2
 80029da:	637a      	str	r2, [r7, #52]	; 0x34
  return(result);
 80029dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80029de:	fab2 f282 	clz	r2, r2
 80029e2:	b252      	sxtb	r2, r2
 80029e4:	f042 0220 	orr.w	r2, r2, #32
 80029e8:	b252      	sxtb	r2, r2
 80029ea:	b2d2      	uxtb	r2, r2
 80029ec:	f002 021f 	and.w	r2, r2, #31
 80029f0:	2101      	movs	r1, #1
 80029f2:	fa01 f202 	lsl.w	r2, r1, r2
 80029f6:	4013      	ands	r3, r2
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d13b      	bne.n	8002a74 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e0b2      	b.n	8002b66 <HAL_RCC_ClockConfig+0x2e2>
 8002a00:	2302      	movs	r3, #2
 8002a02:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a06:	fa93 f3a3 	rbit	r3, r3
 8002a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8002a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a0e:	fab3 f383 	clz	r3, r3
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	095b      	lsrs	r3, r3, #5
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	f043 0301 	orr.w	r3, r3, #1
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d102      	bne.n	8002a28 <HAL_RCC_ClockConfig+0x1a4>
 8002a22:	4b32      	ldr	r3, [pc, #200]	; (8002aec <HAL_RCC_ClockConfig+0x268>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	e00d      	b.n	8002a44 <HAL_RCC_ClockConfig+0x1c0>
 8002a28:	2302      	movs	r3, #2
 8002a2a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a2e:	fa93 f3a3 	rbit	r3, r3
 8002a32:	627b      	str	r3, [r7, #36]	; 0x24
 8002a34:	2302      	movs	r3, #2
 8002a36:	623b      	str	r3, [r7, #32]
 8002a38:	6a3b      	ldr	r3, [r7, #32]
 8002a3a:	fa93 f3a3 	rbit	r3, r3
 8002a3e:	61fb      	str	r3, [r7, #28]
 8002a40:	4b2a      	ldr	r3, [pc, #168]	; (8002aec <HAL_RCC_ClockConfig+0x268>)
 8002a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a44:	2202      	movs	r2, #2
 8002a46:	61ba      	str	r2, [r7, #24]
 8002a48:	69ba      	ldr	r2, [r7, #24]
 8002a4a:	fa92 f2a2 	rbit	r2, r2
 8002a4e:	617a      	str	r2, [r7, #20]
  return(result);
 8002a50:	697a      	ldr	r2, [r7, #20]
 8002a52:	fab2 f282 	clz	r2, r2
 8002a56:	b252      	sxtb	r2, r2
 8002a58:	f042 0220 	orr.w	r2, r2, #32
 8002a5c:	b252      	sxtb	r2, r2
 8002a5e:	b2d2      	uxtb	r2, r2
 8002a60:	f002 021f 	and.w	r2, r2, #31
 8002a64:	2101      	movs	r1, #1
 8002a66:	fa01 f202 	lsl.w	r2, r1, r2
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d101      	bne.n	8002a74 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e078      	b.n	8002b66 <HAL_RCC_ClockConfig+0x2e2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a74:	4b1d      	ldr	r3, [pc, #116]	; (8002aec <HAL_RCC_ClockConfig+0x268>)
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f023 0203 	bic.w	r2, r3, #3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	491a      	ldr	r1, [pc, #104]	; (8002aec <HAL_RCC_ClockConfig+0x268>)
 8002a82:	4313      	orrs	r3, r2
 8002a84:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a86:	f7fe f939 	bl	8000cfc <HAL_GetTick>
 8002a8a:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a8c:	e00a      	b.n	8002aa4 <HAL_RCC_ClockConfig+0x220>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a8e:	f7fe f935 	bl	8000cfc <HAL_GetTick>
 8002a92:	4602      	mov	r2, r0
 8002a94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d901      	bls.n	8002aa4 <HAL_RCC_ClockConfig+0x220>
      {
        return HAL_TIMEOUT;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	e060      	b.n	8002b66 <HAL_RCC_ClockConfig+0x2e2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aa4:	4b11      	ldr	r3, [pc, #68]	; (8002aec <HAL_RCC_ClockConfig+0x268>)
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f003 020c 	and.w	r2, r3, #12
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d1eb      	bne.n	8002a8e <HAL_RCC_ClockConfig+0x20a>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ab6:	4b0c      	ldr	r3, [pc, #48]	; (8002ae8 <HAL_RCC_ClockConfig+0x264>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0307 	and.w	r3, r3, #7
 8002abe:	683a      	ldr	r2, [r7, #0]
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d215      	bcs.n	8002af0 <HAL_RCC_ClockConfig+0x26c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ac4:	4b08      	ldr	r3, [pc, #32]	; (8002ae8 <HAL_RCC_ClockConfig+0x264>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f023 0207 	bic.w	r2, r3, #7
 8002acc:	4906      	ldr	r1, [pc, #24]	; (8002ae8 <HAL_RCC_ClockConfig+0x264>)
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ad4:	4b04      	ldr	r3, [pc, #16]	; (8002ae8 <HAL_RCC_ClockConfig+0x264>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0307 	and.w	r3, r3, #7
 8002adc:	683a      	ldr	r2, [r7, #0]
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d006      	beq.n	8002af0 <HAL_RCC_ClockConfig+0x26c>
    {
      return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e03f      	b.n	8002b66 <HAL_RCC_ClockConfig+0x2e2>
 8002ae6:	bf00      	nop
 8002ae8:	40022000 	.word	0x40022000
 8002aec:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0304 	and.w	r3, r3, #4
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d008      	beq.n	8002b0e <HAL_RCC_ClockConfig+0x28a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002afc:	4b1c      	ldr	r3, [pc, #112]	; (8002b70 <HAL_RCC_ClockConfig+0x2ec>)
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	4919      	ldr	r1, [pc, #100]	; (8002b70 <HAL_RCC_ClockConfig+0x2ec>)
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 0308 	and.w	r3, r3, #8
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d009      	beq.n	8002b2e <HAL_RCC_ClockConfig+0x2aa>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b1a:	4b15      	ldr	r3, [pc, #84]	; (8002b70 <HAL_RCC_ClockConfig+0x2ec>)
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	691b      	ldr	r3, [r3, #16]
 8002b26:	00db      	lsls	r3, r3, #3
 8002b28:	4911      	ldr	r1, [pc, #68]	; (8002b70 <HAL_RCC_ClockConfig+0x2ec>)
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002b2e:	f000 f825 	bl	8002b7c <HAL_RCC_GetSysClockFreq>
 8002b32:	4601      	mov	r1, r0
 8002b34:	4b0e      	ldr	r3, [pc, #56]	; (8002b70 <HAL_RCC_ClockConfig+0x2ec>)
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002b3c:	23f0      	movs	r3, #240	; 0xf0
 8002b3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	fa93 f3a3 	rbit	r3, r3
 8002b46:	60fb      	str	r3, [r7, #12]
  return(result);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	fab3 f383 	clz	r3, r3
 8002b4e:	fa22 f303 	lsr.w	r3, r2, r3
 8002b52:	4a08      	ldr	r2, [pc, #32]	; (8002b74 <HAL_RCC_ClockConfig+0x2f0>)
 8002b54:	5cd3      	ldrb	r3, [r2, r3]
 8002b56:	fa21 f303 	lsr.w	r3, r1, r3
 8002b5a:	4a07      	ldr	r2, [pc, #28]	; (8002b78 <HAL_RCC_ClockConfig+0x2f4>)
 8002b5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002b5e:	2000      	movs	r0, #0
 8002b60:	f7fe f888 	bl	8000c74 <HAL_InitTick>
  
  return HAL_OK;
 8002b64:	2300      	movs	r3, #0
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3778      	adds	r7, #120	; 0x78
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	40021000 	.word	0x40021000
 8002b74:	0800799c 	.word	0x0800799c
 8002b78:	20000008 	.word	0x20000008

08002b7c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b08b      	sub	sp, #44	; 0x2c
 8002b80:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b82:	2300      	movs	r3, #0
 8002b84:	61fb      	str	r3, [r7, #28]
 8002b86:	2300      	movs	r3, #0
 8002b88:	61bb      	str	r3, [r7, #24]
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b8e:	2300      	movs	r3, #0
 8002b90:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002b92:	2300      	movs	r3, #0
 8002b94:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002b96:	4b29      	ldr	r3, [pc, #164]	; (8002c3c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	f003 030c 	and.w	r3, r3, #12
 8002ba2:	2b04      	cmp	r3, #4
 8002ba4:	d002      	beq.n	8002bac <HAL_RCC_GetSysClockFreq+0x30>
 8002ba6:	2b08      	cmp	r3, #8
 8002ba8:	d003      	beq.n	8002bb2 <HAL_RCC_GetSysClockFreq+0x36>
 8002baa:	e03c      	b.n	8002c26 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002bac:	4b24      	ldr	r3, [pc, #144]	; (8002c40 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002bae:	623b      	str	r3, [r7, #32]
      break;
 8002bb0:	e03c      	b.n	8002c2c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002bb8:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8002bbc:	60bb      	str	r3, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	fa93 f3a3 	rbit	r3, r3
 8002bc4:	607b      	str	r3, [r7, #4]
  return(result);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	fab3 f383 	clz	r3, r3
 8002bcc:	fa22 f303 	lsr.w	r3, r2, r3
 8002bd0:	4a1c      	ldr	r2, [pc, #112]	; (8002c44 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002bd2:	5cd3      	ldrb	r3, [r2, r3]
 8002bd4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002bd6:	4b19      	ldr	r3, [pc, #100]	; (8002c3c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bda:	f003 020f 	and.w	r2, r3, #15
 8002bde:	230f      	movs	r3, #15
 8002be0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	fa93 f3a3 	rbit	r3, r3
 8002be8:	60fb      	str	r3, [r7, #12]
  return(result);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	fab3 f383 	clz	r3, r3
 8002bf0:	fa22 f303 	lsr.w	r3, r2, r3
 8002bf4:	4a14      	ldr	r2, [pc, #80]	; (8002c48 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002bf6:	5cd3      	ldrb	r3, [r2, r3]
 8002bf8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d008      	beq.n	8002c16 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8002c04:	4a0e      	ldr	r2, [pc, #56]	; (8002c40 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002c06:	69bb      	ldr	r3, [r7, #24]
 8002c08:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	fb02 f303 	mul.w	r3, r2, r3
 8002c12:	627b      	str	r3, [r7, #36]	; 0x24
 8002c14:	e004      	b.n	8002c20 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	4a0c      	ldr	r2, [pc, #48]	; (8002c4c <HAL_RCC_GetSysClockFreq+0xd0>)
 8002c1a:	fb02 f303 	mul.w	r3, r2, r3
 8002c1e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c22:	623b      	str	r3, [r7, #32]
      break;
 8002c24:	e002      	b.n	8002c2c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c26:	4b06      	ldr	r3, [pc, #24]	; (8002c40 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002c28:	623b      	str	r3, [r7, #32]
      break;
 8002c2a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c2c:	6a3b      	ldr	r3, [r7, #32]
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	372c      	adds	r7, #44	; 0x2c
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr
 8002c3a:	bf00      	nop
 8002c3c:	40021000 	.word	0x40021000
 8002c40:	007a1200 	.word	0x007a1200
 8002c44:	0800797c 	.word	0x0800797c
 8002c48:	0800798c 	.word	0x0800798c
 8002c4c:	003d0900 	.word	0x003d0900

08002c50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c50:	b480      	push	{r7}
 8002c52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c54:	4b03      	ldr	r3, [pc, #12]	; (8002c64 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c56:	681b      	ldr	r3, [r3, #0]
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop
 8002c64:	20000008 	.word	0x20000008

08002c68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002c6e:	f7ff ffef 	bl	8002c50 <HAL_RCC_GetHCLKFreq>
 8002c72:	4601      	mov	r1, r0
 8002c74:	4b0b      	ldr	r3, [pc, #44]	; (8002ca4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002c7c:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002c80:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	fa93 f3a3 	rbit	r3, r3
 8002c88:	603b      	str	r3, [r7, #0]
  return(result);
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	fab3 f383 	clz	r3, r3
 8002c90:	fa22 f303 	lsr.w	r3, r2, r3
 8002c94:	4a04      	ldr	r2, [pc, #16]	; (8002ca8 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002c96:	5cd3      	ldrb	r3, [r2, r3]
 8002c98:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3708      	adds	r7, #8
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	40021000 	.word	0x40021000
 8002ca8:	080079ac 	.word	0x080079ac

08002cac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002cb2:	f7ff ffcd 	bl	8002c50 <HAL_RCC_GetHCLKFreq>
 8002cb6:	4601      	mov	r1, r0
 8002cb8:	4b0b      	ldr	r3, [pc, #44]	; (8002ce8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 8002cc0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002cc4:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	fa93 f3a3 	rbit	r3, r3
 8002ccc:	603b      	str	r3, [r7, #0]
  return(result);
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	fab3 f383 	clz	r3, r3
 8002cd4:	fa22 f303 	lsr.w	r3, r2, r3
 8002cd8:	4a04      	ldr	r2, [pc, #16]	; (8002cec <HAL_RCC_GetPCLK2Freq+0x40>)
 8002cda:	5cd3      	ldrb	r3, [r2, r3]
 8002cdc:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3708      	adds	r7, #8
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	40021000 	.word	0x40021000
 8002cec:	080079ac 	.word	0x080079ac

08002cf0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b092      	sub	sp, #72	; 0x48
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	f000 80cf 	beq.w	8002eac <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d14:	4b86      	ldr	r3, [pc, #536]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d16:	69db      	ldr	r3, [r3, #28]
 8002d18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d10e      	bne.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d20:	4b83      	ldr	r3, [pc, #524]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d22:	69db      	ldr	r3, [r3, #28]
 8002d24:	4a82      	ldr	r2, [pc, #520]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d2a:	61d3      	str	r3, [r2, #28]
 8002d2c:	4b80      	ldr	r3, [pc, #512]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d2e:	69db      	ldr	r3, [r3, #28]
 8002d30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d34:	60bb      	str	r3, [r7, #8]
 8002d36:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d3e:	4b7d      	ldr	r3, [pc, #500]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d118      	bne.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d4a:	4b7a      	ldr	r3, [pc, #488]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a79      	ldr	r2, [pc, #484]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002d50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d54:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d56:	f7fd ffd1 	bl	8000cfc <HAL_GetTick>
 8002d5a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d5c:	e008      	b.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d5e:	f7fd ffcd 	bl	8000cfc <HAL_GetTick>
 8002d62:	4602      	mov	r2, r0
 8002d64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	2b64      	cmp	r3, #100	; 0x64
 8002d6a:	d901      	bls.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	e0da      	b.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x236>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d70:	4b70      	ldr	r3, [pc, #448]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d0f0      	beq.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d7c:	4b6c      	ldr	r3, [pc, #432]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d7e:	6a1b      	ldr	r3, [r3, #32]
 8002d80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d84:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d07c      	beq.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d94:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d075      	beq.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d9a:	4b65      	ldr	r3, [pc, #404]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d9c:	6a1b      	ldr	r3, [r3, #32]
 8002d9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002da2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002da4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002da8:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dac:	fa93 f3a3 	rbit	r3, r3
 8002db0:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8002db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002db4:	fab3 f383 	clz	r3, r3
 8002db8:	461a      	mov	r2, r3
 8002dba:	4b5f      	ldr	r3, [pc, #380]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002dbc:	4413      	add	r3, r2
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	6013      	str	r3, [r2, #0]
 8002dc6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002dca:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dce:	fa93 f3a3 	rbit	r3, r3
 8002dd2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002dd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002dd6:	fab3 f383 	clz	r3, r3
 8002dda:	461a      	mov	r2, r3
 8002ddc:	4b56      	ldr	r3, [pc, #344]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002dde:	4413      	add	r3, r2
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	461a      	mov	r2, r3
 8002de4:	2300      	movs	r3, #0
 8002de6:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002de8:	4a51      	ldr	r2, [pc, #324]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002dea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dec:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002dee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002df0:	f003 0301 	and.w	r3, r3, #1
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d046      	beq.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df8:	f7fd ff80 	bl	8000cfc <HAL_GetTick>
 8002dfc:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dfe:	e00a      	b.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x126>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e00:	f7fd ff7c 	bl	8000cfc <HAL_GetTick>
 8002e04:	4602      	mov	r2, r0
 8002e06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d901      	bls.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x126>
          {
            return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e087      	b.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x236>
 8002e16:	2302      	movs	r3, #2
 8002e18:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e1c:	fa93 f3a3 	rbit	r3, r3
 8002e20:	627b      	str	r3, [r7, #36]	; 0x24
 8002e22:	2302      	movs	r3, #2
 8002e24:	623b      	str	r3, [r7, #32]
 8002e26:	6a3b      	ldr	r3, [r7, #32]
 8002e28:	fa93 f3a3 	rbit	r3, r3
 8002e2c:	61fb      	str	r3, [r7, #28]
  return(result);
 8002e2e:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e30:	fab3 f383 	clz	r3, r3
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	095b      	lsrs	r3, r3, #5
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	f043 0302 	orr.w	r3, r3, #2
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	2b02      	cmp	r3, #2
 8002e42:	d102      	bne.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8002e44:	4b3a      	ldr	r3, [pc, #232]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e46:	6a1b      	ldr	r3, [r3, #32]
 8002e48:	e007      	b.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x16a>
 8002e4a:	2302      	movs	r3, #2
 8002e4c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e4e:	69bb      	ldr	r3, [r7, #24]
 8002e50:	fa93 f3a3 	rbit	r3, r3
 8002e54:	617b      	str	r3, [r7, #20]
 8002e56:	4b36      	ldr	r3, [pc, #216]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5a:	2202      	movs	r2, #2
 8002e5c:	613a      	str	r2, [r7, #16]
 8002e5e:	693a      	ldr	r2, [r7, #16]
 8002e60:	fa92 f2a2 	rbit	r2, r2
 8002e64:	60fa      	str	r2, [r7, #12]
  return(result);
 8002e66:	68fa      	ldr	r2, [r7, #12]
 8002e68:	fab2 f282 	clz	r2, r2
 8002e6c:	b252      	sxtb	r2, r2
 8002e6e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e72:	b252      	sxtb	r2, r2
 8002e74:	b2d2      	uxtb	r2, r2
 8002e76:	f002 021f 	and.w	r2, r2, #31
 8002e7a:	2101      	movs	r1, #1
 8002e7c:	fa01 f202 	lsl.w	r2, r1, r2
 8002e80:	4013      	ands	r3, r2
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d0bc      	beq.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x110>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002e86:	4b2a      	ldr	r3, [pc, #168]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e88:	6a1b      	ldr	r3, [r3, #32]
 8002e8a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	4927      	ldr	r1, [pc, #156]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e94:	4313      	orrs	r3, r2
 8002e96:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002e98:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d105      	bne.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ea0:	4b23      	ldr	r3, [pc, #140]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ea2:	69db      	ldr	r3, [r3, #28]
 8002ea4:	4a22      	ldr	r2, [pc, #136]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ea6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002eaa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0301 	and.w	r3, r3, #1
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d008      	beq.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x1da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002eb8:	4b1d      	ldr	r3, [pc, #116]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ebc:	f023 0203 	bic.w	r2, r3, #3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	491a      	ldr	r1, [pc, #104]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0320 	and.w	r3, r3, #32
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d008      	beq.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ed6:	4b16      	ldr	r3, [pc, #88]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eda:	f023 0210 	bic.w	r2, r3, #16
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	4913      	ldr	r1, [pc, #76]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d008      	beq.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002ef4:	4b0e      	ldr	r3, [pc, #56]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef8:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	691b      	ldr	r3, [r3, #16]
 8002f00:	490b      	ldr	r1, [pc, #44]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f02:	4313      	orrs	r3, r2
 8002f04:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d008      	beq.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002f12:	4b07      	ldr	r3, [pc, #28]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f16:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	695b      	ldr	r3, [r3, #20]
 8002f1e:	4904      	ldr	r1, [pc, #16]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f20:	4313      	orrs	r3, r2
 8002f22:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002f24:	2300      	movs	r3, #0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3748      	adds	r7, #72	; 0x48
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	40021000 	.word	0x40021000
 8002f34:	40007000 	.word	0x40007000
 8002f38:	10908100 	.word	0x10908100

08002f3c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b084      	sub	sp, #16
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d101      	bne.n	8002f4e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e07c      	b.n	8003048 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d106      	bne.n	8002f6e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2200      	movs	r2, #0
 8002f64:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	f001 fe7f 	bl	8004c6c <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2202      	movs	r2, #2
 8002f72:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f84:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	68db      	ldr	r3, [r3, #12]
 8002f8a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002f8e:	d902      	bls.n	8002f96 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002f90:	2300      	movs	r3, #0
 8002f92:	60fb      	str	r3, [r7, #12]
 8002f94:	e002      	b.n	8002f9c <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002f96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f9a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002fa4:	d007      	beq.n	8002fb6 <HAL_SPI_Init+0x7a>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	68db      	ldr	r3, [r3, #12]
 8002faa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002fae:	d002      	beq.n	8002fb6 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d10b      	bne.n	8002fd6 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	68db      	ldr	r3, [r3, #12]
 8002fc2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002fc6:	d903      	bls.n	8002fd0 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2202      	movs	r2, #2
 8002fcc:	631a      	str	r2, [r3, #48]	; 0x30
 8002fce:	e002      	b.n	8002fd6 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685a      	ldr	r2, [r3, #4]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	431a      	orrs	r2, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	691b      	ldr	r3, [r3, #16]
 8002fe4:	431a      	orrs	r2, r3
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	695b      	ldr	r3, [r3, #20]
 8002fea:	431a      	orrs	r2, r3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	699b      	ldr	r3, [r3, #24]
 8002ff0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ff4:	431a      	orrs	r2, r3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	69db      	ldr	r3, [r3, #28]
 8002ffa:	431a      	orrs	r2, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6a1b      	ldr	r3, [r3, #32]
 8003000:	ea42 0103 	orr.w	r1, r2, r3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	430a      	orrs	r2, r1
 800300e:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo Threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	699b      	ldr	r3, [r3, #24]
 8003014:	0c1b      	lsrs	r3, r3, #16
 8003016:	f003 0204 	and.w	r2, r3, #4
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301e:	431a      	orrs	r2, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003024:	431a      	orrs	r2, r3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	68db      	ldr	r3, [r3, #12]
 800302a:	ea42 0103 	orr.w	r1, r2, r3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	68fa      	ldr	r2, [r7, #12]
 8003034:	430a      	orrs	r2, r1
 8003036:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2200      	movs	r2, #0
 800303c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2201      	movs	r2, #1
 8003042:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003046:	2300      	movs	r3, #0
}
 8003048:	4618      	mov	r0, r3
 800304a:	3710      	adds	r7, #16
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}

08003050 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b08a      	sub	sp, #40	; 0x28
 8003054:	af00      	add	r7, sp, #0
 8003056:	60f8      	str	r0, [r7, #12]
 8003058:	60b9      	str	r1, [r7, #8]
 800305a:	607a      	str	r2, [r7, #4]
 800305c:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0U, tmp1 = 0U;
 800305e:	2300      	movs	r3, #0
 8003060:	61fb      	str	r3, [r7, #28]
 8003062:	2300      	movs	r3, #0
 8003064:	61bb      	str	r3, [r7, #24]
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
 8003066:	2300      	movs	r3, #0
 8003068:	617b      	str	r3, [r7, #20]
  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t txallowed = 1U;
 800306a:	2301      	movs	r3, #1
 800306c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef errorcode = HAL_OK;
 800306e:	2300      	movs	r3, #0
 8003070:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800307a:	2b01      	cmp	r3, #1
 800307c:	d101      	bne.n	8003082 <HAL_SPI_TransmitReceive+0x32>
 800307e:	2302      	movs	r3, #2
 8003080:	e1e2      	b.n	8003448 <HAL_SPI_TransmitReceive+0x3f8>
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2201      	movs	r2, #1
 8003086:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800308a:	f7fd fe37 	bl	8000cfc <HAL_GetTick>
 800308e:	6178      	str	r0, [r7, #20]

  tmp  = hspi->State;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003096:	b2db      	uxtb	r3, r3
 8003098:	61fb      	str	r3, [r7, #28]
  tmp1 = hspi->Init.Mode;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	61bb      	str	r3, [r7, #24]

  if (!((tmp == HAL_SPI_STATE_READY) || \
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d00e      	beq.n	80030c4 <HAL_SPI_TransmitReceive+0x74>
 80030a6:	69bb      	ldr	r3, [r7, #24]
 80030a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030ac:	d106      	bne.n	80030bc <HAL_SPI_TransmitReceive+0x6c>
        ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d102      	bne.n	80030bc <HAL_SPI_TransmitReceive+0x6c>
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	2b04      	cmp	r3, #4
 80030ba:	d003      	beq.n	80030c4 <HAL_SPI_TransmitReceive+0x74>
  {
    errorcode = HAL_BUSY;
 80030bc:	2302      	movs	r3, #2
 80030be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80030c2:	e1b7      	b.n	8003434 <HAL_SPI_TransmitReceive+0x3e4>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d005      	beq.n	80030d6 <HAL_SPI_TransmitReceive+0x86>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d002      	beq.n	80030d6 <HAL_SPI_TransmitReceive+0x86>
 80030d0:	887b      	ldrh	r3, [r7, #2]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d103      	bne.n	80030de <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80030dc:	e1aa      	b.n	8003434 <HAL_SPI_TransmitReceive+0x3e4>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	2b04      	cmp	r3, #4
 80030e8:	d003      	beq.n	80030f2 <HAL_SPI_TransmitReceive+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2205      	movs	r2, #5
 80030ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2200      	movs	r2, #0
 80030f6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	887a      	ldrh	r2, [r7, #2]
 8003102:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	887a      	ldrh	r2, [r7, #2]
 800310a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	68ba      	ldr	r2, [r7, #8]
 8003112:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	887a      	ldrh	r2, [r7, #2]
 8003118:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	887a      	ldrh	r2, [r7, #2]
 800311e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2200      	movs	r2, #0
 8003124:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2200      	movs	r2, #0
 800312a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1U))
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003134:	d805      	bhi.n	8003142 <HAL_SPI_TransmitReceive+0xf2>
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800313c:	b29b      	uxth	r3, r3
 800313e:	2b01      	cmp	r3, #1
 8003140:	d908      	bls.n	8003154 <HAL_SPI_TransmitReceive+0x104>
  {
    /* set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	685a      	ldr	r2, [r3, #4]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003150:	605a      	str	r2, [r3, #4]
 8003152:	e007      	b.n	8003164 <HAL_SPI_TransmitReceive+0x114>
  }
  else
  {
    /* set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	685a      	ldr	r2, [r3, #4]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003162:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800316e:	2b40      	cmp	r3, #64	; 0x40
 8003170:	d007      	beq.n	8003182 <HAL_SPI_TransmitReceive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003180:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800318a:	d975      	bls.n	8003278 <HAL_SPI_TransmitReceive+0x228>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d004      	beq.n	800319e <HAL_SPI_TransmitReceive+0x14e>
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003198:	b29b      	uxth	r3, r3
 800319a:	2b01      	cmp	r3, #1
 800319c:	d160      	bne.n	8003260 <HAL_SPI_TransmitReceive+0x210>
    {
      hspi->Instance->DR = *((uint16_t *)pTxData);
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	881a      	ldrh	r2, [r3, #0]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	60da      	str	r2, [r3, #12]
      pTxData += sizeof(uint16_t);
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	3302      	adds	r3, #2
 80031ac:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	3b01      	subs	r3, #1
 80031b6:	b29a      	uxth	r2, r3
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031bc:	e050      	b.n	8003260 <HAL_SPI_TransmitReceive+0x210>
    {
      /* Check TXE flag */
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 80031be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d01c      	beq.n	80031fe <HAL_SPI_TransmitReceive+0x1ae>
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031c8:	b29b      	uxth	r3, r3
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d017      	beq.n	80031fe <HAL_SPI_TransmitReceive+0x1ae>
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	f003 0302 	and.w	r3, r3, #2
 80031d8:	2b02      	cmp	r3, #2
 80031da:	d110      	bne.n	80031fe <HAL_SPI_TransmitReceive+0x1ae>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	881a      	ldrh	r2, [r3, #0]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	3302      	adds	r3, #2
 80031ea:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031f0:	b29b      	uxth	r3, r3
 80031f2:	3b01      	subs	r3, #1
 80031f4:	b29a      	uxth	r2, r3
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80031fa:	2300      	movs	r3, #0
 80031fc:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003204:	b29b      	uxth	r3, r3
 8003206:	2b00      	cmp	r3, #0
 8003208:	d01a      	beq.n	8003240 <HAL_SPI_TransmitReceive+0x1f0>
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	f003 0301 	and.w	r3, r3, #1
 8003214:	2b01      	cmp	r3, #1
 8003216:	d113      	bne.n	8003240 <HAL_SPI_TransmitReceive+0x1f0>
      {
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	b29a      	uxth	r2, r3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	801a      	strh	r2, [r3, #0]
        pRxData += sizeof(uint16_t);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	3302      	adds	r3, #2
 8003228:	607b      	str	r3, [r7, #4]
        hspi->RxXferCount--;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003230:	b29b      	uxth	r3, r3
 8003232:	3b01      	subs	r3, #1
 8003234:	b29a      	uxth	r2, r3
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800323c:	2301      	movs	r3, #1
 800323e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 8003240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003242:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003246:	d00b      	beq.n	8003260 <HAL_SPI_TransmitReceive+0x210>
 8003248:	f7fd fd58 	bl	8000cfc <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003254:	429a      	cmp	r2, r3
 8003256:	d803      	bhi.n	8003260 <HAL_SPI_TransmitReceive+0x210>
      {
        errorcode = HAL_TIMEOUT;
 8003258:	2303      	movs	r3, #3
 800325a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800325e:	e0e9      	b.n	8003434 <HAL_SPI_TransmitReceive+0x3e4>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003264:	b29b      	uxth	r3, r3
 8003266:	2b00      	cmp	r3, #0
 8003268:	d1a9      	bne.n	80031be <HAL_SPI_TransmitReceive+0x16e>
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003270:	b29b      	uxth	r3, r3
 8003272:	2b00      	cmp	r3, #0
 8003274:	d1a3      	bne.n	80031be <HAL_SPI_TransmitReceive+0x16e>
 8003276:	e0c9      	b.n	800340c <HAL_SPI_TransmitReceive+0x3bc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d005      	beq.n	800328c <HAL_SPI_TransmitReceive+0x23c>
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003284:	b29b      	uxth	r3, r3
 8003286:	2b01      	cmp	r3, #1
 8003288:	f040 80b3 	bne.w	80033f2 <HAL_SPI_TransmitReceive+0x3a2>
    {
      if (hspi->TxXferCount > 1U)
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003290:	b29b      	uxth	r3, r3
 8003292:	2b01      	cmp	r3, #1
 8003294:	d90f      	bls.n	80032b6 <HAL_SPI_TransmitReceive+0x266>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	881a      	ldrh	r2, [r3, #0]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	3302      	adds	r3, #2
 80032a4:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount -= 2U;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	3b02      	subs	r3, #2
 80032ae:	b29a      	uxth	r2, r3
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80032b4:	e09d      	b.n	80033f2 <HAL_SPI_TransmitReceive+0x3a2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	1c5a      	adds	r2, r3, #1
 80032ba:	60ba      	str	r2, [r7, #8]
 80032bc:	68fa      	ldr	r2, [r7, #12]
 80032be:	6812      	ldr	r2, [r2, #0]
 80032c0:	320c      	adds	r2, #12
 80032c2:	781b      	ldrb	r3, [r3, #0]
 80032c4:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	3b01      	subs	r3, #1
 80032ce:	b29a      	uxth	r2, r3
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032d4:	e08d      	b.n	80033f2 <HAL_SPI_TransmitReceive+0x3a2>
    {
      /* check TXE flag */
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 80032d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d031      	beq.n	8003340 <HAL_SPI_TransmitReceive+0x2f0>
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032e0:	b29b      	uxth	r3, r3
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d02c      	beq.n	8003340 <HAL_SPI_TransmitReceive+0x2f0>
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	f003 0302 	and.w	r3, r3, #2
 80032f0:	2b02      	cmp	r3, #2
 80032f2:	d125      	bne.n	8003340 <HAL_SPI_TransmitReceive+0x2f0>
      {
        if (hspi->TxXferCount > 1U)
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d90f      	bls.n	800331e <HAL_SPI_TransmitReceive+0x2ce>
        {
          hspi->Instance->DR = *((uint16_t *)pTxData);
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	881a      	ldrh	r2, [r3, #0]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	60da      	str	r2, [r3, #12]
          pTxData += sizeof(uint16_t);
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	3302      	adds	r3, #2
 800330c:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount -= 2U;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003312:	b29b      	uxth	r3, r3
 8003314:	3b02      	subs	r3, #2
 8003316:	b29a      	uxth	r2, r3
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800331c:	e00e      	b.n	800333c <HAL_SPI_TransmitReceive+0x2ec>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	1c5a      	adds	r2, r3, #1
 8003322:	60ba      	str	r2, [r7, #8]
 8003324:	68fa      	ldr	r2, [r7, #12]
 8003326:	6812      	ldr	r2, [r2, #0]
 8003328:	320c      	adds	r2, #12
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	7013      	strb	r3, [r2, #0]
          hspi->TxXferCount--;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003332:	b29b      	uxth	r3, r3
 8003334:	3b01      	subs	r3, #1
 8003336:	b29a      	uxth	r2, r3
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800333c:	2300      	movs	r3, #0
 800333e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003346:	b29b      	uxth	r3, r3
 8003348:	2b00      	cmp	r3, #0
 800334a:	d042      	beq.n	80033d2 <HAL_SPI_TransmitReceive+0x382>
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	f003 0301 	and.w	r3, r3, #1
 8003356:	2b01      	cmp	r3, #1
 8003358:	d13b      	bne.n	80033d2 <HAL_SPI_TransmitReceive+0x382>
      {
        if (hspi->RxXferCount > 1U)
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003360:	b29b      	uxth	r3, r3
 8003362:	2b01      	cmp	r3, #1
 8003364:	d920      	bls.n	80033a8 <HAL_SPI_TransmitReceive+0x358>
        {
          *((uint16_t *)pRxData) = hspi->Instance->DR;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	b29a      	uxth	r2, r3
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	801a      	strh	r2, [r3, #0]
          pRxData += sizeof(uint16_t);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	3302      	adds	r3, #2
 8003376:	607b      	str	r3, [r7, #4]
          hspi->RxXferCount -= 2U;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800337e:	b29b      	uxth	r3, r3
 8003380:	3b02      	subs	r3, #2
 8003382:	b29a      	uxth	r2, r3
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003390:	b29b      	uxth	r3, r3
 8003392:	2b01      	cmp	r3, #1
 8003394:	d81b      	bhi.n	80033ce <HAL_SPI_TransmitReceive+0x37e>
          {
            /* set fiforxthresold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	685a      	ldr	r2, [r3, #4]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80033a4:	605a      	str	r2, [r3, #4]
 80033a6:	e012      	b.n	80033ce <HAL_SPI_TransmitReceive+0x37e>
          }
        }
        else
        {
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f103 020c 	add.w	r2, r3, #12
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	1c59      	adds	r1, r3, #1
 80033b4:	6079      	str	r1, [r7, #4]
 80033b6:	7812      	ldrb	r2, [r2, #0]
 80033b8:	b2d2      	uxtb	r2, r2
 80033ba:	701a      	strb	r2, [r3, #0]
          hspi->RxXferCount--;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	3b01      	subs	r3, #1
 80033c6:	b29a      	uxth	r2, r3
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80033ce:	2301      	movs	r3, #1
 80033d0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 80033d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033d8:	d00b      	beq.n	80033f2 <HAL_SPI_TransmitReceive+0x3a2>
 80033da:	f7fd fc8f 	bl	8000cfc <HAL_GetTick>
 80033de:	4602      	mov	r2, r0
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	1ad3      	subs	r3, r2, r3
 80033e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d803      	bhi.n	80033f2 <HAL_SPI_TransmitReceive+0x3a2>
      {
        errorcode = HAL_TIMEOUT;
 80033ea:	2303      	movs	r3, #3
 80033ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80033f0:	e020      	b.n	8003434 <HAL_SPI_TransmitReceive+0x3e4>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	f47f af6c 	bne.w	80032d6 <HAL_SPI_TransmitReceive+0x286>
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003404:	b29b      	uxth	r3, r3
 8003406:	2b00      	cmp	r3, #0
 8003408:	f47f af65 	bne.w	80032d6 <HAL_SPI_TransmitReceive+0x286>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800340c:	697a      	ldr	r2, [r7, #20]
 800340e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003410:	68f8      	ldr	r0, [r7, #12]
 8003412:	f000 f8f5 	bl	8003600 <SPI_EndRxTxTransaction>
 8003416:	4603      	mov	r3, r0
 8003418:	2b00      	cmp	r3, #0
 800341a:	d002      	beq.n	8003422 <HAL_SPI_TransmitReceive+0x3d2>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2220      	movs	r2, #32
 8003420:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003426:	2b00      	cmp	r3, #0
 8003428:	d003      	beq.n	8003432 <HAL_SPI_TransmitReceive+0x3e2>
  {
    errorcode = HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003430:	e000      	b.n	8003434 <HAL_SPI_TransmitReceive+0x3e4>
  }

error :
 8003432:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2201      	movs	r2, #1
 8003438:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2200      	movs	r2, #0
 8003440:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003444:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003448:	4618      	mov	r0, r3
 800344a:	3728      	adds	r7, #40	; 0x28
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}

08003450 <SPI_WaitFlagStateUntilTimeout>:
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b084      	sub	sp, #16
 8003454:	af00      	add	r7, sp, #0
 8003456:	60f8      	str	r0, [r7, #12]
 8003458:	60b9      	str	r1, [r7, #8]
 800345a:	607a      	str	r2, [r7, #4]
 800345c:	603b      	str	r3, [r7, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800345e:	e04c      	b.n	80034fa <SPI_WaitFlagStateUntilTimeout+0xaa>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003466:	d048      	beq.n	80034fa <SPI_WaitFlagStateUntilTimeout+0xaa>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d007      	beq.n	800347e <SPI_WaitFlagStateUntilTimeout+0x2e>
 800346e:	f7fd fc45 	bl	8000cfc <HAL_GetTick>
 8003472:	4602      	mov	r2, r0
 8003474:	69bb      	ldr	r3, [r7, #24]
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	683a      	ldr	r2, [r7, #0]
 800347a:	429a      	cmp	r2, r3
 800347c:	d83d      	bhi.n	80034fa <SPI_WaitFlagStateUntilTimeout+0xaa>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	685a      	ldr	r2, [r3, #4]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800348c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003496:	d111      	bne.n	80034bc <SPI_WaitFlagStateUntilTimeout+0x6c>
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034a0:	d004      	beq.n	80034ac <SPI_WaitFlagStateUntilTimeout+0x5c>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034aa:	d107      	bne.n	80034bc <SPI_WaitFlagStateUntilTimeout+0x6c>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034ba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034c4:	d10f      	bne.n	80034e6 <SPI_WaitFlagStateUntilTimeout+0x96>
        {
          SPI_RESET_CRC(hspi);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034d4:	601a      	str	r2, [r3, #0]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80034e4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2201      	movs	r2, #1
 80034ea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2200      	movs	r2, #0
 80034f2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	e00e      	b.n	8003518 <SPI_WaitFlagStateUntilTimeout+0xc8>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	689a      	ldr	r2, [r3, #8]
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	4013      	ands	r3, r2
 8003504:	68ba      	ldr	r2, [r7, #8]
 8003506:	429a      	cmp	r2, r3
 8003508:	d101      	bne.n	800350e <SPI_WaitFlagStateUntilTimeout+0xbe>
 800350a:	2201      	movs	r2, #1
 800350c:	e000      	b.n	8003510 <SPI_WaitFlagStateUntilTimeout+0xc0>
 800350e:	2200      	movs	r2, #0
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	429a      	cmp	r2, r3
 8003514:	d1a4      	bne.n	8003460 <SPI_WaitFlagStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8003516:	2300      	movs	r3, #0
}
 8003518:	4618      	mov	r0, r3
 800351a:	3710      	adds	r7, #16
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}

08003520 <SPI_WaitFifoStateUntilTimeout>:
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b086      	sub	sp, #24
 8003524:	af00      	add	r7, sp, #0
 8003526:	60f8      	str	r0, [r7, #12]
 8003528:	60b9      	str	r1, [r7, #8]
 800352a:	607a      	str	r2, [r7, #4]
 800352c:	603b      	str	r3, [r7, #0]
  __IO uint8_t tmpreg;

  while ((hspi->Instance->SR & Fifo) != State)
 800352e:	e05a      	b.n	80035e6 <SPI_WaitFifoStateUntilTimeout+0xc6>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003536:	d109      	bne.n	800354c <SPI_WaitFifoStateUntilTimeout+0x2c>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d106      	bne.n	800354c <SPI_WaitFifoStateUntilTimeout+0x2c>
    {
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	330c      	adds	r3, #12
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	b2db      	uxtb	r3, r3
 8003548:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 800354a:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003552:	d048      	beq.n	80035e6 <SPI_WaitFifoStateUntilTimeout+0xc6>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d007      	beq.n	800356a <SPI_WaitFifoStateUntilTimeout+0x4a>
 800355a:	f7fd fbcf 	bl	8000cfc <HAL_GetTick>
 800355e:	4602      	mov	r2, r0
 8003560:	6a3b      	ldr	r3, [r7, #32]
 8003562:	1ad3      	subs	r3, r2, r3
 8003564:	683a      	ldr	r2, [r7, #0]
 8003566:	429a      	cmp	r2, r3
 8003568:	d83d      	bhi.n	80035e6 <SPI_WaitFifoStateUntilTimeout+0xc6>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	685a      	ldr	r2, [r3, #4]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003578:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003582:	d111      	bne.n	80035a8 <SPI_WaitFifoStateUntilTimeout+0x88>
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800358c:	d004      	beq.n	8003598 <SPI_WaitFifoStateUntilTimeout+0x78>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003596:	d107      	bne.n	80035a8 <SPI_WaitFifoStateUntilTimeout+0x88>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035a6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035b0:	d10f      	bne.n	80035d2 <SPI_WaitFifoStateUntilTimeout+0xb2>
        {
          SPI_RESET_CRC(hspi);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035c0:	601a      	str	r2, [r3, #0]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80035d0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2201      	movs	r2, #1
 80035d6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2200      	movs	r2, #0
 80035de:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	e008      	b.n	80035f8 <SPI_WaitFifoStateUntilTimeout+0xd8>
  while ((hspi->Instance->SR & Fifo) != State)
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	689a      	ldr	r2, [r3, #8]
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	4013      	ands	r3, r2
 80035f0:	687a      	ldr	r2, [r7, #4]
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d19c      	bne.n	8003530 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80035f6:	2300      	movs	r3, #0
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3718      	adds	r7, #24
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}

08003600 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b086      	sub	sp, #24
 8003604:	af02      	add	r7, sp, #8
 8003606:	60f8      	str	r0, [r7, #12]
 8003608:	60b9      	str	r1, [r7, #8]
 800360a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	9300      	str	r3, [sp, #0]
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	2200      	movs	r2, #0
 8003614:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003618:	68f8      	ldr	r0, [r7, #12]
 800361a:	f7ff ff81 	bl	8003520 <SPI_WaitFifoStateUntilTimeout>
 800361e:	4603      	mov	r3, r0
 8003620:	2b00      	cmp	r3, #0
 8003622:	d007      	beq.n	8003634 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003628:	f043 0220 	orr.w	r2, r3, #32
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003630:	2303      	movs	r3, #3
 8003632:	e027      	b.n	8003684 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	9300      	str	r3, [sp, #0]
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	2200      	movs	r2, #0
 800363c:	2180      	movs	r1, #128	; 0x80
 800363e:	68f8      	ldr	r0, [r7, #12]
 8003640:	f7ff ff06 	bl	8003450 <SPI_WaitFlagStateUntilTimeout>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d007      	beq.n	800365a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800364e:	f043 0220 	orr.w	r2, r3, #32
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e014      	b.n	8003684 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	9300      	str	r3, [sp, #0]
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	2200      	movs	r2, #0
 8003662:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003666:	68f8      	ldr	r0, [r7, #12]
 8003668:	f7ff ff5a 	bl	8003520 <SPI_WaitFifoStateUntilTimeout>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d007      	beq.n	8003682 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003676:	f043 0220 	orr.w	r2, r3, #32
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e000      	b.n	8003684 <SPI_EndRxTxTransaction+0x84>
  }
  return HAL_OK;
 8003682:	2300      	movs	r3, #0
}
 8003684:	4618      	mov	r0, r3
 8003686:	3710      	adds	r7, #16
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}

0800368c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 800368c:	b580      	push	{r7, lr}
 800368e:	b082      	sub	sp, #8
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d101      	bne.n	800369e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e01d      	b.n	80036da <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d106      	bne.n	80036b8 <HAL_TIM_Base_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f001 fc92 	bl	8004fdc <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2202      	movs	r2, #2
 80036bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	3304      	adds	r3, #4
 80036c8:	4619      	mov	r1, r3
 80036ca:	4610      	mov	r0, r2
 80036cc:	f000 f96c 	bl	80039a8 <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2201      	movs	r2, #1
 80036d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  return HAL_OK;
 80036d8:	2300      	movs	r3, #0
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3708      	adds	r7, #8
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}

080036e2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80036e2:	b480      	push	{r7}
 80036e4:	b083      	sub	sp, #12
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	68da      	ldr	r2, [r3, #12]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f042 0201 	orr.w	r2, r2, #1
 80036f8:	60da      	str	r2, [r3, #12]
      
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f042 0201 	orr.w	r2, r2, #1
 8003708:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
 800370a:	2300      	movs	r3, #0
}
 800370c:	4618      	mov	r0, r3
 800370e:	370c      	adds	r7, #12
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr

08003718 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	691b      	ldr	r3, [r3, #16]
 8003726:	f003 0302 	and.w	r3, r3, #2
 800372a:	2b02      	cmp	r3, #2
 800372c:	d122      	bne.n	8003774 <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	f003 0302 	and.w	r3, r3, #2
 8003738:	2b02      	cmp	r3, #2
 800373a:	d11b      	bne.n	8003774 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f06f 0202 	mvn.w	r2, #2
 8003744:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2201      	movs	r2, #1
 800374a:	771a      	strb	r2, [r3, #28]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	699b      	ldr	r3, [r3, #24]
 8003752:	f003 0303 	and.w	r3, r3, #3
 8003756:	2b00      	cmp	r3, #0
 8003758:	d003      	beq.n	8003762 <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f000 f905 	bl	800396a <HAL_TIM_IC_CaptureCallback>
 8003760:	e005      	b.n	800376e <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f000 f8f7 	bl	8003956 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f000 f908 	bl	800397e <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	691b      	ldr	r3, [r3, #16]
 800377a:	f003 0304 	and.w	r3, r3, #4
 800377e:	2b04      	cmp	r3, #4
 8003780:	d122      	bne.n	80037c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	f003 0304 	and.w	r3, r3, #4
 800378c:	2b04      	cmp	r3, #4
 800378e:	d11b      	bne.n	80037c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f06f 0204 	mvn.w	r2, #4
 8003798:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2202      	movs	r2, #2
 800379e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	699b      	ldr	r3, [r3, #24]
 80037a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d003      	beq.n	80037b6 <HAL_TIM_IRQHandler+0x9e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f000 f8db 	bl	800396a <HAL_TIM_IC_CaptureCallback>
 80037b4:	e005      	b.n	80037c2 <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f000 f8cd 	bl	8003956 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f000 f8de 	bl	800397e <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	771a      	strb	r2, [r3, #28]
    } 
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	691b      	ldr	r3, [r3, #16]
 80037ce:	f003 0308 	and.w	r3, r3, #8
 80037d2:	2b08      	cmp	r3, #8
 80037d4:	d122      	bne.n	800381c <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	f003 0308 	and.w	r3, r3, #8
 80037e0:	2b08      	cmp	r3, #8
 80037e2:	d11b      	bne.n	800381c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f06f 0208 	mvn.w	r2, #8
 80037ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2204      	movs	r2, #4
 80037f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	69db      	ldr	r3, [r3, #28]
 80037fa:	f003 0303 	and.w	r3, r3, #3
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d003      	beq.n	800380a <HAL_TIM_IRQHandler+0xf2>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f000 f8b1 	bl	800396a <HAL_TIM_IC_CaptureCallback>
 8003808:	e005      	b.n	8003816 <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f000 f8a3 	bl	8003956 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f000 f8b4 	bl	800397e <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	691b      	ldr	r3, [r3, #16]
 8003822:	f003 0310 	and.w	r3, r3, #16
 8003826:	2b10      	cmp	r3, #16
 8003828:	d122      	bne.n	8003870 <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	f003 0310 	and.w	r3, r3, #16
 8003834:	2b10      	cmp	r3, #16
 8003836:	d11b      	bne.n	8003870 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f06f 0210 	mvn.w	r2, #16
 8003840:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2208      	movs	r2, #8
 8003846:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	69db      	ldr	r3, [r3, #28]
 800384e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003852:	2b00      	cmp	r3, #0
 8003854:	d003      	beq.n	800385e <HAL_TIM_IRQHandler+0x146>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f000 f887 	bl	800396a <HAL_TIM_IC_CaptureCallback>
 800385c:	e005      	b.n	800386a <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f000 f879 	bl	8003956 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f000 f88a 	bl	800397e <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2200      	movs	r2, #0
 800386e:	771a      	strb	r2, [r3, #28]
    } 
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	691b      	ldr	r3, [r3, #16]
 8003876:	f003 0301 	and.w	r3, r3, #1
 800387a:	2b01      	cmp	r3, #1
 800387c:	d10e      	bne.n	800389c <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	f003 0301 	and.w	r3, r3, #1
 8003888:	2b01      	cmp	r3, #1
 800388a:	d107      	bne.n	800389c <HAL_TIM_IRQHandler+0x184>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f06f 0201 	mvn.w	r2, #1
 8003894:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f001 f88a 	bl	80049b0 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	691b      	ldr	r3, [r3, #16]
 80038a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038a6:	2b80      	cmp	r3, #128	; 0x80
 80038a8:	d10e      	bne.n	80038c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	68db      	ldr	r3, [r3, #12]
 80038b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038b4:	2b80      	cmp	r3, #128	; 0x80
 80038b6:	d107      	bne.n	80038c8 <HAL_TIM_IRQHandler+0x1b0>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80038c0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f000 f942 	bl	8003b4c <HAL_TIMEx_BreakCallback>
    }
  }

#if defined(TIM_FLAG_BREAK2)
  /* TIM Break input 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	691b      	ldr	r3, [r3, #16]
 80038ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038d6:	d10e      	bne.n	80038f6 <HAL_TIM_IRQHandler+0x1de>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	68db      	ldr	r3, [r3, #12]
 80038de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038e2:	2b80      	cmp	r3, #128	; 0x80
 80038e4:	d107      	bne.n	80038f6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80038ee:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f000 f935 	bl	8003b60 <HAL_TIMEx_Break2Callback>
    }
  }
#endif

  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	691b      	ldr	r3, [r3, #16]
 80038fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003900:	2b40      	cmp	r3, #64	; 0x40
 8003902:	d10e      	bne.n	8003922 <HAL_TIM_IRQHandler+0x20a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	68db      	ldr	r3, [r3, #12]
 800390a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800390e:	2b40      	cmp	r3, #64	; 0x40
 8003910:	d107      	bne.n	8003922 <HAL_TIM_IRQHandler+0x20a>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800391a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f000 f838 	bl	8003992 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	691b      	ldr	r3, [r3, #16]
 8003928:	f003 0320 	and.w	r3, r3, #32
 800392c:	2b20      	cmp	r3, #32
 800392e:	d10e      	bne.n	800394e <HAL_TIM_IRQHandler+0x236>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	f003 0320 	and.w	r3, r3, #32
 800393a:	2b20      	cmp	r3, #32
 800393c:	d107      	bne.n	800394e <HAL_TIM_IRQHandler+0x236>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f06f 0220 	mvn.w	r2, #32
 8003946:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f000 f8f5 	bl	8003b38 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 800394e:	bf00      	nop
 8003950:	3708      	adds	r7, #8
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}

08003956 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003956:	b480      	push	{r7}
 8003958:	b083      	sub	sp, #12
 800395a:	af00      	add	r7, sp, #0
 800395c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800395e:	bf00      	nop
 8003960:	370c      	adds	r7, #12
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr

0800396a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800396a:	b480      	push	{r7}
 800396c:	b083      	sub	sp, #12
 800396e:	af00      	add	r7, sp, #0
 8003970:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003972:	bf00      	nop
 8003974:	370c      	adds	r7, #12
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr

0800397e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800397e:	b480      	push	{r7}
 8003980:	b083      	sub	sp, #12
 8003982:	af00      	add	r7, sp, #0
 8003984:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003986:	bf00      	nop
 8003988:	370c      	adds	r7, #12
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr

08003992 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003992:	b480      	push	{r7}
 8003994:	b083      	sub	sp, #12
 8003996:	af00      	add	r7, sp, #0
 8003998:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800399a:	bf00      	nop
 800399c:	370c      	adds	r7, #12
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr
	...

080039a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM periheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b085      	sub	sp, #20
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 80039b2:	2300      	movs	r3, #0
 80039b4:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	4a32      	ldr	r2, [pc, #200]	; (8003a88 <TIM_Base_SetConfig+0xe0>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d007      	beq.n	80039d4 <TIM_Base_SetConfig+0x2c>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039ca:	d003      	beq.n	80039d4 <TIM_Base_SetConfig+0x2c>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	4a2f      	ldr	r2, [pc, #188]	; (8003a8c <TIM_Base_SetConfig+0xe4>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d108      	bne.n	80039e6 <TIM_Base_SetConfig+0x3e>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	68fa      	ldr	r2, [r7, #12]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4a27      	ldr	r2, [pc, #156]	; (8003a88 <TIM_Base_SetConfig+0xe0>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d013      	beq.n	8003a16 <TIM_Base_SetConfig+0x6e>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039f4:	d00f      	beq.n	8003a16 <TIM_Base_SetConfig+0x6e>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4a24      	ldr	r2, [pc, #144]	; (8003a8c <TIM_Base_SetConfig+0xe4>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d00b      	beq.n	8003a16 <TIM_Base_SetConfig+0x6e>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a23      	ldr	r2, [pc, #140]	; (8003a90 <TIM_Base_SetConfig+0xe8>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d007      	beq.n	8003a16 <TIM_Base_SetConfig+0x6e>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a22      	ldr	r2, [pc, #136]	; (8003a94 <TIM_Base_SetConfig+0xec>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d003      	beq.n	8003a16 <TIM_Base_SetConfig+0x6e>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4a21      	ldr	r2, [pc, #132]	; (8003a98 <TIM_Base_SetConfig+0xf0>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d108      	bne.n	8003a28 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	68db      	ldr	r3, [r3, #12]
 8003a22:	68fa      	ldr	r2, [r7, #12]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	695b      	ldr	r3, [r3, #20]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	68fa      	ldr	r2, [r7, #12]
 8003a3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	689a      	ldr	r2, [r3, #8]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	629a      	str	r2, [r3, #40]	; 0x28
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	4a0e      	ldr	r2, [pc, #56]	; (8003a88 <TIM_Base_SetConfig+0xe0>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d00b      	beq.n	8003a6c <TIM_Base_SetConfig+0xc4>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	4a0e      	ldr	r2, [pc, #56]	; (8003a90 <TIM_Base_SetConfig+0xe8>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d007      	beq.n	8003a6c <TIM_Base_SetConfig+0xc4>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	4a0d      	ldr	r2, [pc, #52]	; (8003a94 <TIM_Base_SetConfig+0xec>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d003      	beq.n	8003a6c <TIM_Base_SetConfig+0xc4>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	4a0c      	ldr	r2, [pc, #48]	; (8003a98 <TIM_Base_SetConfig+0xf0>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d103      	bne.n	8003a74 <TIM_Base_SetConfig+0xcc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	691a      	ldr	r2, [r3, #16]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	615a      	str	r2, [r3, #20]
}
 8003a7a:	bf00      	nop
 8003a7c:	3714      	adds	r7, #20
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr
 8003a86:	bf00      	nop
 8003a88:	40012c00 	.word	0x40012c00
 8003a8c:	40000400 	.word	0x40000400
 8003a90:	40014000 	.word	0x40014000
 8003a94:	40014400 	.word	0x40014400
 8003a98:	40014800 	.word	0x40014800

08003a9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, 
                                                      TIM_MasterConfigTypeDef * sMasterConfig)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b085      	sub	sp, #20
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d101      	bne.n	8003ab4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ab0:	2302      	movs	r3, #2
 8003ab2:	e038      	b.n	8003b26 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2U */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a18      	ldr	r2, [pc, #96]	; (8003b34 <HAL_TIMEx_MasterConfigSynchronization+0x98>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d108      	bne.n	8003ae8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
    
    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003adc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	68fa      	ldr	r2, [r7, #12]
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	60fb      	str	r3, [r7, #12]
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	68fa      	ldr	r2, [r7, #12]
 8003af6:	4313      	orrs	r3, r2
 8003af8:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b00:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	68ba      	ldr	r2, [r7, #8]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	60bb      	str	r3, [r7, #8]
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	68fa      	ldr	r2, [r7, #12]
 8003b12:	605a      	str	r2, [r3, #4]
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	68ba      	ldr	r2, [r7, #8]
 8003b1a:	609a      	str	r2, [r3, #8]

  __HAL_UNLOCK(htim);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  return HAL_OK;
 8003b24:	2300      	movs	r3, #0
} 
 8003b26:	4618      	mov	r0, r3
 8003b28:	3714      	adds	r7, #20
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr
 8003b32:	bf00      	nop
 8003b34:	40012c00 	.word	0x40012c00

08003b38 <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b083      	sub	sp, #12
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8003b40:	bf00      	nop
 8003b42:	370c      	adds	r7, #12
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr

08003b4c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b083      	sub	sp, #12
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b54:	bf00      	nop
 8003b56:	370c      	adds	r7, #12
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr

08003b60 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b083      	sub	sp, #12
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003b68:	bf00      	nop
 8003b6a:	370c      	adds	r7, #12
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr

08003b74 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d101      	bne.n	8003b86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e043      	b.n	8003c0e <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d106      	bne.n	8003ba0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f001 fa74 	bl	8005088 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2224      	movs	r2, #36	; 0x24
 8003ba4:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f022 0201 	bic.w	r2, r2, #1
 8003bb6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f000 f8b9 	bl	8003d30 <UART_SetConfig>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d101      	bne.n	8003bc8 <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e022      	b.n	8003c0e <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d002      	beq.n	8003bd6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f000 fa13 	bl	8003ffc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	685a      	ldr	r2, [r3, #4]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003be4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	689a      	ldr	r2, [r3, #8]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003bf4:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f042 0201 	orr.w	r2, r2, #1
 8003c04:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f000 fa9a 	bl	8004140 <UART_CheckIdleState>
 8003c0c:	4603      	mov	r3, r0
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3708      	adds	r7, #8
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}

08003c16 <HAL_UART_Transmit>:
  * @param Size Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c16:	b580      	push	{r7, lr}
 8003c18:	b088      	sub	sp, #32
 8003c1a:	af02      	add	r7, sp, #8
 8003c1c:	60f8      	str	r0, [r7, #12]
 8003c1e:	60b9      	str	r1, [r7, #8]
 8003c20:	603b      	str	r3, [r7, #0]
 8003c22:	4613      	mov	r3, r2
 8003c24:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8003c26:	2300      	movs	r3, #0
 8003c28:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	2b20      	cmp	r3, #32
 8003c34:	d177      	bne.n	8003d26 <HAL_UART_Transmit+0x110>
  {
    if((pData == NULL ) || (Size == 0U))
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d002      	beq.n	8003c42 <HAL_UART_Transmit+0x2c>
 8003c3c:	88fb      	ldrh	r3, [r7, #6]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d101      	bne.n	8003c46 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e070      	b.n	8003d28 <HAL_UART_Transmit+0x112>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d101      	bne.n	8003c54 <HAL_UART_Transmit+0x3e>
 8003c50:	2302      	movs	r3, #2
 8003c52:	e069      	b.n	8003d28 <HAL_UART_Transmit+0x112>
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2221      	movs	r2, #33	; 0x21
 8003c66:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003c6a:	f7fd f847 	bl	8000cfc <HAL_GetTick>
 8003c6e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	88fa      	ldrh	r2, [r7, #6]
 8003c74:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	88fa      	ldrh	r2, [r7, #6]
 8003c7c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 8003c80:	e034      	b.n	8003cec <HAL_UART_Transmit+0xd6>
    {
      huart->TxXferCount--;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	3b01      	subs	r3, #1
 8003c8c:	b29a      	uxth	r2, r3
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	9300      	str	r3, [sp, #0]
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	2180      	movs	r1, #128	; 0x80
 8003c9e:	68f8      	ldr	r0, [r7, #12]
 8003ca0:	f000 fa97 	bl	80041d2 <UART_WaitOnFlagUntilTimeout>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d001      	beq.n	8003cae <HAL_UART_Transmit+0x98>
      {
        return HAL_TIMEOUT;
 8003caa:	2303      	movs	r3, #3
 8003cac:	e03c      	b.n	8003d28 <HAL_UART_Transmit+0x112>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cb6:	d111      	bne.n	8003cdc <HAL_UART_Transmit+0xc6>
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	691b      	ldr	r3, [r3, #16]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d10d      	bne.n	8003cdc <HAL_UART_Transmit+0xc6>
      {
        tmp = (uint16_t*) pData;
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	613b      	str	r3, [r7, #16]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	881a      	ldrh	r2, [r3, #0]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cd0:	b292      	uxth	r2, r2
 8003cd2:	851a      	strh	r2, [r3, #40]	; 0x28
        pData += 2U;
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	3302      	adds	r3, #2
 8003cd8:	60bb      	str	r3, [r7, #8]
 8003cda:	e007      	b.n	8003cec <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	1c5a      	adds	r2, r3, #1
 8003ce0:	60ba      	str	r2, [r7, #8]
 8003ce2:	781a      	ldrb	r2, [r3, #0]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	b292      	uxth	r2, r2
 8003cea:	851a      	strh	r2, [r3, #40]	; 0x28
    while(huart->TxXferCount > 0U)
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d1c4      	bne.n	8003c82 <HAL_UART_Transmit+0x6c>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	9300      	str	r3, [sp, #0]
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	2140      	movs	r1, #64	; 0x40
 8003d02:	68f8      	ldr	r0, [r7, #12]
 8003d04:	f000 fa65 	bl	80041d2 <UART_WaitOnFlagUntilTimeout>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d001      	beq.n	8003d12 <HAL_UART_Transmit+0xfc>
    {
      return HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e00a      	b.n	8003d28 <HAL_UART_Transmit+0x112>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2220      	movs	r2, #32
 8003d16:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    return HAL_OK;
 8003d22:	2300      	movs	r3, #0
 8003d24:	e000      	b.n	8003d28 <HAL_UART_Transmit+0x112>
  }
  else
  {
    return HAL_BUSY;
 8003d26:	2302      	movs	r3, #2
  }
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3718      	adds	r7, #24
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}

08003d30 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b086      	sub	sp, #24
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8003d3c:	2310      	movs	r3, #16
 8003d3e:	75fb      	strb	r3, [r7, #23]
  uint16_t brrtemp                    = 0x0000U;
 8003d40:	2300      	movs	r3, #0
 8003d42:	817b      	strh	r3, [r7, #10]
  uint16_t usartdiv                   = 0x0000U;
 8003d44:	2300      	movs	r3, #0
 8003d46:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	74fb      	strb	r3, [r7, #19]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	689a      	ldr	r2, [r3, #8]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	691b      	ldr	r3, [r3, #16]
 8003d54:	431a      	orrs	r2, r3
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	695b      	ldr	r3, [r3, #20]
 8003d5a:	431a      	orrs	r2, r3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	69db      	ldr	r3, [r3, #28]
 8003d60:	4313      	orrs	r3, r2
 8003d62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	4b9f      	ldr	r3, [pc, #636]	; (8003fe8 <UART_SetConfig+0x2b8>)
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	6812      	ldr	r2, [r2, #0]
 8003d72:	68f9      	ldr	r1, [r7, #12]
 8003d74:	430b      	orrs	r3, r1
 8003d76:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	68da      	ldr	r2, [r3, #12]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	430a      	orrs	r2, r1
 8003d8c:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	699a      	ldr	r2, [r3, #24]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6a1b      	ldr	r3, [r3, #32]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	68fa      	ldr	r2, [r7, #12]
 8003daa:	430a      	orrs	r2, r1
 8003dac:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a8e      	ldr	r2, [pc, #568]	; (8003fec <UART_SetConfig+0x2bc>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d121      	bne.n	8003dfc <UART_SetConfig+0xcc>
 8003db8:	4b8d      	ldr	r3, [pc, #564]	; (8003ff0 <UART_SetConfig+0x2c0>)
 8003dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dbc:	f003 0303 	and.w	r3, r3, #3
 8003dc0:	2b03      	cmp	r3, #3
 8003dc2:	d817      	bhi.n	8003df4 <UART_SetConfig+0xc4>
 8003dc4:	a201      	add	r2, pc, #4	; (adr r2, 8003dcc <UART_SetConfig+0x9c>)
 8003dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dca:	bf00      	nop
 8003dcc:	08003ddd 	.word	0x08003ddd
 8003dd0:	08003de9 	.word	0x08003de9
 8003dd4:	08003def 	.word	0x08003def
 8003dd8:	08003de3 	.word	0x08003de3
 8003ddc:	2300      	movs	r3, #0
 8003dde:	75fb      	strb	r3, [r7, #23]
 8003de0:	e01e      	b.n	8003e20 <UART_SetConfig+0xf0>
 8003de2:	2302      	movs	r3, #2
 8003de4:	75fb      	strb	r3, [r7, #23]
 8003de6:	e01b      	b.n	8003e20 <UART_SetConfig+0xf0>
 8003de8:	2304      	movs	r3, #4
 8003dea:	75fb      	strb	r3, [r7, #23]
 8003dec:	e018      	b.n	8003e20 <UART_SetConfig+0xf0>
 8003dee:	2308      	movs	r3, #8
 8003df0:	75fb      	strb	r3, [r7, #23]
 8003df2:	e015      	b.n	8003e20 <UART_SetConfig+0xf0>
 8003df4:	2310      	movs	r3, #16
 8003df6:	75fb      	strb	r3, [r7, #23]
 8003df8:	bf00      	nop
 8003dfa:	e011      	b.n	8003e20 <UART_SetConfig+0xf0>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a7c      	ldr	r2, [pc, #496]	; (8003ff4 <UART_SetConfig+0x2c4>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d102      	bne.n	8003e0c <UART_SetConfig+0xdc>
 8003e06:	2300      	movs	r3, #0
 8003e08:	75fb      	strb	r3, [r7, #23]
 8003e0a:	e009      	b.n	8003e20 <UART_SetConfig+0xf0>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a79      	ldr	r2, [pc, #484]	; (8003ff8 <UART_SetConfig+0x2c8>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d102      	bne.n	8003e1c <UART_SetConfig+0xec>
 8003e16:	2300      	movs	r3, #0
 8003e18:	75fb      	strb	r3, [r7, #23]
 8003e1a:	e001      	b.n	8003e20 <UART_SetConfig+0xf0>
 8003e1c:	2310      	movs	r3, #16
 8003e1e:	75fb      	strb	r3, [r7, #23]

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	69db      	ldr	r3, [r3, #28]
 8003e24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e28:	d16f      	bne.n	8003f0a <UART_SetConfig+0x1da>
  {
    switch (clocksource)
 8003e2a:	7dfb      	ldrb	r3, [r7, #23]
 8003e2c:	2b08      	cmp	r3, #8
 8003e2e:	d857      	bhi.n	8003ee0 <UART_SetConfig+0x1b0>
 8003e30:	a201      	add	r2, pc, #4	; (adr r2, 8003e38 <UART_SetConfig+0x108>)
 8003e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e36:	bf00      	nop
 8003e38:	08003e5d 	.word	0x08003e5d
 8003e3c:	08003e79 	.word	0x08003e79
 8003e40:	08003e95 	.word	0x08003e95
 8003e44:	08003ee1 	.word	0x08003ee1
 8003e48:	08003eaf 	.word	0x08003eaf
 8003e4c:	08003ee1 	.word	0x08003ee1
 8003e50:	08003ee1 	.word	0x08003ee1
 8003e54:	08003ee1 	.word	0x08003ee1
 8003e58:	08003ecb 	.word	0x08003ecb
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003e5c:	f7fe ff04 	bl	8002c68 <HAL_RCC_GetPCLK1Freq>
 8003e60:	4603      	mov	r3, r0
 8003e62:	005a      	lsls	r2, r3, #1
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	085b      	lsrs	r3, r3, #1
 8003e6a:	441a      	add	r2, r3
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e74:	82bb      	strh	r3, [r7, #20]
        break;
 8003e76:	e036      	b.n	8003ee6 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003e78:	f7fe ff18 	bl	8002cac <HAL_RCC_GetPCLK2Freq>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	005a      	lsls	r2, r3, #1
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	085b      	lsrs	r3, r3, #1
 8003e86:	441a      	add	r2, r3
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e90:	82bb      	strh	r3, [r7, #20]
        break;
 8003e92:	e028      	b.n	8003ee6 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	085b      	lsrs	r3, r3, #1
 8003e9a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8003e9e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	6852      	ldr	r2, [r2, #4]
 8003ea6:	fbb3 f3f2 	udiv	r3, r3, r2
 8003eaa:	82bb      	strh	r3, [r7, #20]
        break;
 8003eac:	e01b      	b.n	8003ee6 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003eae:	f7fe fe65 	bl	8002b7c <HAL_RCC_GetSysClockFreq>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	005a      	lsls	r2, r3, #1
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	085b      	lsrs	r3, r3, #1
 8003ebc:	441a      	add	r2, r3
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ec6:	82bb      	strh	r3, [r7, #20]
        break;
 8003ec8:	e00d      	b.n	8003ee6 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	085b      	lsrs	r3, r3, #1
 8003ed0:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003edc:	82bb      	strh	r3, [r7, #20]
        break;
 8003ede:	e002      	b.n	8003ee6 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	74fb      	strb	r3, [r7, #19]
        break;
 8003ee4:	bf00      	nop
    }

    brrtemp = usartdiv & 0xFFF0U;
 8003ee6:	8abb      	ldrh	r3, [r7, #20]
 8003ee8:	f023 030f 	bic.w	r3, r3, #15
 8003eec:	817b      	strh	r3, [r7, #10]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003eee:	8abb      	ldrh	r3, [r7, #20]
 8003ef0:	105b      	asrs	r3, r3, #1
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	f003 0307 	and.w	r3, r3, #7
 8003ef8:	b29a      	uxth	r2, r3
 8003efa:	897b      	ldrh	r3, [r7, #10]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	817b      	strh	r3, [r7, #10]
    huart->Instance->BRR = brrtemp;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	897a      	ldrh	r2, [r7, #10]
 8003f06:	60da      	str	r2, [r3, #12]
 8003f08:	e069      	b.n	8003fde <UART_SetConfig+0x2ae>
  }
  else
  {
    switch (clocksource)
 8003f0a:	7dfb      	ldrb	r3, [r7, #23]
 8003f0c:	2b08      	cmp	r3, #8
 8003f0e:	d863      	bhi.n	8003fd8 <UART_SetConfig+0x2a8>
 8003f10:	a201      	add	r2, pc, #4	; (adr r2, 8003f18 <UART_SetConfig+0x1e8>)
 8003f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f16:	bf00      	nop
 8003f18:	08003f3d 	.word	0x08003f3d
 8003f1c:	08003f5d 	.word	0x08003f5d
 8003f20:	08003f7d 	.word	0x08003f7d
 8003f24:	08003fd9 	.word	0x08003fd9
 8003f28:	08003f9d 	.word	0x08003f9d
 8003f2c:	08003fd9 	.word	0x08003fd9
 8003f30:	08003fd9 	.word	0x08003fd9
 8003f34:	08003fd9 	.word	0x08003fd9
 8003f38:	08003fbd 	.word	0x08003fbd
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003f3c:	f7fe fe94 	bl	8002c68 <HAL_RCC_GetPCLK1Freq>
 8003f40:	4602      	mov	r2, r0
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	085b      	lsrs	r3, r3, #1
 8003f48:	441a      	add	r2, r3
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f52:	b29a      	uxth	r2, r3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	60da      	str	r2, [r3, #12]
        break;
 8003f5a:	e040      	b.n	8003fde <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003f5c:	f7fe fea6 	bl	8002cac <HAL_RCC_GetPCLK2Freq>
 8003f60:	4602      	mov	r2, r0
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	085b      	lsrs	r3, r3, #1
 8003f68:	441a      	add	r2, r3
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f72:	b29a      	uxth	r2, r3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	60da      	str	r2, [r3, #12]
        break;
 8003f7a:	e030      	b.n	8003fde <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	085b      	lsrs	r3, r3, #1
 8003f82:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8003f86:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8003f8a:	687a      	ldr	r2, [r7, #4]
 8003f8c:	6852      	ldr	r2, [r2, #4]
 8003f8e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003f92:	b29a      	uxth	r2, r3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	60da      	str	r2, [r3, #12]
        break;
 8003f9a:	e020      	b.n	8003fde <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003f9c:	f7fe fdee 	bl	8002b7c <HAL_RCC_GetSysClockFreq>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	085b      	lsrs	r3, r3, #1
 8003fa8:	441a      	add	r2, r3
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fb2:	b29a      	uxth	r2, r3
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	60da      	str	r2, [r3, #12]
        break;
 8003fba:	e010      	b.n	8003fde <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	085b      	lsrs	r3, r3, #1
 8003fc2:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fce:	b29a      	uxth	r2, r3
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	60da      	str	r2, [r3, #12]
        break;
 8003fd6:	e002      	b.n	8003fde <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	74fb      	strb	r3, [r7, #19]
        break;
 8003fdc:	bf00      	nop
    }
  }

  return ret;
 8003fde:	7cfb      	ldrb	r3, [r7, #19]

}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3718      	adds	r7, #24
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	efff69f3 	.word	0xefff69f3
 8003fec:	40013800 	.word	0x40013800
 8003ff0:	40021000 	.word	0x40021000
 8003ff4:	40004400 	.word	0x40004400
 8003ff8:	40004800 	.word	0x40004800

08003ffc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b083      	sub	sp, #12
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004008:	f003 0301 	and.w	r3, r3, #1
 800400c:	2b00      	cmp	r3, #0
 800400e:	d00a      	beq.n	8004026 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	430a      	orrs	r2, r1
 8004024:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402a:	f003 0302 	and.w	r3, r3, #2
 800402e:	2b00      	cmp	r3, #0
 8004030:	d00a      	beq.n	8004048 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	430a      	orrs	r2, r1
 8004046:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404c:	f003 0304 	and.w	r3, r3, #4
 8004050:	2b00      	cmp	r3, #0
 8004052:	d00a      	beq.n	800406a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	430a      	orrs	r2, r1
 8004068:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406e:	f003 0308 	and.w	r3, r3, #8
 8004072:	2b00      	cmp	r3, #0
 8004074:	d00a      	beq.n	800408c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	430a      	orrs	r2, r1
 800408a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004090:	f003 0310 	and.w	r3, r3, #16
 8004094:	2b00      	cmp	r3, #0
 8004096:	d00a      	beq.n	80040ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	430a      	orrs	r2, r1
 80040ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b2:	f003 0320 	and.w	r3, r3, #32
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d00a      	beq.n	80040d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	430a      	orrs	r2, r1
 80040ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d01a      	beq.n	8004112 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	430a      	orrs	r2, r1
 80040f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040fa:	d10a      	bne.n	8004112 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	430a      	orrs	r2, r1
 8004110:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800411a:	2b00      	cmp	r3, #0
 800411c:	d00a      	beq.n	8004134 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	430a      	orrs	r2, r1
 8004132:	605a      	str	r2, [r3, #4]
  }
}
 8004134:	bf00      	nop
 8004136:	370c      	adds	r7, #12
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr

08004140 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b086      	sub	sp, #24
 8004144:	af02      	add	r7, sp, #8
 8004146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004148:	2300      	movs	r3, #0
 800414a:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004152:	f7fc fdd3 	bl	8000cfc <HAL_GetTick>
 8004156:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 0308 	and.w	r3, r3, #8
 8004162:	2b08      	cmp	r3, #8
 8004164:	d10e      	bne.n	8004184 <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004166:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800416a:	9300      	str	r3, [sp, #0]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2200      	movs	r2, #0
 8004170:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f000 f82c 	bl	80041d2 <UART_WaitOnFlagUntilTimeout>
 800417a:	4603      	mov	r3, r0
 800417c:	2b00      	cmp	r3, #0
 800417e:	d001      	beq.n	8004184 <UART_CheckIdleState+0x44>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 8004180:	2303      	movs	r3, #3
 8004182:	e022      	b.n	80041ca <UART_CheckIdleState+0x8a>
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 0304 	and.w	r3, r3, #4
 800418e:	2b04      	cmp	r3, #4
 8004190:	d10e      	bne.n	80041b0 <UART_CheckIdleState+0x70>
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004192:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004196:	9300      	str	r3, [sp, #0]
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2200      	movs	r2, #0
 800419c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f000 f816 	bl	80041d2 <UART_WaitOnFlagUntilTimeout>
 80041a6:	4603      	mov	r3, r0
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d001      	beq.n	80041b0 <UART_CheckIdleState+0x70>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 80041ac:	2303      	movs	r3, #3
 80041ae:	e00c      	b.n	80041ca <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2220      	movs	r2, #32
 80041b4:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  huart->RxState = HAL_UART_STATE_READY;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2220      	movs	r2, #32
 80041bc:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2200      	movs	r2, #0
 80041c4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

  return HAL_OK;
 80041c8:	2300      	movs	r3, #0
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3710      	adds	r7, #16
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}

080041d2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80041d2:	b580      	push	{r7, lr}
 80041d4:	b084      	sub	sp, #16
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	60f8      	str	r0, [r7, #12]
 80041da:	60b9      	str	r1, [r7, #8]
 80041dc:	603b      	str	r3, [r7, #0]
 80041de:	4613      	mov	r3, r2
 80041e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041e2:	e02c      	b.n	800423e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80041e4:	69bb      	ldr	r3, [r7, #24]
 80041e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ea:	d028      	beq.n	800423e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80041ec:	69bb      	ldr	r3, [r7, #24]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d007      	beq.n	8004202 <UART_WaitOnFlagUntilTimeout+0x30>
 80041f2:	f7fc fd83 	bl	8000cfc <HAL_GetTick>
 80041f6:	4602      	mov	r2, r0
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	1ad3      	subs	r3, r2, r3
 80041fc:	69ba      	ldr	r2, [r7, #24]
 80041fe:	429a      	cmp	r2, r3
 8004200:	d21d      	bcs.n	800423e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004210:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	689a      	ldr	r2, [r3, #8]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f022 0201 	bic.w	r2, r2, #1
 8004220:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2220      	movs	r2, #32
 8004226:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2220      	movs	r2, #32
 800422e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2200      	movs	r2, #0
 8004236:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        return HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	e00f      	b.n	800425e <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	69da      	ldr	r2, [r3, #28]
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	4013      	ands	r3, r2
 8004248:	68ba      	ldr	r2, [r7, #8]
 800424a:	429a      	cmp	r2, r3
 800424c:	bf0c      	ite	eq
 800424e:	2301      	moveq	r3, #1
 8004250:	2300      	movne	r3, #0
 8004252:	b2db      	uxtb	r3, r3
 8004254:	461a      	mov	r2, r3
 8004256:	79fb      	ldrb	r3, [r7, #7]
 8004258:	429a      	cmp	r2, r3
 800425a:	d0c3      	beq.n	80041e4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800425c:	2300      	movs	r3, #0
}
 800425e:	4618      	mov	r0, r3
 8004260:	3710      	adds	r7, #16
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}
	...

08004268 <ReadByte>:
#include "spi.h"
#include "tim.h"
#include "System/mainsystem.h"

uint8_t ReadByte(uint8_t addres)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b086      	sub	sp, #24
 800426c:	af02      	add	r7, sp, #8
 800426e:	4603      	mov	r3, r0
 8004270:	71fb      	strb	r3, [r7, #7]
	uint8_t trans_addres[2];
	uint8_t receive_data[2];

	trans_addres[0] = addres | 0x80;
 8004272:	79fb      	ldrb	r3, [r7, #7]
 8004274:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004278:	b2db      	uxtb	r3, r3
 800427a:	733b      	strb	r3, [r7, #12]
	trans_addres[1] = 0x00;
 800427c:	2300      	movs	r3, #0
 800427e:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(CS_GPIO_Port,CS_Pin,RESET);
 8004280:	2200      	movs	r2, #0
 8004282:	2110      	movs	r1, #16
 8004284:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004288:	f7fd face 	bl	8001828 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1,trans_addres,receive_data,2,1);
 800428c:	f107 0208 	add.w	r2, r7, #8
 8004290:	f107 010c 	add.w	r1, r7, #12
 8004294:	2301      	movs	r3, #1
 8004296:	9300      	str	r3, [sp, #0]
 8004298:	2302      	movs	r3, #2
 800429a:	4807      	ldr	r0, [pc, #28]	; (80042b8 <ReadByte+0x50>)
 800429c:	f7fe fed8 	bl	8003050 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(CS_GPIO_Port,CS_Pin,SET);
 80042a0:	2201      	movs	r2, #1
 80042a2:	2110      	movs	r1, #16
 80042a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80042a8:	f7fd fabe 	bl	8001828 <HAL_GPIO_WritePin>

	return receive_data[1];
 80042ac:	7a7b      	ldrb	r3, [r7, #9]
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3710      	adds	r7, #16
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	bf00      	nop
 80042b8:	200002ac 	.word	0x200002ac

080042bc <WriteByte>:

void WriteByte(uint8_t addres,uint8_t data)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b086      	sub	sp, #24
 80042c0:	af02      	add	r7, sp, #8
 80042c2:	4603      	mov	r3, r0
 80042c4:	460a      	mov	r2, r1
 80042c6:	71fb      	strb	r3, [r7, #7]
 80042c8:	4613      	mov	r3, r2
 80042ca:	71bb      	strb	r3, [r7, #6]

	uint8_t trans_data[2];
	uint8_t receive_data[2];

	trans_data[0] = addres & 0x7f;
 80042cc:	79fb      	ldrb	r3, [r7, #7]
 80042ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	733b      	strb	r3, [r7, #12]
	trans_data[1] = data;
 80042d6:	79bb      	ldrb	r3, [r7, #6]
 80042d8:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(CS_GPIO_Port,CS_Pin,RESET);
 80042da:	2200      	movs	r2, #0
 80042dc:	2110      	movs	r1, #16
 80042de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80042e2:	f7fd faa1 	bl	8001828 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1,trans_data,receive_data,2,1);
 80042e6:	f107 0208 	add.w	r2, r7, #8
 80042ea:	f107 010c 	add.w	r1, r7, #12
 80042ee:	2301      	movs	r3, #1
 80042f0:	9300      	str	r3, [sp, #0]
 80042f2:	2302      	movs	r3, #2
 80042f4:	4806      	ldr	r0, [pc, #24]	; (8004310 <WriteByte+0x54>)
 80042f6:	f7fe feab 	bl	8003050 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(CS_GPIO_Port,CS_Pin,SET);
 80042fa:	2201      	movs	r2, #1
 80042fc:	2110      	movs	r1, #16
 80042fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004302:	f7fd fa91 	bl	8001828 <HAL_GPIO_WritePin>

}
 8004306:	bf00      	nop
 8004308:	3710      	adds	r7, #16
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}
 800430e:	bf00      	nop
 8004310:	200002ac 	.word	0x200002ac

08004314 <InitGyro>:

void InitGyro(void)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b082      	sub	sp, #8
 8004318:	af00      	add	r7, sp, #0
	uint8_t who_am_i = ReadByte(WHO_AM_I);
 800431a:	2075      	movs	r0, #117	; 0x75
 800431c:	f7ff ffa4 	bl	8004268 <ReadByte>
 8004320:	4603      	mov	r3, r0
 8004322:	71fb      	strb	r3, [r7, #7]
	printf("Who am I ? -> 0x%x\n", who_am_i);
 8004324:	79fb      	ldrb	r3, [r7, #7]
 8004326:	4619      	mov	r1, r3
 8004328:	4822      	ldr	r0, [pc, #136]	; (80043b4 <InitGyro+0xa0>)
 800432a:	f001 fba9 	bl	8005a80 <iprintf>

	if(who_am_i != GYRO_CORREST_REACTION){
 800432e:	79fb      	ldrb	r3, [r7, #7]
 8004330:	2b71      	cmp	r3, #113	; 0x71
 8004332:	d022      	beq.n	800437a <InitGyro+0x66>
		who_am_i = ReadByte(WHO_AM_I);
 8004334:	2075      	movs	r0, #117	; 0x75
 8004336:	f7ff ff97 	bl	8004268 <ReadByte>
 800433a:	4603      	mov	r3, r0
 800433c:	71fb      	strb	r3, [r7, #7]
		printf("addres is %d\n",WHO_AM_I);
 800433e:	2175      	movs	r1, #117	; 0x75
 8004340:	481d      	ldr	r0, [pc, #116]	; (80043b8 <InitGyro+0xa4>)
 8004342:	f001 fb9d 	bl	8005a80 <iprintf>
		printf("Who am I ? -> 0x%x\n", who_am_i);
 8004346:	79fb      	ldrb	r3, [r7, #7]
 8004348:	4619      	mov	r1, r3
 800434a:	481a      	ldr	r0, [pc, #104]	; (80043b4 <InitGyro+0xa0>)
 800434c:	f001 fb98 	bl	8005a80 <iprintf>
		while(who_am_i != GYRO_CORREST_REACTION){
 8004350:	e010      	b.n	8004374 <InitGyro+0x60>
			who_am_i = ReadByte(WHO_AM_I);
 8004352:	2075      	movs	r0, #117	; 0x75
 8004354:	f7ff ff88 	bl	8004268 <ReadByte>
 8004358:	4603      	mov	r3, r0
 800435a:	71fb      	strb	r3, [r7, #7]
			printf("Who am I ? -> 0x%x\n", who_am_i);
 800435c:	79fb      	ldrb	r3, [r7, #7]
 800435e:	4619      	mov	r1, r3
 8004360:	4814      	ldr	r0, [pc, #80]	; (80043b4 <InitGyro+0xa0>)
 8004362:	f001 fb8d 	bl	8005a80 <iprintf>
			printf("Gyro Fail\n");
 8004366:	4815      	ldr	r0, [pc, #84]	; (80043bc <InitGyro+0xa8>)
 8004368:	f001 fbfe 	bl	8005b68 <puts>
			HAL_Delay(1000);
 800436c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004370:	f7fc fcd0 	bl	8000d14 <HAL_Delay>
		while(who_am_i != GYRO_CORREST_REACTION){
 8004374:	79fb      	ldrb	r3, [r7, #7]
 8004376:	2b71      	cmp	r3, #113	; 0x71
 8004378:	d1eb      	bne.n	8004352 <InitGyro+0x3e>
		}
	}

	printf("Gyro OK\n");
 800437a:	4811      	ldr	r0, [pc, #68]	; (80043c0 <InitGyro+0xac>)
 800437c:	f001 fbf4 	bl	8005b68 <puts>

	WriteByte(PWR_MGMT_1,0x00);
 8004380:	2100      	movs	r1, #0
 8004382:	206b      	movs	r0, #107	; 0x6b
 8004384:	f7ff ff9a 	bl	80042bc <WriteByte>
	HAL_Delay(10);
 8004388:	200a      	movs	r0, #10
 800438a:	f7fc fcc3 	bl	8000d14 <HAL_Delay>
	WriteByte(CONFIG,0x00);
 800438e:	2100      	movs	r1, #0
 8004390:	201a      	movs	r0, #26
 8004392:	f7ff ff93 	bl	80042bc <WriteByte>
	HAL_Delay(10);
 8004396:	200a      	movs	r0, #10
 8004398:	f7fc fcbc 	bl	8000d14 <HAL_Delay>
	WriteByte(GYRO_CONFIG,0x18);
 800439c:	2118      	movs	r1, #24
 800439e:	201b      	movs	r0, #27
 80043a0:	f7ff ff8c 	bl	80042bc <WriteByte>
	HAL_Delay(10);
 80043a4:	200a      	movs	r0, #10
 80043a6:	f7fc fcb5 	bl	8000d14 <HAL_Delay>

}
 80043aa:	bf00      	nop
 80043ac:	3708      	adds	r7, #8
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}
 80043b2:	bf00      	nop
 80043b4:	080078f8 	.word	0x080078f8
 80043b8:	0800790c 	.word	0x0800790c
 80043bc:	0800791c 	.word	0x0800791c
 80043c0:	08007928 	.word	0x08007928

080043c4 <ReadGyroYaw>:

float ReadGyroYaw(void){
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b082      	sub	sp, #8
 80043c8:	af00      	add	r7, sp, #0
	int16_t omega_raw_z;
	float omega;

	yaw_value_h = ReadByte(GYRO_ZOUT_H);						//Read 7-4bit (addres 0x47)
 80043ca:	2047      	movs	r0, #71	; 0x47
 80043cc:	f7ff ff4c 	bl	8004268 <ReadByte>
 80043d0:	4603      	mov	r3, r0
 80043d2:	461a      	mov	r2, r3
 80043d4:	4b12      	ldr	r3, [pc, #72]	; (8004420 <ReadGyroYaw+0x5c>)
 80043d6:	701a      	strb	r2, [r3, #0]
	yaw_value_l = ReadByte(GYRO_ZOUT_L);						//Read 3-0bit (addres 0x48)
 80043d8:	2048      	movs	r0, #72	; 0x48
 80043da:	f7ff ff45 	bl	8004268 <ReadByte>
 80043de:	4603      	mov	r3, r0
 80043e0:	461a      	mov	r2, r3
 80043e2:	4b10      	ldr	r3, [pc, #64]	; (8004424 <ReadGyroYaw+0x60>)
 80043e4:	701a      	strb	r2, [r3, #0]

	omega_raw_z = (int16_t)(yaw_value_h << 8 | yaw_value_l);
 80043e6:	4b0e      	ldr	r3, [pc, #56]	; (8004420 <ReadGyroYaw+0x5c>)
 80043e8:	781b      	ldrb	r3, [r3, #0]
 80043ea:	021b      	lsls	r3, r3, #8
 80043ec:	b21a      	sxth	r2, r3
 80043ee:	4b0d      	ldr	r3, [pc, #52]	; (8004424 <ReadGyroYaw+0x60>)
 80043f0:	781b      	ldrb	r3, [r3, #0]
 80043f2:	b21b      	sxth	r3, r3
 80043f4:	4313      	orrs	r3, r2
 80043f6:	80fb      	strh	r3, [r7, #6]
	omega = (float)(omega_raw_z / GYRO_FIX);
 80043f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80043fc:	ee07 3a90 	vmov	s15, r3
 8004400:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004404:	eddf 6a08 	vldr	s13, [pc, #32]	; 8004428 <ReadGyroYaw+0x64>
 8004408:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800440c:	edc7 7a00 	vstr	s15, [r7]
	return omega;
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	ee07 3a90 	vmov	s15, r3
}
 8004416:	eeb0 0a67 	vmov.f32	s0, s15
 800441a:	3708      	adds	r7, #8
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}
 8004420:	20000231 	.word	0x20000231
 8004424:	2000020c 	.word	0x2000020c
 8004428:	41833333 	.word	0x41833333

0800442c <ReadGyroRoll>:

float ReadGyroRoll(void){
 800442c:	b580      	push	{r7, lr}
 800442e:	b082      	sub	sp, #8
 8004430:	af00      	add	r7, sp, #0
	int16_t omega_raw_y;
	float omega;

	roll_value_h = ReadByte(GYRO_YOUT_H);						//Read 7-4bit (addres 0x45)
 8004432:	2045      	movs	r0, #69	; 0x45
 8004434:	f7ff ff18 	bl	8004268 <ReadByte>
 8004438:	4603      	mov	r3, r0
 800443a:	461a      	mov	r2, r3
 800443c:	4b12      	ldr	r3, [pc, #72]	; (8004488 <ReadGyroRoll+0x5c>)
 800443e:	701a      	strb	r2, [r3, #0]
	roll_value_l = ReadByte(GYRO_YOUT_L);						//Read 3-0bit (addres 0x46)
 8004440:	2046      	movs	r0, #70	; 0x46
 8004442:	f7ff ff11 	bl	8004268 <ReadByte>
 8004446:	4603      	mov	r3, r0
 8004448:	461a      	mov	r2, r3
 800444a:	4b10      	ldr	r3, [pc, #64]	; (800448c <ReadGyroRoll+0x60>)
 800444c:	701a      	strb	r2, [r3, #0]

	omega_raw_y = (int16_t)(roll_value_h << 8 | roll_value_l);
 800444e:	4b0e      	ldr	r3, [pc, #56]	; (8004488 <ReadGyroRoll+0x5c>)
 8004450:	781b      	ldrb	r3, [r3, #0]
 8004452:	021b      	lsls	r3, r3, #8
 8004454:	b21a      	sxth	r2, r3
 8004456:	4b0d      	ldr	r3, [pc, #52]	; (800448c <ReadGyroRoll+0x60>)
 8004458:	781b      	ldrb	r3, [r3, #0]
 800445a:	b21b      	sxth	r3, r3
 800445c:	4313      	orrs	r3, r2
 800445e:	80fb      	strh	r3, [r7, #6]
	omega = (float)(omega_raw_y / GYRO_FIX);
 8004460:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004464:	ee07 3a90 	vmov	s15, r3
 8004468:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800446c:	eddf 6a08 	vldr	s13, [pc, #32]	; 8004490 <ReadGyroRoll+0x64>
 8004470:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004474:	edc7 7a00 	vstr	s15, [r7]
	return omega;
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	ee07 3a90 	vmov	s15, r3
}
 800447e:	eeb0 0a67 	vmov.f32	s0, s15
 8004482:	3708      	adds	r7, #8
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}
 8004488:	2000022a 	.word	0x2000022a
 800448c:	20000229 	.word	0x20000229
 8004490:	41833333 	.word	0x41833333

08004494 <ReadGyroPitch>:

float ReadGyroPitch(void){
 8004494:	b580      	push	{r7, lr}
 8004496:	b082      	sub	sp, #8
 8004498:	af00      	add	r7, sp, #0
	int16_t omega_raw_x;
	float omega;

	pitch_value_h = ReadByte(GYRO_XOUT_H);						//Read 7-4bit (addres 0x43)
 800449a:	2043      	movs	r0, #67	; 0x43
 800449c:	f7ff fee4 	bl	8004268 <ReadByte>
 80044a0:	4603      	mov	r3, r0
 80044a2:	461a      	mov	r2, r3
 80044a4:	4b12      	ldr	r3, [pc, #72]	; (80044f0 <ReadGyroPitch+0x5c>)
 80044a6:	701a      	strb	r2, [r3, #0]
	pitch_value_l = ReadByte(GYRO_XOUT_L);						//Read 3-0bit (addres 0x44)
 80044a8:	2044      	movs	r0, #68	; 0x44
 80044aa:	f7ff fedd 	bl	8004268 <ReadByte>
 80044ae:	4603      	mov	r3, r0
 80044b0:	461a      	mov	r2, r3
 80044b2:	4b10      	ldr	r3, [pc, #64]	; (80044f4 <ReadGyroPitch+0x60>)
 80044b4:	701a      	strb	r2, [r3, #0]

	omega_raw_x = (int16_t)(pitch_value_h << 8 | pitch_value_l);
 80044b6:	4b0e      	ldr	r3, [pc, #56]	; (80044f0 <ReadGyroPitch+0x5c>)
 80044b8:	781b      	ldrb	r3, [r3, #0]
 80044ba:	021b      	lsls	r3, r3, #8
 80044bc:	b21a      	sxth	r2, r3
 80044be:	4b0d      	ldr	r3, [pc, #52]	; (80044f4 <ReadGyroPitch+0x60>)
 80044c0:	781b      	ldrb	r3, [r3, #0]
 80044c2:	b21b      	sxth	r3, r3
 80044c4:	4313      	orrs	r3, r2
 80044c6:	80fb      	strh	r3, [r7, #6]
	omega = (float)(omega_raw_x / GYRO_FIX);
 80044c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80044cc:	ee07 3a90 	vmov	s15, r3
 80044d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80044d4:	eddf 6a08 	vldr	s13, [pc, #32]	; 80044f8 <ReadGyroPitch+0x64>
 80044d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80044dc:	edc7 7a00 	vstr	s15, [r7]
	return omega;
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	ee07 3a90 	vmov	s15, r3
}
 80044e6:	eeb0 0a67 	vmov.f32	s0, s15
 80044ea:	3708      	adds	r7, #8
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}
 80044f0:	20000230 	.word	0x20000230
 80044f4:	20000228 	.word	0x20000228
 80044f8:	41833333 	.word	0x41833333

080044fc <MainSystem>:
	float omega = 0.0f;
	float gyro_base = 0.0f;
*/

void MainSystem()
{
 80044fc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004500:	b08e      	sub	sp, #56	; 0x38
 8004502:	af04      	add	r7, sp, #16
	uint16_t i = 0;
 8004504:	2300      	movs	r3, #0
 8004506:	84fb      	strh	r3, [r7, #38]	; 0x26
	CAN_TxHeaderTypeDef header;
	uint8_t TxData[8] = { 0 };
 8004508:	1d3b      	adds	r3, r7, #4
 800450a:	2200      	movs	r2, #0
 800450c:	601a      	str	r2, [r3, #0]
 800450e:	605a      	str	r2, [r3, #4]
	uint32_t TxMailbox;

	header.StdId = 0x1ff;
 8004510:	f240 13ff 	movw	r3, #511	; 0x1ff
 8004514:	60fb      	str	r3, [r7, #12]
	header.RTR = CAN_RTR_DATA;
 8004516:	2300      	movs	r3, #0
 8004518:	61bb      	str	r3, [r7, #24]
	header.IDE = CAN_ID_STD;
 800451a:	2300      	movs	r3, #0
 800451c:	617b      	str	r3, [r7, #20]
	header.DLC = 8;
 800451e:	2308      	movs	r3, #8
 8004520:	61fb      	str	r3, [r7, #28]

	printf("Hello,Robomaster\n");
 8004522:	4847      	ldr	r0, [pc, #284]	; (8004640 <MainSystem+0x144>)
 8004524:	f001 fb20 	bl	8005b68 <puts>

	InitGyro();
 8004528:	f7ff fef4 	bl	8004314 <InitGyro>
	InitCanFilter();
 800452c:	f000 f8a2 	bl	8004674 <InitCanFilter>

	//Get Base Value (Average)
	for(i=0;i<1000;i++){
 8004530:	2300      	movs	r3, #0
 8004532:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004534:	e029      	b.n	800458a <MainSystem+0x8e>
		gyro_base_yaw += ReadGyroYaw();
 8004536:	f7ff ff45 	bl	80043c4 <ReadGyroYaw>
 800453a:	eeb0 7a40 	vmov.f32	s14, s0
 800453e:	4b41      	ldr	r3, [pc, #260]	; (8004644 <MainSystem+0x148>)
 8004540:	edd3 7a00 	vldr	s15, [r3]
 8004544:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004548:	4b3e      	ldr	r3, [pc, #248]	; (8004644 <MainSystem+0x148>)
 800454a:	edc3 7a00 	vstr	s15, [r3]
		gyro_base_roll += ReadGyroRoll();
 800454e:	f7ff ff6d 	bl	800442c <ReadGyroRoll>
 8004552:	eeb0 7a40 	vmov.f32	s14, s0
 8004556:	4b3c      	ldr	r3, [pc, #240]	; (8004648 <MainSystem+0x14c>)
 8004558:	edd3 7a00 	vldr	s15, [r3]
 800455c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004560:	4b39      	ldr	r3, [pc, #228]	; (8004648 <MainSystem+0x14c>)
 8004562:	edc3 7a00 	vstr	s15, [r3]
		gyro_base_pitch += ReadGyroPitch();
 8004566:	f7ff ff95 	bl	8004494 <ReadGyroPitch>
 800456a:	eeb0 7a40 	vmov.f32	s14, s0
 800456e:	4b37      	ldr	r3, [pc, #220]	; (800464c <MainSystem+0x150>)
 8004570:	edd3 7a00 	vldr	s15, [r3]
 8004574:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004578:	4b34      	ldr	r3, [pc, #208]	; (800464c <MainSystem+0x150>)
 800457a:	edc3 7a00 	vstr	s15, [r3]

		HAL_Delay(1);
 800457e:	2001      	movs	r0, #1
 8004580:	f7fc fbc8 	bl	8000d14 <HAL_Delay>
	for(i=0;i<1000;i++){
 8004584:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004586:	3301      	adds	r3, #1
 8004588:	84fb      	strh	r3, [r7, #38]	; 0x26
 800458a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800458c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004590:	d3d1      	bcc.n	8004536 <MainSystem+0x3a>
	}
	gyro_base_yaw = gyro_base_yaw / 1000;
 8004592:	4b2c      	ldr	r3, [pc, #176]	; (8004644 <MainSystem+0x148>)
 8004594:	ed93 7a00 	vldr	s14, [r3]
 8004598:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8004650 <MainSystem+0x154>
 800459c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80045a0:	4b28      	ldr	r3, [pc, #160]	; (8004644 <MainSystem+0x148>)
 80045a2:	edc3 7a00 	vstr	s15, [r3]
	gyro_base_roll = gyro_base_roll / 1000;
 80045a6:	4b28      	ldr	r3, [pc, #160]	; (8004648 <MainSystem+0x14c>)
 80045a8:	ed93 7a00 	vldr	s14, [r3]
 80045ac:	eddf 6a28 	vldr	s13, [pc, #160]	; 8004650 <MainSystem+0x154>
 80045b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80045b4:	4b24      	ldr	r3, [pc, #144]	; (8004648 <MainSystem+0x14c>)
 80045b6:	edc3 7a00 	vstr	s15, [r3]
	gyro_base_pitch = gyro_base_pitch / 1000;
 80045ba:	4b24      	ldr	r3, [pc, #144]	; (800464c <MainSystem+0x150>)
 80045bc:	ed93 7a00 	vldr	s14, [r3]
 80045c0:	eddf 6a23 	vldr	s13, [pc, #140]	; 8004650 <MainSystem+0x154>
 80045c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80045c8:	4b20      	ldr	r3, [pc, #128]	; (800464c <MainSystem+0x150>)
 80045ca:	edc3 7a00 	vstr	s15, [r3]

	HAL_TIM_Base_Start_IT(&htim6);
 80045ce:	4821      	ldr	r0, [pc, #132]	; (8004654 <MainSystem+0x158>)
 80045d0:	f7ff f887 	bl	80036e2 <HAL_TIM_Base_Start_IT>
	HAL_CAN_Start(&hcan);
 80045d4:	4820      	ldr	r0, [pc, #128]	; (8004658 <MainSystem+0x15c>)
 80045d6:	f7fc fd84 	bl	80010e2 <HAL_CAN_Start>

	TxData[0] = yaw_value_h >> 8;
 80045da:	4b20      	ldr	r3, [pc, #128]	; (800465c <MainSystem+0x160>)
 80045dc:	781b      	ldrb	r3, [r3, #0]
 80045de:	121b      	asrs	r3, r3, #8
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	713b      	strb	r3, [r7, #4]
	TxData[1] = yaw_value_l & 0xFF;
 80045e4:	4b1e      	ldr	r3, [pc, #120]	; (8004660 <MainSystem+0x164>)
 80045e6:	781b      	ldrb	r3, [r3, #0]
 80045e8:	717b      	strb	r3, [r7, #5]


	while(1){
			printf("Angle_yaw: %4lf, Angle_pitch: %4lf, Angle_roll: %4lf\n",angle_degree_yaw,angle_degree_pitch,angle_degree_roll);
 80045ea:	4b1e      	ldr	r3, [pc, #120]	; (8004664 <MainSystem+0x168>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4618      	mov	r0, r3
 80045f0:	f7fb ffaa 	bl	8000548 <__aeabi_f2d>
 80045f4:	4680      	mov	r8, r0
 80045f6:	4689      	mov	r9, r1
 80045f8:	4b1b      	ldr	r3, [pc, #108]	; (8004668 <MainSystem+0x16c>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4618      	mov	r0, r3
 80045fe:	f7fb ffa3 	bl	8000548 <__aeabi_f2d>
 8004602:	4604      	mov	r4, r0
 8004604:	460d      	mov	r5, r1
 8004606:	4b19      	ldr	r3, [pc, #100]	; (800466c <MainSystem+0x170>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4618      	mov	r0, r3
 800460c:	f7fb ff9c 	bl	8000548 <__aeabi_f2d>
 8004610:	4602      	mov	r2, r0
 8004612:	460b      	mov	r3, r1
 8004614:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004618:	e9cd 4500 	strd	r4, r5, [sp]
 800461c:	4642      	mov	r2, r8
 800461e:	464b      	mov	r3, r9
 8004620:	4813      	ldr	r0, [pc, #76]	; (8004670 <MainSystem+0x174>)
 8004622:	f001 fa2d 	bl	8005a80 <iprintf>
			HAL_Delay(1000);
 8004626:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800462a:	f7fc fb73 	bl	8000d14 <HAL_Delay>
			HAL_CAN_AddTxMessage(&hcan, &header, TxData, &TxMailbox);
 800462e:	463b      	mov	r3, r7
 8004630:	1d3a      	adds	r2, r7, #4
 8004632:	f107 010c 	add.w	r1, r7, #12
 8004636:	4808      	ldr	r0, [pc, #32]	; (8004658 <MainSystem+0x15c>)
 8004638:	f7fc fd97 	bl	800116a <HAL_CAN_AddTxMessage>
			printf("Angle_yaw: %4lf, Angle_pitch: %4lf, Angle_roll: %4lf\n",angle_degree_yaw,angle_degree_pitch,angle_degree_roll);
 800463c:	e7d5      	b.n	80045ea <MainSystem+0xee>
 800463e:	bf00      	nop
 8004640:	08007930 	.word	0x08007930
 8004644:	20000214 	.word	0x20000214
 8004648:	20000220 	.word	0x20000220
 800464c:	20000234 	.word	0x20000234
 8004650:	447a0000 	.word	0x447a0000
 8004654:	20000310 	.word	0x20000310
 8004658:	20000238 	.word	0x20000238
 800465c:	20000231 	.word	0x20000231
 8004660:	2000020c 	.word	0x2000020c
 8004664:	2000021c 	.word	0x2000021c
 8004668:	20000224 	.word	0x20000224
 800466c:	20000208 	.word	0x20000208
 8004670:	08007944 	.word	0x08007944

08004674 <InitCanFilter>:
 */

#include"can.h"
#include"System/mycan.h"

void InitCanFilter() {
 8004674:	b580      	push	{r7, lr}
 8004676:	b08a      	sub	sp, #40	; 0x28
 8004678:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef sFilterConfig;
	sFilterConfig.FilterBank = 0;
 800467a:	2300      	movs	r3, #0
 800467c:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800467e:	2300      	movs	r3, #0
 8004680:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8004682:	2301      	movs	r3, #1
 8004684:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterIdHigh = 0x0000;
 8004686:	2300      	movs	r3, #0
 8004688:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 800468a:	2300      	movs	r3, #0
 800468c:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 800468e:	2300      	movs	r3, #0
 8004690:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 8004692:	2300      	movs	r3, #0
 8004694:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8004696:	2300      	movs	r3, #0
 8004698:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterActivation = ENABLE;
 800469a:	2301      	movs	r3, #1
 800469c:	623b      	str	r3, [r7, #32]
	sFilterConfig.SlaveStartFilterBank = 0;
 800469e:	2300      	movs	r3, #0
 80046a0:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan, &sFilterConfig);
 80046a2:	463b      	mov	r3, r7
 80046a4:	4619      	mov	r1, r3
 80046a6:	4803      	ldr	r0, [pc, #12]	; (80046b4 <InitCanFilter+0x40>)
 80046a8:	f7fc fc51 	bl	8000f4e <HAL_CAN_ConfigFilter>
}
 80046ac:	bf00      	nop
 80046ae:	3728      	adds	r7, #40	; 0x28
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}
 80046b4:	20000238 	.word	0x20000238

080046b8 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	af00      	add	r7, sp, #0

  hcan.Instance = CAN;
 80046bc:	4b17      	ldr	r3, [pc, #92]	; (800471c <MX_CAN_Init+0x64>)
 80046be:	4a18      	ldr	r2, [pc, #96]	; (8004720 <MX_CAN_Init+0x68>)
 80046c0:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 8-1;
 80046c2:	4b16      	ldr	r3, [pc, #88]	; (800471c <MX_CAN_Init+0x64>)
 80046c4:	2207      	movs	r2, #7
 80046c6:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80046c8:	4b14      	ldr	r3, [pc, #80]	; (800471c <MX_CAN_Init+0x64>)
 80046ca:	2200      	movs	r2, #0
 80046cc:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80046ce:	4b13      	ldr	r3, [pc, #76]	; (800471c <MX_CAN_Init+0x64>)
 80046d0:	2200      	movs	r2, #0
 80046d2:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 80046d4:	4b11      	ldr	r3, [pc, #68]	; (800471c <MX_CAN_Init+0x64>)
 80046d6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80046da:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 80046dc:	4b0f      	ldr	r3, [pc, #60]	; (800471c <MX_CAN_Init+0x64>)
 80046de:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80046e2:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80046e4:	4b0d      	ldr	r3, [pc, #52]	; (800471c <MX_CAN_Init+0x64>)
 80046e6:	2200      	movs	r2, #0
 80046e8:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80046ea:	4b0c      	ldr	r3, [pc, #48]	; (800471c <MX_CAN_Init+0x64>)
 80046ec:	2200      	movs	r2, #0
 80046ee:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80046f0:	4b0a      	ldr	r3, [pc, #40]	; (800471c <MX_CAN_Init+0x64>)
 80046f2:	2200      	movs	r2, #0
 80046f4:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80046f6:	4b09      	ldr	r3, [pc, #36]	; (800471c <MX_CAN_Init+0x64>)
 80046f8:	2200      	movs	r2, #0
 80046fa:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80046fc:	4b07      	ldr	r3, [pc, #28]	; (800471c <MX_CAN_Init+0x64>)
 80046fe:	2200      	movs	r2, #0
 8004700:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = ENABLE;
 8004702:	4b06      	ldr	r3, [pc, #24]	; (800471c <MX_CAN_Init+0x64>)
 8004704:	2201      	movs	r2, #1
 8004706:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8004708:	4804      	ldr	r0, [pc, #16]	; (800471c <MX_CAN_Init+0x64>)
 800470a:	f7fc fb25 	bl	8000d58 <HAL_CAN_Init>
 800470e:	4603      	mov	r3, r0
 8004710:	2b00      	cmp	r3, #0
 8004712:	d001      	beq.n	8004718 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8004714:	f000 fa65 	bl	8004be2 <Error_Handler>
  }

}
 8004718:	bf00      	nop
 800471a:	bd80      	pop	{r7, pc}
 800471c:	20000238 	.word	0x20000238
 8004720:	40006400 	.word	0x40006400

08004724 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b08a      	sub	sp, #40	; 0x28
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800472c:	f107 0314 	add.w	r3, r7, #20
 8004730:	2200      	movs	r2, #0
 8004732:	601a      	str	r2, [r3, #0]
 8004734:	605a      	str	r2, [r3, #4]
 8004736:	609a      	str	r2, [r3, #8]
 8004738:	60da      	str	r2, [r3, #12]
 800473a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a18      	ldr	r2, [pc, #96]	; (80047a4 <HAL_CAN_MspInit+0x80>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d129      	bne.n	800479a <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* CAN clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8004746:	4b18      	ldr	r3, [pc, #96]	; (80047a8 <HAL_CAN_MspInit+0x84>)
 8004748:	69db      	ldr	r3, [r3, #28]
 800474a:	4a17      	ldr	r2, [pc, #92]	; (80047a8 <HAL_CAN_MspInit+0x84>)
 800474c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004750:	61d3      	str	r3, [r2, #28]
 8004752:	4b15      	ldr	r3, [pc, #84]	; (80047a8 <HAL_CAN_MspInit+0x84>)
 8004754:	69db      	ldr	r3, [r3, #28]
 8004756:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800475a:	613b      	str	r3, [r7, #16]
 800475c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800475e:	4b12      	ldr	r3, [pc, #72]	; (80047a8 <HAL_CAN_MspInit+0x84>)
 8004760:	695b      	ldr	r3, [r3, #20]
 8004762:	4a11      	ldr	r2, [pc, #68]	; (80047a8 <HAL_CAN_MspInit+0x84>)
 8004764:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004768:	6153      	str	r3, [r2, #20]
 800476a:	4b0f      	ldr	r3, [pc, #60]	; (80047a8 <HAL_CAN_MspInit+0x84>)
 800476c:	695b      	ldr	r3, [r3, #20]
 800476e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004772:	60fb      	str	r3, [r7, #12]
 8004774:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration    
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8004776:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800477a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800477c:	2302      	movs	r3, #2
 800477e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004780:	2300      	movs	r3, #0
 8004782:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004784:	2303      	movs	r3, #3
 8004786:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8004788:	2309      	movs	r3, #9
 800478a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800478c:	f107 0314 	add.w	r3, r7, #20
 8004790:	4619      	mov	r1, r3
 8004792:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004796:	f7fc fed1 	bl	800153c <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }
}
 800479a:	bf00      	nop
 800479c:	3728      	adds	r7, #40	; 0x28
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	bf00      	nop
 80047a4:	40006400 	.word	0x40006400
 80047a8:	40021000 	.word	0x40021000

080047ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b088      	sub	sp, #32
 80047b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047b2:	f107 030c 	add.w	r3, r7, #12
 80047b6:	2200      	movs	r2, #0
 80047b8:	601a      	str	r2, [r3, #0]
 80047ba:	605a      	str	r2, [r3, #4]
 80047bc:	609a      	str	r2, [r3, #8]
 80047be:	60da      	str	r2, [r3, #12]
 80047c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80047c2:	4b28      	ldr	r3, [pc, #160]	; (8004864 <MX_GPIO_Init+0xb8>)
 80047c4:	695b      	ldr	r3, [r3, #20]
 80047c6:	4a27      	ldr	r2, [pc, #156]	; (8004864 <MX_GPIO_Init+0xb8>)
 80047c8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80047cc:	6153      	str	r3, [r2, #20]
 80047ce:	4b25      	ldr	r3, [pc, #148]	; (8004864 <MX_GPIO_Init+0xb8>)
 80047d0:	695b      	ldr	r3, [r3, #20]
 80047d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047d6:	60bb      	str	r3, [r7, #8]
 80047d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80047da:	4b22      	ldr	r3, [pc, #136]	; (8004864 <MX_GPIO_Init+0xb8>)
 80047dc:	695b      	ldr	r3, [r3, #20]
 80047de:	4a21      	ldr	r2, [pc, #132]	; (8004864 <MX_GPIO_Init+0xb8>)
 80047e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047e4:	6153      	str	r3, [r2, #20]
 80047e6:	4b1f      	ldr	r3, [pc, #124]	; (8004864 <MX_GPIO_Init+0xb8>)
 80047e8:	695b      	ldr	r3, [r3, #20]
 80047ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ee:	607b      	str	r3, [r7, #4]
 80047f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80047f2:	4b1c      	ldr	r3, [pc, #112]	; (8004864 <MX_GPIO_Init+0xb8>)
 80047f4:	695b      	ldr	r3, [r3, #20]
 80047f6:	4a1b      	ldr	r2, [pc, #108]	; (8004864 <MX_GPIO_Init+0xb8>)
 80047f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047fc:	6153      	str	r3, [r2, #20]
 80047fe:	4b19      	ldr	r3, [pc, #100]	; (8004864 <MX_GPIO_Init+0xb8>)
 8004800:	695b      	ldr	r3, [r3, #20]
 8004802:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004806:	603b      	str	r3, [r7, #0]
 8004808:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 800480a:	2200      	movs	r2, #0
 800480c:	2110      	movs	r1, #16
 800480e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004812:	f7fd f809 	bl	8001828 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8004816:	2200      	movs	r2, #0
 8004818:	2108      	movs	r1, #8
 800481a:	4813      	ldr	r0, [pc, #76]	; (8004868 <MX_GPIO_Init+0xbc>)
 800481c:	f7fd f804 	bl	8001828 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_Pin;
 8004820:	2310      	movs	r3, #16
 8004822:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004824:	2301      	movs	r3, #1
 8004826:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004828:	2300      	movs	r3, #0
 800482a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800482c:	2300      	movs	r3, #0
 800482e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8004830:	f107 030c 	add.w	r3, r7, #12
 8004834:	4619      	mov	r1, r3
 8004836:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800483a:	f7fc fe7f 	bl	800153c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD3_Pin;
 800483e:	2308      	movs	r3, #8
 8004840:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004842:	2301      	movs	r3, #1
 8004844:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004846:	2300      	movs	r3, #0
 8004848:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800484a:	2300      	movs	r3, #0
 800484c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800484e:	f107 030c 	add.w	r3, r7, #12
 8004852:	4619      	mov	r1, r3
 8004854:	4804      	ldr	r0, [pc, #16]	; (8004868 <MX_GPIO_Init+0xbc>)
 8004856:	f7fc fe71 	bl	800153c <HAL_GPIO_Init>

}
 800485a:	bf00      	nop
 800485c:	3720      	adds	r7, #32
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}
 8004862:	bf00      	nop
 8004864:	40021000 	.word	0x40021000
 8004868:	48000400 	.word	0x48000400

0800486c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8004870:	4b1b      	ldr	r3, [pc, #108]	; (80048e0 <MX_I2C1_Init+0x74>)
 8004872:	4a1c      	ldr	r2, [pc, #112]	; (80048e4 <MX_I2C1_Init+0x78>)
 8004874:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8004876:	4b1a      	ldr	r3, [pc, #104]	; (80048e0 <MX_I2C1_Init+0x74>)
 8004878:	4a1b      	ldr	r2, [pc, #108]	; (80048e8 <MX_I2C1_Init+0x7c>)
 800487a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800487c:	4b18      	ldr	r3, [pc, #96]	; (80048e0 <MX_I2C1_Init+0x74>)
 800487e:	2200      	movs	r2, #0
 8004880:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004882:	4b17      	ldr	r3, [pc, #92]	; (80048e0 <MX_I2C1_Init+0x74>)
 8004884:	2201      	movs	r2, #1
 8004886:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004888:	4b15      	ldr	r3, [pc, #84]	; (80048e0 <MX_I2C1_Init+0x74>)
 800488a:	2200      	movs	r2, #0
 800488c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800488e:	4b14      	ldr	r3, [pc, #80]	; (80048e0 <MX_I2C1_Init+0x74>)
 8004890:	2200      	movs	r2, #0
 8004892:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004894:	4b12      	ldr	r3, [pc, #72]	; (80048e0 <MX_I2C1_Init+0x74>)
 8004896:	2200      	movs	r2, #0
 8004898:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800489a:	4b11      	ldr	r3, [pc, #68]	; (80048e0 <MX_I2C1_Init+0x74>)
 800489c:	2200      	movs	r2, #0
 800489e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80048a0:	4b0f      	ldr	r3, [pc, #60]	; (80048e0 <MX_I2C1_Init+0x74>)
 80048a2:	2200      	movs	r2, #0
 80048a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80048a6:	480e      	ldr	r0, [pc, #56]	; (80048e0 <MX_I2C1_Init+0x74>)
 80048a8:	f7fc ffd6 	bl	8001858 <HAL_I2C_Init>
 80048ac:	4603      	mov	r3, r0
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d001      	beq.n	80048b6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80048b2:	f000 f996 	bl	8004be2 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80048b6:	2100      	movs	r1, #0
 80048b8:	4809      	ldr	r0, [pc, #36]	; (80048e0 <MX_I2C1_Init+0x74>)
 80048ba:	f7fd f85c 	bl	8001976 <HAL_I2CEx_ConfigAnalogFilter>
 80048be:	4603      	mov	r3, r0
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d001      	beq.n	80048c8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80048c4:	f000 f98d 	bl	8004be2 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80048c8:	2100      	movs	r1, #0
 80048ca:	4805      	ldr	r0, [pc, #20]	; (80048e0 <MX_I2C1_Init+0x74>)
 80048cc:	f7fd f89e 	bl	8001a0c <HAL_I2CEx_ConfigDigitalFilter>
 80048d0:	4603      	mov	r3, r0
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d001      	beq.n	80048da <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80048d6:	f000 f984 	bl	8004be2 <Error_Handler>
  }

}
 80048da:	bf00      	nop
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	bf00      	nop
 80048e0:	20000260 	.word	0x20000260
 80048e4:	40005400 	.word	0x40005400
 80048e8:	2000090e 	.word	0x2000090e

080048ec <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b08a      	sub	sp, #40	; 0x28
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048f4:	f107 0314 	add.w	r3, r7, #20
 80048f8:	2200      	movs	r2, #0
 80048fa:	601a      	str	r2, [r3, #0]
 80048fc:	605a      	str	r2, [r3, #4]
 80048fe:	609a      	str	r2, [r3, #8]
 8004900:	60da      	str	r2, [r3, #12]
 8004902:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a17      	ldr	r2, [pc, #92]	; (8004968 <HAL_I2C_MspInit+0x7c>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d127      	bne.n	800495e <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800490e:	4b17      	ldr	r3, [pc, #92]	; (800496c <HAL_I2C_MspInit+0x80>)
 8004910:	695b      	ldr	r3, [r3, #20]
 8004912:	4a16      	ldr	r2, [pc, #88]	; (800496c <HAL_I2C_MspInit+0x80>)
 8004914:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004918:	6153      	str	r3, [r2, #20]
 800491a:	4b14      	ldr	r3, [pc, #80]	; (800496c <HAL_I2C_MspInit+0x80>)
 800491c:	695b      	ldr	r3, [r3, #20]
 800491e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004922:	613b      	str	r3, [r7, #16]
 8004924:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004926:	23c0      	movs	r3, #192	; 0xc0
 8004928:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800492a:	2312      	movs	r3, #18
 800492c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800492e:	2301      	movs	r3, #1
 8004930:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004932:	2303      	movs	r3, #3
 8004934:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004936:	2304      	movs	r3, #4
 8004938:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800493a:	f107 0314 	add.w	r3, r7, #20
 800493e:	4619      	mov	r1, r3
 8004940:	480b      	ldr	r0, [pc, #44]	; (8004970 <HAL_I2C_MspInit+0x84>)
 8004942:	f7fc fdfb 	bl	800153c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004946:	4b09      	ldr	r3, [pc, #36]	; (800496c <HAL_I2C_MspInit+0x80>)
 8004948:	69db      	ldr	r3, [r3, #28]
 800494a:	4a08      	ldr	r2, [pc, #32]	; (800496c <HAL_I2C_MspInit+0x80>)
 800494c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004950:	61d3      	str	r3, [r2, #28]
 8004952:	4b06      	ldr	r3, [pc, #24]	; (800496c <HAL_I2C_MspInit+0x80>)
 8004954:	69db      	ldr	r3, [r3, #28]
 8004956:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800495a:	60fb      	str	r3, [r7, #12]
 800495c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800495e:	bf00      	nop
 8004960:	3728      	adds	r7, #40	; 0x28
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}
 8004966:	bf00      	nop
 8004968:	40005400 	.word	0x40005400
 800496c:	40021000 	.word	0x40021000
 8004970:	48000400 	.word	0x48000400

08004974 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int c) {
 8004974:	b580      	push	{r7, lr}
 8004976:	b084      	sub	sp, #16
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  if( c == '\n' ) {
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2b0a      	cmp	r3, #10
 8004980:	d108      	bne.n	8004994 <__io_putchar+0x20>
    int _c = '\r';
 8004982:	230d      	movs	r3, #13
 8004984:	60fb      	str	r3, [r7, #12]
    HAL_UART_Transmit(&huart2, &_c, 1, 1);
 8004986:	f107 010c 	add.w	r1, r7, #12
 800498a:	2301      	movs	r3, #1
 800498c:	2201      	movs	r2, #1
 800498e:	4807      	ldr	r0, [pc, #28]	; (80049ac <__io_putchar+0x38>)
 8004990:	f7ff f941 	bl	8003c16 <HAL_UART_Transmit>
  }
  HAL_UART_Transmit(&huart2, &c, 1, 1);
 8004994:	1d39      	adds	r1, r7, #4
 8004996:	2301      	movs	r3, #1
 8004998:	2201      	movs	r2, #1
 800499a:	4804      	ldr	r0, [pc, #16]	; (80049ac <__io_putchar+0x38>)
 800499c:	f7ff f93b 	bl	8003c16 <HAL_UART_Transmit>
  return 0;
 80049a0:	2300      	movs	r3, #0
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3710      	adds	r7, #16
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}
 80049aa:	bf00      	nop
 80049ac:	20000350 	.word	0x20000350

080049b0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80049b0:	b5b0      	push	{r4, r5, r7, lr}
 80049b2:	b082      	sub	sp, #8
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == htim6.Instance){
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	4b48      	ldr	r3, [pc, #288]	; (8004ae0 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	429a      	cmp	r2, r3
 80049c2:	f040 8084 	bne.w	8004ace <HAL_TIM_PeriodElapsedCallback+0x11e>
		omega_yaw = ReadGyroYaw() - gyro_base_yaw;
 80049c6:	f7ff fcfd 	bl	80043c4 <ReadGyroYaw>
 80049ca:	eeb0 7a40 	vmov.f32	s14, s0
 80049ce:	4b45      	ldr	r3, [pc, #276]	; (8004ae4 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80049d0:	edd3 7a00 	vldr	s15, [r3]
 80049d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80049d8:	4b43      	ldr	r3, [pc, #268]	; (8004ae8 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80049da:	edc3 7a00 	vstr	s15, [r3]
		omega_roll = ReadGyroRoll() - gyro_base_roll;
 80049de:	f7ff fd25 	bl	800442c <ReadGyroRoll>
 80049e2:	eeb0 7a40 	vmov.f32	s14, s0
 80049e6:	4b41      	ldr	r3, [pc, #260]	; (8004aec <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80049e8:	edd3 7a00 	vldr	s15, [r3]
 80049ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80049f0:	4b3f      	ldr	r3, [pc, #252]	; (8004af0 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80049f2:	edc3 7a00 	vstr	s15, [r3]
		omega_pitch = ReadGyroPitch() - gyro_base_pitch;
 80049f6:	f7ff fd4d 	bl	8004494 <ReadGyroPitch>
 80049fa:	eeb0 7a40 	vmov.f32	s14, s0
 80049fe:	4b3d      	ldr	r3, [pc, #244]	; (8004af4 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8004a00:	edd3 7a00 	vldr	s15, [r3]
 8004a04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a08:	4b3b      	ldr	r3, [pc, #236]	; (8004af8 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8004a0a:	edc3 7a00 	vstr	s15, [r3]

		angle_degree_yaw += omega_yaw * 0.001;
 8004a0e:	4b3b      	ldr	r3, [pc, #236]	; (8004afc <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4618      	mov	r0, r3
 8004a14:	f7fb fd98 	bl	8000548 <__aeabi_f2d>
 8004a18:	4604      	mov	r4, r0
 8004a1a:	460d      	mov	r5, r1
 8004a1c:	4b32      	ldr	r3, [pc, #200]	; (8004ae8 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4618      	mov	r0, r3
 8004a22:	f7fb fd91 	bl	8000548 <__aeabi_f2d>
 8004a26:	a32c      	add	r3, pc, #176	; (adr r3, 8004ad8 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8004a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a2c:	f7fb fde4 	bl	80005f8 <__aeabi_dmul>
 8004a30:	4602      	mov	r2, r0
 8004a32:	460b      	mov	r3, r1
 8004a34:	4620      	mov	r0, r4
 8004a36:	4629      	mov	r1, r5
 8004a38:	f7fb fc28 	bl	800028c <__adddf3>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	460c      	mov	r4, r1
 8004a40:	4618      	mov	r0, r3
 8004a42:	4621      	mov	r1, r4
 8004a44:	f7fc f8b0 	bl	8000ba8 <__aeabi_d2f>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	4b2c      	ldr	r3, [pc, #176]	; (8004afc <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8004a4c:	601a      	str	r2, [r3, #0]
		angle_degree_roll += omega_roll * 0.001;
 8004a4e:	4b2c      	ldr	r3, [pc, #176]	; (8004b00 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4618      	mov	r0, r3
 8004a54:	f7fb fd78 	bl	8000548 <__aeabi_f2d>
 8004a58:	4604      	mov	r4, r0
 8004a5a:	460d      	mov	r5, r1
 8004a5c:	4b24      	ldr	r3, [pc, #144]	; (8004af0 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4618      	mov	r0, r3
 8004a62:	f7fb fd71 	bl	8000548 <__aeabi_f2d>
 8004a66:	a31c      	add	r3, pc, #112	; (adr r3, 8004ad8 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8004a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a6c:	f7fb fdc4 	bl	80005f8 <__aeabi_dmul>
 8004a70:	4602      	mov	r2, r0
 8004a72:	460b      	mov	r3, r1
 8004a74:	4620      	mov	r0, r4
 8004a76:	4629      	mov	r1, r5
 8004a78:	f7fb fc08 	bl	800028c <__adddf3>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	460c      	mov	r4, r1
 8004a80:	4618      	mov	r0, r3
 8004a82:	4621      	mov	r1, r4
 8004a84:	f7fc f890 	bl	8000ba8 <__aeabi_d2f>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	4b1d      	ldr	r3, [pc, #116]	; (8004b00 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8004a8c:	601a      	str	r2, [r3, #0]
		angle_degree_pitch += omega_pitch * 0.001;
 8004a8e:	4b1d      	ldr	r3, [pc, #116]	; (8004b04 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4618      	mov	r0, r3
 8004a94:	f7fb fd58 	bl	8000548 <__aeabi_f2d>
 8004a98:	4604      	mov	r4, r0
 8004a9a:	460d      	mov	r5, r1
 8004a9c:	4b16      	ldr	r3, [pc, #88]	; (8004af8 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f7fb fd51 	bl	8000548 <__aeabi_f2d>
 8004aa6:	a30c      	add	r3, pc, #48	; (adr r3, 8004ad8 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8004aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aac:	f7fb fda4 	bl	80005f8 <__aeabi_dmul>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	460b      	mov	r3, r1
 8004ab4:	4620      	mov	r0, r4
 8004ab6:	4629      	mov	r1, r5
 8004ab8:	f7fb fbe8 	bl	800028c <__adddf3>
 8004abc:	4603      	mov	r3, r0
 8004abe:	460c      	mov	r4, r1
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	4621      	mov	r1, r4
 8004ac4:	f7fc f870 	bl	8000ba8 <__aeabi_d2f>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	4b0e      	ldr	r3, [pc, #56]	; (8004b04 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8004acc:	601a      	str	r2, [r3, #0]
	}	//---htim6 End---
}
 8004ace:	bf00      	nop
 8004ad0:	3708      	adds	r7, #8
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bdb0      	pop	{r4, r5, r7, pc}
 8004ad6:	bf00      	nop
 8004ad8:	d2f1a9fc 	.word	0xd2f1a9fc
 8004adc:	3f50624d 	.word	0x3f50624d
 8004ae0:	20000310 	.word	0x20000310
 8004ae4:	20000214 	.word	0x20000214
 8004ae8:	20000210 	.word	0x20000210
 8004aec:	20000220 	.word	0x20000220
 8004af0:	2000022c 	.word	0x2000022c
 8004af4:	20000234 	.word	0x20000234
 8004af8:	20000218 	.word	0x20000218
 8004afc:	2000021c 	.word	0x2000021c
 8004b00:	20000208 	.word	0x20000208
 8004b04:	20000224 	.word	0x20000224

08004b08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004b0c:	f7fc f89c 	bl	8000c48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004b10:	f000 f80f 	bl	8004b32 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004b14:	f7ff fe4a 	bl	80047ac <MX_GPIO_Init>
  MX_CAN_Init();
 8004b18:	f7ff fdce 	bl	80046b8 <MX_CAN_Init>
  MX_SPI1_Init();
 8004b1c:	f000 f868 	bl	8004bf0 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8004b20:	f000 fa82 	bl	8005028 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8004b24:	f7ff fea2 	bl	800486c <MX_I2C1_Init>
  MX_TIM6_Init();
 8004b28:	f000 fa22 	bl	8004f70 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  MainSystem();
 8004b2c:	f7ff fce6 	bl	80044fc <MainSystem>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004b30:	e7fe      	b.n	8004b30 <main+0x28>

08004b32 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004b32:	b580      	push	{r7, lr}
 8004b34:	b096      	sub	sp, #88	; 0x58
 8004b36:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004b38:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004b3c:	2228      	movs	r2, #40	; 0x28
 8004b3e:	2100      	movs	r1, #0
 8004b40:	4618      	mov	r0, r3
 8004b42:	f000 fb39 	bl	80051b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004b46:	f107 031c 	add.w	r3, r7, #28
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	601a      	str	r2, [r3, #0]
 8004b4e:	605a      	str	r2, [r3, #4]
 8004b50:	609a      	str	r2, [r3, #8]
 8004b52:	60da      	str	r2, [r3, #12]
 8004b54:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004b56:	1d3b      	adds	r3, r7, #4
 8004b58:	2200      	movs	r2, #0
 8004b5a:	601a      	str	r2, [r3, #0]
 8004b5c:	605a      	str	r2, [r3, #4]
 8004b5e:	609a      	str	r2, [r3, #8]
 8004b60:	60da      	str	r2, [r3, #12]
 8004b62:	611a      	str	r2, [r3, #16]
 8004b64:	615a      	str	r2, [r3, #20]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004b66:	2302      	movs	r3, #2
 8004b68:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004b6e:	2310      	movs	r3, #16
 8004b70:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004b72:	2302      	movs	r3, #2
 8004b74:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004b76:	2300      	movs	r3, #0
 8004b78:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8004b7a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8004b7e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004b80:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004b84:	4618      	mov	r0, r3
 8004b86:	f7fc ff8f 	bl	8001aa8 <HAL_RCC_OscConfig>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d001      	beq.n	8004b94 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8004b90:	f000 f827 	bl	8004be2 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004b94:	230f      	movs	r3, #15
 8004b96:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004b98:	2302      	movs	r3, #2
 8004b9a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004ba0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ba4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004baa:	f107 031c 	add.w	r3, r7, #28
 8004bae:	2102      	movs	r1, #2
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f7fd fe67 	bl	8002884 <HAL_RCC_ClockConfig>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d001      	beq.n	8004bc0 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8004bbc:	f000 f811 	bl	8004be2 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004bc0:	2320      	movs	r3, #32
 8004bc2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004bc8:	1d3b      	adds	r3, r7, #4
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f7fe f890 	bl	8002cf0 <HAL_RCCEx_PeriphCLKConfig>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d001      	beq.n	8004bda <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8004bd6:	f000 f804 	bl	8004be2 <Error_Handler>
  }
}
 8004bda:	bf00      	nop
 8004bdc:	3758      	adds	r7, #88	; 0x58
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}

08004be2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004be2:	b480      	push	{r7}
 8004be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004be6:	bf00      	nop
 8004be8:	46bd      	mov	sp, r7
 8004bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bee:	4770      	bx	lr

08004bf0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8004bf4:	4b1b      	ldr	r3, [pc, #108]	; (8004c64 <MX_SPI1_Init+0x74>)
 8004bf6:	4a1c      	ldr	r2, [pc, #112]	; (8004c68 <MX_SPI1_Init+0x78>)
 8004bf8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004bfa:	4b1a      	ldr	r3, [pc, #104]	; (8004c64 <MX_SPI1_Init+0x74>)
 8004bfc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004c00:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004c02:	4b18      	ldr	r3, [pc, #96]	; (8004c64 <MX_SPI1_Init+0x74>)
 8004c04:	2200      	movs	r2, #0
 8004c06:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004c08:	4b16      	ldr	r3, [pc, #88]	; (8004c64 <MX_SPI1_Init+0x74>)
 8004c0a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004c0e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8004c10:	4b14      	ldr	r3, [pc, #80]	; (8004c64 <MX_SPI1_Init+0x74>)
 8004c12:	2202      	movs	r2, #2
 8004c14:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8004c16:	4b13      	ldr	r3, [pc, #76]	; (8004c64 <MX_SPI1_Init+0x74>)
 8004c18:	2201      	movs	r2, #1
 8004c1a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004c1c:	4b11      	ldr	r3, [pc, #68]	; (8004c64 <MX_SPI1_Init+0x74>)
 8004c1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c22:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8004c24:	4b0f      	ldr	r3, [pc, #60]	; (8004c64 <MX_SPI1_Init+0x74>)
 8004c26:	2230      	movs	r2, #48	; 0x30
 8004c28:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004c2a:	4b0e      	ldr	r3, [pc, #56]	; (8004c64 <MX_SPI1_Init+0x74>)
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004c30:	4b0c      	ldr	r3, [pc, #48]	; (8004c64 <MX_SPI1_Init+0x74>)
 8004c32:	2200      	movs	r2, #0
 8004c34:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c36:	4b0b      	ldr	r3, [pc, #44]	; (8004c64 <MX_SPI1_Init+0x74>)
 8004c38:	2200      	movs	r2, #0
 8004c3a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8004c3c:	4b09      	ldr	r3, [pc, #36]	; (8004c64 <MX_SPI1_Init+0x74>)
 8004c3e:	2207      	movs	r2, #7
 8004c40:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004c42:	4b08      	ldr	r3, [pc, #32]	; (8004c64 <MX_SPI1_Init+0x74>)
 8004c44:	2200      	movs	r2, #0
 8004c46:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8004c48:	4b06      	ldr	r3, [pc, #24]	; (8004c64 <MX_SPI1_Init+0x74>)
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004c4e:	4805      	ldr	r0, [pc, #20]	; (8004c64 <MX_SPI1_Init+0x74>)
 8004c50:	f7fe f974 	bl	8002f3c <HAL_SPI_Init>
 8004c54:	4603      	mov	r3, r0
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d001      	beq.n	8004c5e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8004c5a:	f7ff ffc2 	bl	8004be2 <Error_Handler>
  }

}
 8004c5e:	bf00      	nop
 8004c60:	bd80      	pop	{r7, pc}
 8004c62:	bf00      	nop
 8004c64:	200002ac 	.word	0x200002ac
 8004c68:	40013000 	.word	0x40013000

08004c6c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b08a      	sub	sp, #40	; 0x28
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c74:	f107 0314 	add.w	r3, r7, #20
 8004c78:	2200      	movs	r2, #0
 8004c7a:	601a      	str	r2, [r3, #0]
 8004c7c:	605a      	str	r2, [r3, #4]
 8004c7e:	609a      	str	r2, [r3, #8]
 8004c80:	60da      	str	r2, [r3, #12]
 8004c82:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a17      	ldr	r2, [pc, #92]	; (8004ce8 <HAL_SPI_MspInit+0x7c>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d128      	bne.n	8004ce0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004c8e:	4b17      	ldr	r3, [pc, #92]	; (8004cec <HAL_SPI_MspInit+0x80>)
 8004c90:	699b      	ldr	r3, [r3, #24]
 8004c92:	4a16      	ldr	r2, [pc, #88]	; (8004cec <HAL_SPI_MspInit+0x80>)
 8004c94:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004c98:	6193      	str	r3, [r2, #24]
 8004c9a:	4b14      	ldr	r3, [pc, #80]	; (8004cec <HAL_SPI_MspInit+0x80>)
 8004c9c:	699b      	ldr	r3, [r3, #24]
 8004c9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ca2:	613b      	str	r3, [r7, #16]
 8004ca4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ca6:	4b11      	ldr	r3, [pc, #68]	; (8004cec <HAL_SPI_MspInit+0x80>)
 8004ca8:	695b      	ldr	r3, [r3, #20]
 8004caa:	4a10      	ldr	r2, [pc, #64]	; (8004cec <HAL_SPI_MspInit+0x80>)
 8004cac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cb0:	6153      	str	r3, [r2, #20]
 8004cb2:	4b0e      	ldr	r3, [pc, #56]	; (8004cec <HAL_SPI_MspInit+0x80>)
 8004cb4:	695b      	ldr	r3, [r3, #20]
 8004cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cba:	60fb      	str	r3, [r7, #12]
 8004cbc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004cbe:	23e0      	movs	r3, #224	; 0xe0
 8004cc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cc2:	2302      	movs	r3, #2
 8004cc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004cce:	2305      	movs	r3, #5
 8004cd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004cd2:	f107 0314 	add.w	r3, r7, #20
 8004cd6:	4619      	mov	r1, r3
 8004cd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004cdc:	f7fc fc2e 	bl	800153c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8004ce0:	bf00      	nop
 8004ce2:	3728      	adds	r7, #40	; 0x28
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}
 8004ce8:	40013000 	.word	0x40013000
 8004cec:	40021000 	.word	0x40021000

08004cf0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b083      	sub	sp, #12
 8004cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004cf6:	4b0f      	ldr	r3, [pc, #60]	; (8004d34 <HAL_MspInit+0x44>)
 8004cf8:	699b      	ldr	r3, [r3, #24]
 8004cfa:	4a0e      	ldr	r2, [pc, #56]	; (8004d34 <HAL_MspInit+0x44>)
 8004cfc:	f043 0301 	orr.w	r3, r3, #1
 8004d00:	6193      	str	r3, [r2, #24]
 8004d02:	4b0c      	ldr	r3, [pc, #48]	; (8004d34 <HAL_MspInit+0x44>)
 8004d04:	699b      	ldr	r3, [r3, #24]
 8004d06:	f003 0301 	and.w	r3, r3, #1
 8004d0a:	607b      	str	r3, [r7, #4]
 8004d0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004d0e:	4b09      	ldr	r3, [pc, #36]	; (8004d34 <HAL_MspInit+0x44>)
 8004d10:	69db      	ldr	r3, [r3, #28]
 8004d12:	4a08      	ldr	r2, [pc, #32]	; (8004d34 <HAL_MspInit+0x44>)
 8004d14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d18:	61d3      	str	r3, [r2, #28]
 8004d1a:	4b06      	ldr	r3, [pc, #24]	; (8004d34 <HAL_MspInit+0x44>)
 8004d1c:	69db      	ldr	r3, [r3, #28]
 8004d1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d22:	603b      	str	r3, [r7, #0]
 8004d24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004d26:	bf00      	nop
 8004d28:	370c      	adds	r7, #12
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr
 8004d32:	bf00      	nop
 8004d34:	40021000 	.word	0x40021000

08004d38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004d3c:	bf00      	nop
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d44:	4770      	bx	lr

08004d46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004d46:	b480      	push	{r7}
 8004d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004d4a:	e7fe      	b.n	8004d4a <HardFault_Handler+0x4>

08004d4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004d50:	e7fe      	b.n	8004d50 <MemManage_Handler+0x4>

08004d52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004d52:	b480      	push	{r7}
 8004d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004d56:	e7fe      	b.n	8004d56 <BusFault_Handler+0x4>

08004d58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004d5c:	e7fe      	b.n	8004d5c <UsageFault_Handler+0x4>

08004d5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004d5e:	b480      	push	{r7}
 8004d60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004d62:	bf00      	nop
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr

08004d6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004d70:	bf00      	nop
 8004d72:	46bd      	mov	sp, r7
 8004d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d78:	4770      	bx	lr

08004d7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004d7a:	b480      	push	{r7}
 8004d7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004d7e:	bf00      	nop
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr

08004d88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004d8c:	f7fb ffa2 	bl	8000cd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004d90:	bf00      	nop
 8004d92:	bd80      	pop	{r7, pc}

08004d94 <TIM6_DAC1_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC1 underrun error interrupts.
  */
void TIM6_DAC1_IRQHandler(void)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC1_IRQn 0 */

  /* USER CODE END TIM6_DAC1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004d98:	4802      	ldr	r0, [pc, #8]	; (8004da4 <TIM6_DAC1_IRQHandler+0x10>)
 8004d9a:	f7fe fcbd 	bl	8003718 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC1_IRQn 1 */

  /* USER CODE END TIM6_DAC1_IRQn 1 */
}
 8004d9e:	bf00      	nop
 8004da0:	bd80      	pop	{r7, pc}
 8004da2:	bf00      	nop
 8004da4:	20000310 	.word	0x20000310

08004da8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b086      	sub	sp, #24
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	60f8      	str	r0, [r7, #12]
 8004db0:	60b9      	str	r1, [r7, #8]
 8004db2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004db4:	2300      	movs	r3, #0
 8004db6:	617b      	str	r3, [r7, #20]
 8004db8:	e00a      	b.n	8004dd0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004dba:	f3af 8000 	nop.w
 8004dbe:	4601      	mov	r1, r0
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	1c5a      	adds	r2, r3, #1
 8004dc4:	60ba      	str	r2, [r7, #8]
 8004dc6:	b2ca      	uxtb	r2, r1
 8004dc8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	3301      	adds	r3, #1
 8004dce:	617b      	str	r3, [r7, #20]
 8004dd0:	697a      	ldr	r2, [r7, #20]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	dbf0      	blt.n	8004dba <_read+0x12>
	}

return len;
 8004dd8:	687b      	ldr	r3, [r7, #4]
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3718      	adds	r7, #24
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}

08004de2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004de2:	b580      	push	{r7, lr}
 8004de4:	b086      	sub	sp, #24
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	60f8      	str	r0, [r7, #12]
 8004dea:	60b9      	str	r1, [r7, #8]
 8004dec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004dee:	2300      	movs	r3, #0
 8004df0:	617b      	str	r3, [r7, #20]
 8004df2:	e009      	b.n	8004e08 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	1c5a      	adds	r2, r3, #1
 8004df8:	60ba      	str	r2, [r7, #8]
 8004dfa:	781b      	ldrb	r3, [r3, #0]
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f7ff fdb9 	bl	8004974 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	3301      	adds	r3, #1
 8004e06:	617b      	str	r3, [r7, #20]
 8004e08:	697a      	ldr	r2, [r7, #20]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	dbf1      	blt.n	8004df4 <_write+0x12>
	}
	return len;
 8004e10:	687b      	ldr	r3, [r7, #4]
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	3718      	adds	r7, #24
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}

08004e1a <_close>:

int _close(int file)
{
 8004e1a:	b480      	push	{r7}
 8004e1c:	b083      	sub	sp, #12
 8004e1e:	af00      	add	r7, sp, #0
 8004e20:	6078      	str	r0, [r7, #4]
	return -1;
 8004e22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	370c      	adds	r7, #12
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr

08004e32 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004e32:	b480      	push	{r7}
 8004e34:	b083      	sub	sp, #12
 8004e36:	af00      	add	r7, sp, #0
 8004e38:	6078      	str	r0, [r7, #4]
 8004e3a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004e42:	605a      	str	r2, [r3, #4]
	return 0;
 8004e44:	2300      	movs	r3, #0
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	370c      	adds	r7, #12
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr

08004e52 <_isatty>:

int _isatty(int file)
{
 8004e52:	b480      	push	{r7}
 8004e54:	b083      	sub	sp, #12
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	6078      	str	r0, [r7, #4]
	return 1;
 8004e5a:	2301      	movs	r3, #1
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	370c      	adds	r7, #12
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr

08004e68 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b085      	sub	sp, #20
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	60f8      	str	r0, [r7, #12]
 8004e70:	60b9      	str	r1, [r7, #8]
 8004e72:	607a      	str	r2, [r7, #4]
	return 0;
 8004e74:	2300      	movs	r3, #0
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3714      	adds	r7, #20
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr
	...

08004e84 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b084      	sub	sp, #16
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004e8c:	4b11      	ldr	r3, [pc, #68]	; (8004ed4 <_sbrk+0x50>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d102      	bne.n	8004e9a <_sbrk+0x16>
		heap_end = &end;
 8004e94:	4b0f      	ldr	r3, [pc, #60]	; (8004ed4 <_sbrk+0x50>)
 8004e96:	4a10      	ldr	r2, [pc, #64]	; (8004ed8 <_sbrk+0x54>)
 8004e98:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8004e9a:	4b0e      	ldr	r3, [pc, #56]	; (8004ed4 <_sbrk+0x50>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004ea0:	4b0c      	ldr	r3, [pc, #48]	; (8004ed4 <_sbrk+0x50>)
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	4413      	add	r3, r2
 8004ea8:	466a      	mov	r2, sp
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d907      	bls.n	8004ebe <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8004eae:	f000 f959 	bl	8005164 <__errno>
 8004eb2:	4602      	mov	r2, r0
 8004eb4:	230c      	movs	r3, #12
 8004eb6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8004eb8:	f04f 33ff 	mov.w	r3, #4294967295
 8004ebc:	e006      	b.n	8004ecc <_sbrk+0x48>
	}

	heap_end += incr;
 8004ebe:	4b05      	ldr	r3, [pc, #20]	; (8004ed4 <_sbrk+0x50>)
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	4413      	add	r3, r2
 8004ec6:	4a03      	ldr	r2, [pc, #12]	; (8004ed4 <_sbrk+0x50>)
 8004ec8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8004eca:	68fb      	ldr	r3, [r7, #12]
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3710      	adds	r7, #16
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}
 8004ed4:	200001f8 	.word	0x200001f8
 8004ed8:	200003c8 	.word	0x200003c8

08004edc <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004edc:	b480      	push	{r7}
 8004ede:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004ee0:	4b1f      	ldr	r3, [pc, #124]	; (8004f60 <SystemInit+0x84>)
 8004ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ee6:	4a1e      	ldr	r2, [pc, #120]	; (8004f60 <SystemInit+0x84>)
 8004ee8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004eec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8004ef0:	4b1c      	ldr	r3, [pc, #112]	; (8004f64 <SystemInit+0x88>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a1b      	ldr	r2, [pc, #108]	; (8004f64 <SystemInit+0x88>)
 8004ef6:	f043 0301 	orr.w	r3, r3, #1
 8004efa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8004efc:	4b19      	ldr	r3, [pc, #100]	; (8004f64 <SystemInit+0x88>)
 8004efe:	685a      	ldr	r2, [r3, #4]
 8004f00:	4918      	ldr	r1, [pc, #96]	; (8004f64 <SystemInit+0x88>)
 8004f02:	4b19      	ldr	r3, [pc, #100]	; (8004f68 <SystemInit+0x8c>)
 8004f04:	4013      	ands	r3, r2
 8004f06:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8004f08:	4b16      	ldr	r3, [pc, #88]	; (8004f64 <SystemInit+0x88>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a15      	ldr	r2, [pc, #84]	; (8004f64 <SystemInit+0x88>)
 8004f0e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8004f12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f16:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004f18:	4b12      	ldr	r3, [pc, #72]	; (8004f64 <SystemInit+0x88>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a11      	ldr	r2, [pc, #68]	; (8004f64 <SystemInit+0x88>)
 8004f1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f22:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8004f24:	4b0f      	ldr	r3, [pc, #60]	; (8004f64 <SystemInit+0x88>)
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	4a0e      	ldr	r2, [pc, #56]	; (8004f64 <SystemInit+0x88>)
 8004f2a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8004f2e:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8004f30:	4b0c      	ldr	r3, [pc, #48]	; (8004f64 <SystemInit+0x88>)
 8004f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f34:	4a0b      	ldr	r2, [pc, #44]	; (8004f64 <SystemInit+0x88>)
 8004f36:	f023 030f 	bic.w	r3, r3, #15
 8004f3a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8004f3c:	4b09      	ldr	r3, [pc, #36]	; (8004f64 <SystemInit+0x88>)
 8004f3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f40:	4908      	ldr	r1, [pc, #32]	; (8004f64 <SystemInit+0x88>)
 8004f42:	4b0a      	ldr	r3, [pc, #40]	; (8004f6c <SystemInit+0x90>)
 8004f44:	4013      	ands	r3, r2
 8004f46:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8004f48:	4b06      	ldr	r3, [pc, #24]	; (8004f64 <SystemInit+0x88>)
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004f4e:	4b04      	ldr	r3, [pc, #16]	; (8004f60 <SystemInit+0x84>)
 8004f50:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004f54:	609a      	str	r2, [r3, #8]
#endif
}
 8004f56:	bf00      	nop
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr
 8004f60:	e000ed00 	.word	0xe000ed00
 8004f64:	40021000 	.word	0x40021000
 8004f68:	f87fc00c 	.word	0xf87fc00c
 8004f6c:	ff00fccc 	.word	0xff00fccc

08004f70 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b084      	sub	sp, #16
 8004f74:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004f76:	1d3b      	adds	r3, r7, #4
 8004f78:	2200      	movs	r2, #0
 8004f7a:	601a      	str	r2, [r3, #0]
 8004f7c:	605a      	str	r2, [r3, #4]
 8004f7e:	609a      	str	r2, [r3, #8]

  htim6.Instance = TIM6;
 8004f80:	4b14      	ldr	r3, [pc, #80]	; (8004fd4 <MX_TIM6_Init+0x64>)
 8004f82:	4a15      	ldr	r2, [pc, #84]	; (8004fd8 <MX_TIM6_Init+0x68>)
 8004f84:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 64-1;
 8004f86:	4b13      	ldr	r3, [pc, #76]	; (8004fd4 <MX_TIM6_Init+0x64>)
 8004f88:	223f      	movs	r2, #63	; 0x3f
 8004f8a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f8c:	4b11      	ldr	r3, [pc, #68]	; (8004fd4 <MX_TIM6_Init+0x64>)
 8004f8e:	2200      	movs	r2, #0
 8004f90:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 8004f92:	4b10      	ldr	r3, [pc, #64]	; (8004fd4 <MX_TIM6_Init+0x64>)
 8004f94:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004f98:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004f9a:	4b0e      	ldr	r3, [pc, #56]	; (8004fd4 <MX_TIM6_Init+0x64>)
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004fa0:	480c      	ldr	r0, [pc, #48]	; (8004fd4 <MX_TIM6_Init+0x64>)
 8004fa2:	f7fe fb73 	bl	800368c <HAL_TIM_Base_Init>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d001      	beq.n	8004fb0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8004fac:	f7ff fe19 	bl	8004be2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004fb8:	1d3b      	adds	r3, r7, #4
 8004fba:	4619      	mov	r1, r3
 8004fbc:	4805      	ldr	r0, [pc, #20]	; (8004fd4 <MX_TIM6_Init+0x64>)
 8004fbe:	f7fe fd6d 	bl	8003a9c <HAL_TIMEx_MasterConfigSynchronization>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d001      	beq.n	8004fcc <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8004fc8:	f7ff fe0b 	bl	8004be2 <Error_Handler>
  }

}
 8004fcc:	bf00      	nop
 8004fce:	3710      	adds	r7, #16
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}
 8004fd4:	20000310 	.word	0x20000310
 8004fd8:	40001000 	.word	0x40001000

08004fdc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b084      	sub	sp, #16
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a0d      	ldr	r2, [pc, #52]	; (8005020 <HAL_TIM_Base_MspInit+0x44>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d113      	bne.n	8005016 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004fee:	4b0d      	ldr	r3, [pc, #52]	; (8005024 <HAL_TIM_Base_MspInit+0x48>)
 8004ff0:	69db      	ldr	r3, [r3, #28]
 8004ff2:	4a0c      	ldr	r2, [pc, #48]	; (8005024 <HAL_TIM_Base_MspInit+0x48>)
 8004ff4:	f043 0310 	orr.w	r3, r3, #16
 8004ff8:	61d3      	str	r3, [r2, #28]
 8004ffa:	4b0a      	ldr	r3, [pc, #40]	; (8005024 <HAL_TIM_Base_MspInit+0x48>)
 8004ffc:	69db      	ldr	r3, [r3, #28]
 8004ffe:	f003 0310 	and.w	r3, r3, #16
 8005002:	60fb      	str	r3, [r7, #12]
 8005004:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, 1, 0);
 8005006:	2200      	movs	r2, #0
 8005008:	2101      	movs	r1, #1
 800500a:	2036      	movs	r0, #54	; 0x36
 800500c:	f7fc fa5f 	bl	80014ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 8005010:	2036      	movs	r0, #54	; 0x36
 8005012:	f7fc fa78 	bl	8001506 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8005016:	bf00      	nop
 8005018:	3710      	adds	r7, #16
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}
 800501e:	bf00      	nop
 8005020:	40001000 	.word	0x40001000
 8005024:	40021000 	.word	0x40021000

08005028 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 800502c:	4b14      	ldr	r3, [pc, #80]	; (8005080 <MX_USART2_UART_Init+0x58>)
 800502e:	4a15      	ldr	r2, [pc, #84]	; (8005084 <MX_USART2_UART_Init+0x5c>)
 8005030:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8005032:	4b13      	ldr	r3, [pc, #76]	; (8005080 <MX_USART2_UART_Init+0x58>)
 8005034:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8005038:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800503a:	4b11      	ldr	r3, [pc, #68]	; (8005080 <MX_USART2_UART_Init+0x58>)
 800503c:	2200      	movs	r2, #0
 800503e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005040:	4b0f      	ldr	r3, [pc, #60]	; (8005080 <MX_USART2_UART_Init+0x58>)
 8005042:	2200      	movs	r2, #0
 8005044:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005046:	4b0e      	ldr	r3, [pc, #56]	; (8005080 <MX_USART2_UART_Init+0x58>)
 8005048:	2200      	movs	r2, #0
 800504a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800504c:	4b0c      	ldr	r3, [pc, #48]	; (8005080 <MX_USART2_UART_Init+0x58>)
 800504e:	220c      	movs	r2, #12
 8005050:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005052:	4b0b      	ldr	r3, [pc, #44]	; (8005080 <MX_USART2_UART_Init+0x58>)
 8005054:	2200      	movs	r2, #0
 8005056:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005058:	4b09      	ldr	r3, [pc, #36]	; (8005080 <MX_USART2_UART_Init+0x58>)
 800505a:	2200      	movs	r2, #0
 800505c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800505e:	4b08      	ldr	r3, [pc, #32]	; (8005080 <MX_USART2_UART_Init+0x58>)
 8005060:	2200      	movs	r2, #0
 8005062:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005064:	4b06      	ldr	r3, [pc, #24]	; (8005080 <MX_USART2_UART_Init+0x58>)
 8005066:	2200      	movs	r2, #0
 8005068:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800506a:	4805      	ldr	r0, [pc, #20]	; (8005080 <MX_USART2_UART_Init+0x58>)
 800506c:	f7fe fd82 	bl	8003b74 <HAL_UART_Init>
 8005070:	4603      	mov	r3, r0
 8005072:	2b00      	cmp	r3, #0
 8005074:	d001      	beq.n	800507a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8005076:	f7ff fdb4 	bl	8004be2 <Error_Handler>
  }

}
 800507a:	bf00      	nop
 800507c:	bd80      	pop	{r7, pc}
 800507e:	bf00      	nop
 8005080:	20000350 	.word	0x20000350
 8005084:	40004400 	.word	0x40004400

08005088 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b08a      	sub	sp, #40	; 0x28
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005090:	f107 0314 	add.w	r3, r7, #20
 8005094:	2200      	movs	r2, #0
 8005096:	601a      	str	r2, [r3, #0]
 8005098:	605a      	str	r2, [r3, #4]
 800509a:	609a      	str	r2, [r3, #8]
 800509c:	60da      	str	r2, [r3, #12]
 800509e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a18      	ldr	r2, [pc, #96]	; (8005108 <HAL_UART_MspInit+0x80>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d129      	bne.n	80050fe <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80050aa:	4b18      	ldr	r3, [pc, #96]	; (800510c <HAL_UART_MspInit+0x84>)
 80050ac:	69db      	ldr	r3, [r3, #28]
 80050ae:	4a17      	ldr	r2, [pc, #92]	; (800510c <HAL_UART_MspInit+0x84>)
 80050b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050b4:	61d3      	str	r3, [r2, #28]
 80050b6:	4b15      	ldr	r3, [pc, #84]	; (800510c <HAL_UART_MspInit+0x84>)
 80050b8:	69db      	ldr	r3, [r3, #28]
 80050ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050be:	613b      	str	r3, [r7, #16]
 80050c0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80050c2:	4b12      	ldr	r3, [pc, #72]	; (800510c <HAL_UART_MspInit+0x84>)
 80050c4:	695b      	ldr	r3, [r3, #20]
 80050c6:	4a11      	ldr	r2, [pc, #68]	; (800510c <HAL_UART_MspInit+0x84>)
 80050c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050cc:	6153      	str	r3, [r2, #20]
 80050ce:	4b0f      	ldr	r3, [pc, #60]	; (800510c <HAL_UART_MspInit+0x84>)
 80050d0:	695b      	ldr	r3, [r3, #20]
 80050d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050d6:	60fb      	str	r3, [r7, #12]
 80050d8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80050da:	f248 0304 	movw	r3, #32772	; 0x8004
 80050de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050e0:	2302      	movs	r3, #2
 80050e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050e4:	2300      	movs	r3, #0
 80050e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80050e8:	2303      	movs	r3, #3
 80050ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80050ec:	2307      	movs	r3, #7
 80050ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050f0:	f107 0314 	add.w	r3, r7, #20
 80050f4:	4619      	mov	r1, r3
 80050f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80050fa:	f7fc fa1f 	bl	800153c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80050fe:	bf00      	nop
 8005100:	3728      	adds	r7, #40	; 0x28
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}
 8005106:	bf00      	nop
 8005108:	40004400 	.word	0x40004400
 800510c:	40021000 	.word	0x40021000

08005110 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005110:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005148 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8005114:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8005116:	e003      	b.n	8005120 <LoopCopyDataInit>

08005118 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8005118:	4b0c      	ldr	r3, [pc, #48]	; (800514c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800511a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800511c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800511e:	3104      	adds	r1, #4

08005120 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8005120:	480b      	ldr	r0, [pc, #44]	; (8005150 <LoopForever+0xa>)
	ldr	r3, =_edata
 8005122:	4b0c      	ldr	r3, [pc, #48]	; (8005154 <LoopForever+0xe>)
	adds	r2, r0, r1
 8005124:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8005126:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8005128:	d3f6      	bcc.n	8005118 <CopyDataInit>
	ldr	r2, =_sbss
 800512a:	4a0b      	ldr	r2, [pc, #44]	; (8005158 <LoopForever+0x12>)
	b	LoopFillZerobss
 800512c:	e002      	b.n	8005134 <LoopFillZerobss>

0800512e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800512e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8005130:	f842 3b04 	str.w	r3, [r2], #4

08005134 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8005134:	4b09      	ldr	r3, [pc, #36]	; (800515c <LoopForever+0x16>)
	cmp	r2, r3
 8005136:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8005138:	d3f9      	bcc.n	800512e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800513a:	f7ff fecf 	bl	8004edc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800513e:	f000 f817 	bl	8005170 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005142:	f7ff fce1 	bl	8004b08 <main>

08005146 <LoopForever>:

LoopForever:
    b LoopForever
 8005146:	e7fe      	b.n	8005146 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005148:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 800514c:	08007c80 	.word	0x08007c80
	ldr	r0, =_sdata
 8005150:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8005154:	200001dc 	.word	0x200001dc
	ldr	r2, =_sbss
 8005158:	200001dc 	.word	0x200001dc
	ldr	r3, = _ebss
 800515c:	200003c4 	.word	0x200003c4

08005160 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005160:	e7fe      	b.n	8005160 <ADC1_2_IRQHandler>
	...

08005164 <__errno>:
 8005164:	4b01      	ldr	r3, [pc, #4]	; (800516c <__errno+0x8>)
 8005166:	6818      	ldr	r0, [r3, #0]
 8005168:	4770      	bx	lr
 800516a:	bf00      	nop
 800516c:	2000000c 	.word	0x2000000c

08005170 <__libc_init_array>:
 8005170:	b570      	push	{r4, r5, r6, lr}
 8005172:	4e0d      	ldr	r6, [pc, #52]	; (80051a8 <__libc_init_array+0x38>)
 8005174:	4c0d      	ldr	r4, [pc, #52]	; (80051ac <__libc_init_array+0x3c>)
 8005176:	1ba4      	subs	r4, r4, r6
 8005178:	10a4      	asrs	r4, r4, #2
 800517a:	2500      	movs	r5, #0
 800517c:	42a5      	cmp	r5, r4
 800517e:	d109      	bne.n	8005194 <__libc_init_array+0x24>
 8005180:	4e0b      	ldr	r6, [pc, #44]	; (80051b0 <__libc_init_array+0x40>)
 8005182:	4c0c      	ldr	r4, [pc, #48]	; (80051b4 <__libc_init_array+0x44>)
 8005184:	f002 fbaa 	bl	80078dc <_init>
 8005188:	1ba4      	subs	r4, r4, r6
 800518a:	10a4      	asrs	r4, r4, #2
 800518c:	2500      	movs	r5, #0
 800518e:	42a5      	cmp	r5, r4
 8005190:	d105      	bne.n	800519e <__libc_init_array+0x2e>
 8005192:	bd70      	pop	{r4, r5, r6, pc}
 8005194:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005198:	4798      	blx	r3
 800519a:	3501      	adds	r5, #1
 800519c:	e7ee      	b.n	800517c <__libc_init_array+0xc>
 800519e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80051a2:	4798      	blx	r3
 80051a4:	3501      	adds	r5, #1
 80051a6:	e7f2      	b.n	800518e <__libc_init_array+0x1e>
 80051a8:	08007c78 	.word	0x08007c78
 80051ac:	08007c78 	.word	0x08007c78
 80051b0:	08007c78 	.word	0x08007c78
 80051b4:	08007c7c 	.word	0x08007c7c

080051b8 <memset>:
 80051b8:	4402      	add	r2, r0
 80051ba:	4603      	mov	r3, r0
 80051bc:	4293      	cmp	r3, r2
 80051be:	d100      	bne.n	80051c2 <memset+0xa>
 80051c0:	4770      	bx	lr
 80051c2:	f803 1b01 	strb.w	r1, [r3], #1
 80051c6:	e7f9      	b.n	80051bc <memset+0x4>

080051c8 <__cvt>:
 80051c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80051cc:	ec55 4b10 	vmov	r4, r5, d0
 80051d0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80051d2:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80051d6:	2d00      	cmp	r5, #0
 80051d8:	460e      	mov	r6, r1
 80051da:	4691      	mov	r9, r2
 80051dc:	4619      	mov	r1, r3
 80051de:	bfb8      	it	lt
 80051e0:	4622      	movlt	r2, r4
 80051e2:	462b      	mov	r3, r5
 80051e4:	f027 0720 	bic.w	r7, r7, #32
 80051e8:	bfbb      	ittet	lt
 80051ea:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80051ee:	461d      	movlt	r5, r3
 80051f0:	2300      	movge	r3, #0
 80051f2:	232d      	movlt	r3, #45	; 0x2d
 80051f4:	bfb8      	it	lt
 80051f6:	4614      	movlt	r4, r2
 80051f8:	2f46      	cmp	r7, #70	; 0x46
 80051fa:	700b      	strb	r3, [r1, #0]
 80051fc:	d004      	beq.n	8005208 <__cvt+0x40>
 80051fe:	2f45      	cmp	r7, #69	; 0x45
 8005200:	d100      	bne.n	8005204 <__cvt+0x3c>
 8005202:	3601      	adds	r6, #1
 8005204:	2102      	movs	r1, #2
 8005206:	e000      	b.n	800520a <__cvt+0x42>
 8005208:	2103      	movs	r1, #3
 800520a:	ab03      	add	r3, sp, #12
 800520c:	9301      	str	r3, [sp, #4]
 800520e:	ab02      	add	r3, sp, #8
 8005210:	9300      	str	r3, [sp, #0]
 8005212:	4632      	mov	r2, r6
 8005214:	4653      	mov	r3, sl
 8005216:	ec45 4b10 	vmov	d0, r4, r5
 800521a:	f000 fdf9 	bl	8005e10 <_dtoa_r>
 800521e:	2f47      	cmp	r7, #71	; 0x47
 8005220:	4680      	mov	r8, r0
 8005222:	d102      	bne.n	800522a <__cvt+0x62>
 8005224:	f019 0f01 	tst.w	r9, #1
 8005228:	d026      	beq.n	8005278 <__cvt+0xb0>
 800522a:	2f46      	cmp	r7, #70	; 0x46
 800522c:	eb08 0906 	add.w	r9, r8, r6
 8005230:	d111      	bne.n	8005256 <__cvt+0x8e>
 8005232:	f898 3000 	ldrb.w	r3, [r8]
 8005236:	2b30      	cmp	r3, #48	; 0x30
 8005238:	d10a      	bne.n	8005250 <__cvt+0x88>
 800523a:	2200      	movs	r2, #0
 800523c:	2300      	movs	r3, #0
 800523e:	4620      	mov	r0, r4
 8005240:	4629      	mov	r1, r5
 8005242:	f7fb fc41 	bl	8000ac8 <__aeabi_dcmpeq>
 8005246:	b918      	cbnz	r0, 8005250 <__cvt+0x88>
 8005248:	f1c6 0601 	rsb	r6, r6, #1
 800524c:	f8ca 6000 	str.w	r6, [sl]
 8005250:	f8da 3000 	ldr.w	r3, [sl]
 8005254:	4499      	add	r9, r3
 8005256:	2200      	movs	r2, #0
 8005258:	2300      	movs	r3, #0
 800525a:	4620      	mov	r0, r4
 800525c:	4629      	mov	r1, r5
 800525e:	f7fb fc33 	bl	8000ac8 <__aeabi_dcmpeq>
 8005262:	b938      	cbnz	r0, 8005274 <__cvt+0xac>
 8005264:	2230      	movs	r2, #48	; 0x30
 8005266:	9b03      	ldr	r3, [sp, #12]
 8005268:	454b      	cmp	r3, r9
 800526a:	d205      	bcs.n	8005278 <__cvt+0xb0>
 800526c:	1c59      	adds	r1, r3, #1
 800526e:	9103      	str	r1, [sp, #12]
 8005270:	701a      	strb	r2, [r3, #0]
 8005272:	e7f8      	b.n	8005266 <__cvt+0x9e>
 8005274:	f8cd 900c 	str.w	r9, [sp, #12]
 8005278:	9b03      	ldr	r3, [sp, #12]
 800527a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800527c:	eba3 0308 	sub.w	r3, r3, r8
 8005280:	4640      	mov	r0, r8
 8005282:	6013      	str	r3, [r2, #0]
 8005284:	b004      	add	sp, #16
 8005286:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800528a <__exponent>:
 800528a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800528c:	2900      	cmp	r1, #0
 800528e:	4604      	mov	r4, r0
 8005290:	bfba      	itte	lt
 8005292:	4249      	neglt	r1, r1
 8005294:	232d      	movlt	r3, #45	; 0x2d
 8005296:	232b      	movge	r3, #43	; 0x2b
 8005298:	2909      	cmp	r1, #9
 800529a:	f804 2b02 	strb.w	r2, [r4], #2
 800529e:	7043      	strb	r3, [r0, #1]
 80052a0:	dd20      	ble.n	80052e4 <__exponent+0x5a>
 80052a2:	f10d 0307 	add.w	r3, sp, #7
 80052a6:	461f      	mov	r7, r3
 80052a8:	260a      	movs	r6, #10
 80052aa:	fb91 f5f6 	sdiv	r5, r1, r6
 80052ae:	fb06 1115 	mls	r1, r6, r5, r1
 80052b2:	3130      	adds	r1, #48	; 0x30
 80052b4:	2d09      	cmp	r5, #9
 80052b6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80052ba:	f103 32ff 	add.w	r2, r3, #4294967295
 80052be:	4629      	mov	r1, r5
 80052c0:	dc09      	bgt.n	80052d6 <__exponent+0x4c>
 80052c2:	3130      	adds	r1, #48	; 0x30
 80052c4:	3b02      	subs	r3, #2
 80052c6:	f802 1c01 	strb.w	r1, [r2, #-1]
 80052ca:	42bb      	cmp	r3, r7
 80052cc:	4622      	mov	r2, r4
 80052ce:	d304      	bcc.n	80052da <__exponent+0x50>
 80052d0:	1a10      	subs	r0, r2, r0
 80052d2:	b003      	add	sp, #12
 80052d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052d6:	4613      	mov	r3, r2
 80052d8:	e7e7      	b.n	80052aa <__exponent+0x20>
 80052da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80052de:	f804 2b01 	strb.w	r2, [r4], #1
 80052e2:	e7f2      	b.n	80052ca <__exponent+0x40>
 80052e4:	2330      	movs	r3, #48	; 0x30
 80052e6:	4419      	add	r1, r3
 80052e8:	7083      	strb	r3, [r0, #2]
 80052ea:	1d02      	adds	r2, r0, #4
 80052ec:	70c1      	strb	r1, [r0, #3]
 80052ee:	e7ef      	b.n	80052d0 <__exponent+0x46>

080052f0 <_printf_float>:
 80052f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052f4:	b08d      	sub	sp, #52	; 0x34
 80052f6:	460c      	mov	r4, r1
 80052f8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80052fc:	4616      	mov	r6, r2
 80052fe:	461f      	mov	r7, r3
 8005300:	4605      	mov	r5, r0
 8005302:	f001 fcb7 	bl	8006c74 <_localeconv_r>
 8005306:	6803      	ldr	r3, [r0, #0]
 8005308:	9304      	str	r3, [sp, #16]
 800530a:	4618      	mov	r0, r3
 800530c:	f7fa ff60 	bl	80001d0 <strlen>
 8005310:	2300      	movs	r3, #0
 8005312:	930a      	str	r3, [sp, #40]	; 0x28
 8005314:	f8d8 3000 	ldr.w	r3, [r8]
 8005318:	9005      	str	r0, [sp, #20]
 800531a:	3307      	adds	r3, #7
 800531c:	f023 0307 	bic.w	r3, r3, #7
 8005320:	f103 0208 	add.w	r2, r3, #8
 8005324:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005328:	f8d4 b000 	ldr.w	fp, [r4]
 800532c:	f8c8 2000 	str.w	r2, [r8]
 8005330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005334:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005338:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800533c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005340:	9307      	str	r3, [sp, #28]
 8005342:	f8cd 8018 	str.w	r8, [sp, #24]
 8005346:	f04f 32ff 	mov.w	r2, #4294967295
 800534a:	4ba7      	ldr	r3, [pc, #668]	; (80055e8 <_printf_float+0x2f8>)
 800534c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005350:	f7fb fbec 	bl	8000b2c <__aeabi_dcmpun>
 8005354:	bb70      	cbnz	r0, 80053b4 <_printf_float+0xc4>
 8005356:	f04f 32ff 	mov.w	r2, #4294967295
 800535a:	4ba3      	ldr	r3, [pc, #652]	; (80055e8 <_printf_float+0x2f8>)
 800535c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005360:	f7fb fbc6 	bl	8000af0 <__aeabi_dcmple>
 8005364:	bb30      	cbnz	r0, 80053b4 <_printf_float+0xc4>
 8005366:	2200      	movs	r2, #0
 8005368:	2300      	movs	r3, #0
 800536a:	4640      	mov	r0, r8
 800536c:	4649      	mov	r1, r9
 800536e:	f7fb fbb5 	bl	8000adc <__aeabi_dcmplt>
 8005372:	b110      	cbz	r0, 800537a <_printf_float+0x8a>
 8005374:	232d      	movs	r3, #45	; 0x2d
 8005376:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800537a:	4a9c      	ldr	r2, [pc, #624]	; (80055ec <_printf_float+0x2fc>)
 800537c:	4b9c      	ldr	r3, [pc, #624]	; (80055f0 <_printf_float+0x300>)
 800537e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8005382:	bf8c      	ite	hi
 8005384:	4690      	movhi	r8, r2
 8005386:	4698      	movls	r8, r3
 8005388:	2303      	movs	r3, #3
 800538a:	f02b 0204 	bic.w	r2, fp, #4
 800538e:	6123      	str	r3, [r4, #16]
 8005390:	6022      	str	r2, [r4, #0]
 8005392:	f04f 0900 	mov.w	r9, #0
 8005396:	9700      	str	r7, [sp, #0]
 8005398:	4633      	mov	r3, r6
 800539a:	aa0b      	add	r2, sp, #44	; 0x2c
 800539c:	4621      	mov	r1, r4
 800539e:	4628      	mov	r0, r5
 80053a0:	f000 f9e6 	bl	8005770 <_printf_common>
 80053a4:	3001      	adds	r0, #1
 80053a6:	f040 808d 	bne.w	80054c4 <_printf_float+0x1d4>
 80053aa:	f04f 30ff 	mov.w	r0, #4294967295
 80053ae:	b00d      	add	sp, #52	; 0x34
 80053b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053b4:	4642      	mov	r2, r8
 80053b6:	464b      	mov	r3, r9
 80053b8:	4640      	mov	r0, r8
 80053ba:	4649      	mov	r1, r9
 80053bc:	f7fb fbb6 	bl	8000b2c <__aeabi_dcmpun>
 80053c0:	b110      	cbz	r0, 80053c8 <_printf_float+0xd8>
 80053c2:	4a8c      	ldr	r2, [pc, #560]	; (80055f4 <_printf_float+0x304>)
 80053c4:	4b8c      	ldr	r3, [pc, #560]	; (80055f8 <_printf_float+0x308>)
 80053c6:	e7da      	b.n	800537e <_printf_float+0x8e>
 80053c8:	6861      	ldr	r1, [r4, #4]
 80053ca:	1c4b      	adds	r3, r1, #1
 80053cc:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80053d0:	a80a      	add	r0, sp, #40	; 0x28
 80053d2:	d13e      	bne.n	8005452 <_printf_float+0x162>
 80053d4:	2306      	movs	r3, #6
 80053d6:	6063      	str	r3, [r4, #4]
 80053d8:	2300      	movs	r3, #0
 80053da:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80053de:	ab09      	add	r3, sp, #36	; 0x24
 80053e0:	9300      	str	r3, [sp, #0]
 80053e2:	ec49 8b10 	vmov	d0, r8, r9
 80053e6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80053ea:	6022      	str	r2, [r4, #0]
 80053ec:	f8cd a004 	str.w	sl, [sp, #4]
 80053f0:	6861      	ldr	r1, [r4, #4]
 80053f2:	4628      	mov	r0, r5
 80053f4:	f7ff fee8 	bl	80051c8 <__cvt>
 80053f8:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80053fc:	2b47      	cmp	r3, #71	; 0x47
 80053fe:	4680      	mov	r8, r0
 8005400:	d109      	bne.n	8005416 <_printf_float+0x126>
 8005402:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005404:	1cd8      	adds	r0, r3, #3
 8005406:	db02      	blt.n	800540e <_printf_float+0x11e>
 8005408:	6862      	ldr	r2, [r4, #4]
 800540a:	4293      	cmp	r3, r2
 800540c:	dd47      	ble.n	800549e <_printf_float+0x1ae>
 800540e:	f1aa 0a02 	sub.w	sl, sl, #2
 8005412:	fa5f fa8a 	uxtb.w	sl, sl
 8005416:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800541a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800541c:	d824      	bhi.n	8005468 <_printf_float+0x178>
 800541e:	3901      	subs	r1, #1
 8005420:	4652      	mov	r2, sl
 8005422:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005426:	9109      	str	r1, [sp, #36]	; 0x24
 8005428:	f7ff ff2f 	bl	800528a <__exponent>
 800542c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800542e:	1813      	adds	r3, r2, r0
 8005430:	2a01      	cmp	r2, #1
 8005432:	4681      	mov	r9, r0
 8005434:	6123      	str	r3, [r4, #16]
 8005436:	dc02      	bgt.n	800543e <_printf_float+0x14e>
 8005438:	6822      	ldr	r2, [r4, #0]
 800543a:	07d1      	lsls	r1, r2, #31
 800543c:	d501      	bpl.n	8005442 <_printf_float+0x152>
 800543e:	3301      	adds	r3, #1
 8005440:	6123      	str	r3, [r4, #16]
 8005442:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005446:	2b00      	cmp	r3, #0
 8005448:	d0a5      	beq.n	8005396 <_printf_float+0xa6>
 800544a:	232d      	movs	r3, #45	; 0x2d
 800544c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005450:	e7a1      	b.n	8005396 <_printf_float+0xa6>
 8005452:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8005456:	f000 8177 	beq.w	8005748 <_printf_float+0x458>
 800545a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800545e:	d1bb      	bne.n	80053d8 <_printf_float+0xe8>
 8005460:	2900      	cmp	r1, #0
 8005462:	d1b9      	bne.n	80053d8 <_printf_float+0xe8>
 8005464:	2301      	movs	r3, #1
 8005466:	e7b6      	b.n	80053d6 <_printf_float+0xe6>
 8005468:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800546c:	d119      	bne.n	80054a2 <_printf_float+0x1b2>
 800546e:	2900      	cmp	r1, #0
 8005470:	6863      	ldr	r3, [r4, #4]
 8005472:	dd0c      	ble.n	800548e <_printf_float+0x19e>
 8005474:	6121      	str	r1, [r4, #16]
 8005476:	b913      	cbnz	r3, 800547e <_printf_float+0x18e>
 8005478:	6822      	ldr	r2, [r4, #0]
 800547a:	07d2      	lsls	r2, r2, #31
 800547c:	d502      	bpl.n	8005484 <_printf_float+0x194>
 800547e:	3301      	adds	r3, #1
 8005480:	440b      	add	r3, r1
 8005482:	6123      	str	r3, [r4, #16]
 8005484:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005486:	65a3      	str	r3, [r4, #88]	; 0x58
 8005488:	f04f 0900 	mov.w	r9, #0
 800548c:	e7d9      	b.n	8005442 <_printf_float+0x152>
 800548e:	b913      	cbnz	r3, 8005496 <_printf_float+0x1a6>
 8005490:	6822      	ldr	r2, [r4, #0]
 8005492:	07d0      	lsls	r0, r2, #31
 8005494:	d501      	bpl.n	800549a <_printf_float+0x1aa>
 8005496:	3302      	adds	r3, #2
 8005498:	e7f3      	b.n	8005482 <_printf_float+0x192>
 800549a:	2301      	movs	r3, #1
 800549c:	e7f1      	b.n	8005482 <_printf_float+0x192>
 800549e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80054a2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80054a6:	4293      	cmp	r3, r2
 80054a8:	db05      	blt.n	80054b6 <_printf_float+0x1c6>
 80054aa:	6822      	ldr	r2, [r4, #0]
 80054ac:	6123      	str	r3, [r4, #16]
 80054ae:	07d1      	lsls	r1, r2, #31
 80054b0:	d5e8      	bpl.n	8005484 <_printf_float+0x194>
 80054b2:	3301      	adds	r3, #1
 80054b4:	e7e5      	b.n	8005482 <_printf_float+0x192>
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	bfd4      	ite	le
 80054ba:	f1c3 0302 	rsble	r3, r3, #2
 80054be:	2301      	movgt	r3, #1
 80054c0:	4413      	add	r3, r2
 80054c2:	e7de      	b.n	8005482 <_printf_float+0x192>
 80054c4:	6823      	ldr	r3, [r4, #0]
 80054c6:	055a      	lsls	r2, r3, #21
 80054c8:	d407      	bmi.n	80054da <_printf_float+0x1ea>
 80054ca:	6923      	ldr	r3, [r4, #16]
 80054cc:	4642      	mov	r2, r8
 80054ce:	4631      	mov	r1, r6
 80054d0:	4628      	mov	r0, r5
 80054d2:	47b8      	blx	r7
 80054d4:	3001      	adds	r0, #1
 80054d6:	d12b      	bne.n	8005530 <_printf_float+0x240>
 80054d8:	e767      	b.n	80053aa <_printf_float+0xba>
 80054da:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80054de:	f240 80dc 	bls.w	800569a <_printf_float+0x3aa>
 80054e2:	2200      	movs	r2, #0
 80054e4:	2300      	movs	r3, #0
 80054e6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80054ea:	f7fb faed 	bl	8000ac8 <__aeabi_dcmpeq>
 80054ee:	2800      	cmp	r0, #0
 80054f0:	d033      	beq.n	800555a <_printf_float+0x26a>
 80054f2:	2301      	movs	r3, #1
 80054f4:	4a41      	ldr	r2, [pc, #260]	; (80055fc <_printf_float+0x30c>)
 80054f6:	4631      	mov	r1, r6
 80054f8:	4628      	mov	r0, r5
 80054fa:	47b8      	blx	r7
 80054fc:	3001      	adds	r0, #1
 80054fe:	f43f af54 	beq.w	80053aa <_printf_float+0xba>
 8005502:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005506:	429a      	cmp	r2, r3
 8005508:	db02      	blt.n	8005510 <_printf_float+0x220>
 800550a:	6823      	ldr	r3, [r4, #0]
 800550c:	07d8      	lsls	r0, r3, #31
 800550e:	d50f      	bpl.n	8005530 <_printf_float+0x240>
 8005510:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005514:	4631      	mov	r1, r6
 8005516:	4628      	mov	r0, r5
 8005518:	47b8      	blx	r7
 800551a:	3001      	adds	r0, #1
 800551c:	f43f af45 	beq.w	80053aa <_printf_float+0xba>
 8005520:	f04f 0800 	mov.w	r8, #0
 8005524:	f104 091a 	add.w	r9, r4, #26
 8005528:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800552a:	3b01      	subs	r3, #1
 800552c:	4543      	cmp	r3, r8
 800552e:	dc09      	bgt.n	8005544 <_printf_float+0x254>
 8005530:	6823      	ldr	r3, [r4, #0]
 8005532:	079b      	lsls	r3, r3, #30
 8005534:	f100 8103 	bmi.w	800573e <_printf_float+0x44e>
 8005538:	68e0      	ldr	r0, [r4, #12]
 800553a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800553c:	4298      	cmp	r0, r3
 800553e:	bfb8      	it	lt
 8005540:	4618      	movlt	r0, r3
 8005542:	e734      	b.n	80053ae <_printf_float+0xbe>
 8005544:	2301      	movs	r3, #1
 8005546:	464a      	mov	r2, r9
 8005548:	4631      	mov	r1, r6
 800554a:	4628      	mov	r0, r5
 800554c:	47b8      	blx	r7
 800554e:	3001      	adds	r0, #1
 8005550:	f43f af2b 	beq.w	80053aa <_printf_float+0xba>
 8005554:	f108 0801 	add.w	r8, r8, #1
 8005558:	e7e6      	b.n	8005528 <_printf_float+0x238>
 800555a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800555c:	2b00      	cmp	r3, #0
 800555e:	dc2b      	bgt.n	80055b8 <_printf_float+0x2c8>
 8005560:	2301      	movs	r3, #1
 8005562:	4a26      	ldr	r2, [pc, #152]	; (80055fc <_printf_float+0x30c>)
 8005564:	4631      	mov	r1, r6
 8005566:	4628      	mov	r0, r5
 8005568:	47b8      	blx	r7
 800556a:	3001      	adds	r0, #1
 800556c:	f43f af1d 	beq.w	80053aa <_printf_float+0xba>
 8005570:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005572:	b923      	cbnz	r3, 800557e <_printf_float+0x28e>
 8005574:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005576:	b913      	cbnz	r3, 800557e <_printf_float+0x28e>
 8005578:	6823      	ldr	r3, [r4, #0]
 800557a:	07d9      	lsls	r1, r3, #31
 800557c:	d5d8      	bpl.n	8005530 <_printf_float+0x240>
 800557e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005582:	4631      	mov	r1, r6
 8005584:	4628      	mov	r0, r5
 8005586:	47b8      	blx	r7
 8005588:	3001      	adds	r0, #1
 800558a:	f43f af0e 	beq.w	80053aa <_printf_float+0xba>
 800558e:	f04f 0900 	mov.w	r9, #0
 8005592:	f104 0a1a 	add.w	sl, r4, #26
 8005596:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005598:	425b      	negs	r3, r3
 800559a:	454b      	cmp	r3, r9
 800559c:	dc01      	bgt.n	80055a2 <_printf_float+0x2b2>
 800559e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055a0:	e794      	b.n	80054cc <_printf_float+0x1dc>
 80055a2:	2301      	movs	r3, #1
 80055a4:	4652      	mov	r2, sl
 80055a6:	4631      	mov	r1, r6
 80055a8:	4628      	mov	r0, r5
 80055aa:	47b8      	blx	r7
 80055ac:	3001      	adds	r0, #1
 80055ae:	f43f aefc 	beq.w	80053aa <_printf_float+0xba>
 80055b2:	f109 0901 	add.w	r9, r9, #1
 80055b6:	e7ee      	b.n	8005596 <_printf_float+0x2a6>
 80055b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80055ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80055bc:	429a      	cmp	r2, r3
 80055be:	bfa8      	it	ge
 80055c0:	461a      	movge	r2, r3
 80055c2:	2a00      	cmp	r2, #0
 80055c4:	4691      	mov	r9, r2
 80055c6:	dd07      	ble.n	80055d8 <_printf_float+0x2e8>
 80055c8:	4613      	mov	r3, r2
 80055ca:	4631      	mov	r1, r6
 80055cc:	4642      	mov	r2, r8
 80055ce:	4628      	mov	r0, r5
 80055d0:	47b8      	blx	r7
 80055d2:	3001      	adds	r0, #1
 80055d4:	f43f aee9 	beq.w	80053aa <_printf_float+0xba>
 80055d8:	f104 031a 	add.w	r3, r4, #26
 80055dc:	f04f 0b00 	mov.w	fp, #0
 80055e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80055e4:	9306      	str	r3, [sp, #24]
 80055e6:	e015      	b.n	8005614 <_printf_float+0x324>
 80055e8:	7fefffff 	.word	0x7fefffff
 80055ec:	080079bc 	.word	0x080079bc
 80055f0:	080079b8 	.word	0x080079b8
 80055f4:	080079c4 	.word	0x080079c4
 80055f8:	080079c0 	.word	0x080079c0
 80055fc:	080079c8 	.word	0x080079c8
 8005600:	2301      	movs	r3, #1
 8005602:	9a06      	ldr	r2, [sp, #24]
 8005604:	4631      	mov	r1, r6
 8005606:	4628      	mov	r0, r5
 8005608:	47b8      	blx	r7
 800560a:	3001      	adds	r0, #1
 800560c:	f43f aecd 	beq.w	80053aa <_printf_float+0xba>
 8005610:	f10b 0b01 	add.w	fp, fp, #1
 8005614:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005618:	ebaa 0309 	sub.w	r3, sl, r9
 800561c:	455b      	cmp	r3, fp
 800561e:	dcef      	bgt.n	8005600 <_printf_float+0x310>
 8005620:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005624:	429a      	cmp	r2, r3
 8005626:	44d0      	add	r8, sl
 8005628:	db15      	blt.n	8005656 <_printf_float+0x366>
 800562a:	6823      	ldr	r3, [r4, #0]
 800562c:	07da      	lsls	r2, r3, #31
 800562e:	d412      	bmi.n	8005656 <_printf_float+0x366>
 8005630:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005632:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005634:	eba3 020a 	sub.w	r2, r3, sl
 8005638:	eba3 0a01 	sub.w	sl, r3, r1
 800563c:	4592      	cmp	sl, r2
 800563e:	bfa8      	it	ge
 8005640:	4692      	movge	sl, r2
 8005642:	f1ba 0f00 	cmp.w	sl, #0
 8005646:	dc0e      	bgt.n	8005666 <_printf_float+0x376>
 8005648:	f04f 0800 	mov.w	r8, #0
 800564c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005650:	f104 091a 	add.w	r9, r4, #26
 8005654:	e019      	b.n	800568a <_printf_float+0x39a>
 8005656:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800565a:	4631      	mov	r1, r6
 800565c:	4628      	mov	r0, r5
 800565e:	47b8      	blx	r7
 8005660:	3001      	adds	r0, #1
 8005662:	d1e5      	bne.n	8005630 <_printf_float+0x340>
 8005664:	e6a1      	b.n	80053aa <_printf_float+0xba>
 8005666:	4653      	mov	r3, sl
 8005668:	4642      	mov	r2, r8
 800566a:	4631      	mov	r1, r6
 800566c:	4628      	mov	r0, r5
 800566e:	47b8      	blx	r7
 8005670:	3001      	adds	r0, #1
 8005672:	d1e9      	bne.n	8005648 <_printf_float+0x358>
 8005674:	e699      	b.n	80053aa <_printf_float+0xba>
 8005676:	2301      	movs	r3, #1
 8005678:	464a      	mov	r2, r9
 800567a:	4631      	mov	r1, r6
 800567c:	4628      	mov	r0, r5
 800567e:	47b8      	blx	r7
 8005680:	3001      	adds	r0, #1
 8005682:	f43f ae92 	beq.w	80053aa <_printf_float+0xba>
 8005686:	f108 0801 	add.w	r8, r8, #1
 800568a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800568e:	1a9b      	subs	r3, r3, r2
 8005690:	eba3 030a 	sub.w	r3, r3, sl
 8005694:	4543      	cmp	r3, r8
 8005696:	dcee      	bgt.n	8005676 <_printf_float+0x386>
 8005698:	e74a      	b.n	8005530 <_printf_float+0x240>
 800569a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800569c:	2a01      	cmp	r2, #1
 800569e:	dc01      	bgt.n	80056a4 <_printf_float+0x3b4>
 80056a0:	07db      	lsls	r3, r3, #31
 80056a2:	d53a      	bpl.n	800571a <_printf_float+0x42a>
 80056a4:	2301      	movs	r3, #1
 80056a6:	4642      	mov	r2, r8
 80056a8:	4631      	mov	r1, r6
 80056aa:	4628      	mov	r0, r5
 80056ac:	47b8      	blx	r7
 80056ae:	3001      	adds	r0, #1
 80056b0:	f43f ae7b 	beq.w	80053aa <_printf_float+0xba>
 80056b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80056b8:	4631      	mov	r1, r6
 80056ba:	4628      	mov	r0, r5
 80056bc:	47b8      	blx	r7
 80056be:	3001      	adds	r0, #1
 80056c0:	f108 0801 	add.w	r8, r8, #1
 80056c4:	f43f ae71 	beq.w	80053aa <_printf_float+0xba>
 80056c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056ca:	2200      	movs	r2, #0
 80056cc:	f103 3aff 	add.w	sl, r3, #4294967295
 80056d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80056d4:	2300      	movs	r3, #0
 80056d6:	f7fb f9f7 	bl	8000ac8 <__aeabi_dcmpeq>
 80056da:	b9c8      	cbnz	r0, 8005710 <_printf_float+0x420>
 80056dc:	4653      	mov	r3, sl
 80056de:	4642      	mov	r2, r8
 80056e0:	4631      	mov	r1, r6
 80056e2:	4628      	mov	r0, r5
 80056e4:	47b8      	blx	r7
 80056e6:	3001      	adds	r0, #1
 80056e8:	d10e      	bne.n	8005708 <_printf_float+0x418>
 80056ea:	e65e      	b.n	80053aa <_printf_float+0xba>
 80056ec:	2301      	movs	r3, #1
 80056ee:	4652      	mov	r2, sl
 80056f0:	4631      	mov	r1, r6
 80056f2:	4628      	mov	r0, r5
 80056f4:	47b8      	blx	r7
 80056f6:	3001      	adds	r0, #1
 80056f8:	f43f ae57 	beq.w	80053aa <_printf_float+0xba>
 80056fc:	f108 0801 	add.w	r8, r8, #1
 8005700:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005702:	3b01      	subs	r3, #1
 8005704:	4543      	cmp	r3, r8
 8005706:	dcf1      	bgt.n	80056ec <_printf_float+0x3fc>
 8005708:	464b      	mov	r3, r9
 800570a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800570e:	e6de      	b.n	80054ce <_printf_float+0x1de>
 8005710:	f04f 0800 	mov.w	r8, #0
 8005714:	f104 0a1a 	add.w	sl, r4, #26
 8005718:	e7f2      	b.n	8005700 <_printf_float+0x410>
 800571a:	2301      	movs	r3, #1
 800571c:	e7df      	b.n	80056de <_printf_float+0x3ee>
 800571e:	2301      	movs	r3, #1
 8005720:	464a      	mov	r2, r9
 8005722:	4631      	mov	r1, r6
 8005724:	4628      	mov	r0, r5
 8005726:	47b8      	blx	r7
 8005728:	3001      	adds	r0, #1
 800572a:	f43f ae3e 	beq.w	80053aa <_printf_float+0xba>
 800572e:	f108 0801 	add.w	r8, r8, #1
 8005732:	68e3      	ldr	r3, [r4, #12]
 8005734:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005736:	1a9b      	subs	r3, r3, r2
 8005738:	4543      	cmp	r3, r8
 800573a:	dcf0      	bgt.n	800571e <_printf_float+0x42e>
 800573c:	e6fc      	b.n	8005538 <_printf_float+0x248>
 800573e:	f04f 0800 	mov.w	r8, #0
 8005742:	f104 0919 	add.w	r9, r4, #25
 8005746:	e7f4      	b.n	8005732 <_printf_float+0x442>
 8005748:	2900      	cmp	r1, #0
 800574a:	f43f ae8b 	beq.w	8005464 <_printf_float+0x174>
 800574e:	2300      	movs	r3, #0
 8005750:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8005754:	ab09      	add	r3, sp, #36	; 0x24
 8005756:	9300      	str	r3, [sp, #0]
 8005758:	ec49 8b10 	vmov	d0, r8, r9
 800575c:	6022      	str	r2, [r4, #0]
 800575e:	f8cd a004 	str.w	sl, [sp, #4]
 8005762:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005766:	4628      	mov	r0, r5
 8005768:	f7ff fd2e 	bl	80051c8 <__cvt>
 800576c:	4680      	mov	r8, r0
 800576e:	e648      	b.n	8005402 <_printf_float+0x112>

08005770 <_printf_common>:
 8005770:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005774:	4691      	mov	r9, r2
 8005776:	461f      	mov	r7, r3
 8005778:	688a      	ldr	r2, [r1, #8]
 800577a:	690b      	ldr	r3, [r1, #16]
 800577c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005780:	4293      	cmp	r3, r2
 8005782:	bfb8      	it	lt
 8005784:	4613      	movlt	r3, r2
 8005786:	f8c9 3000 	str.w	r3, [r9]
 800578a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800578e:	4606      	mov	r6, r0
 8005790:	460c      	mov	r4, r1
 8005792:	b112      	cbz	r2, 800579a <_printf_common+0x2a>
 8005794:	3301      	adds	r3, #1
 8005796:	f8c9 3000 	str.w	r3, [r9]
 800579a:	6823      	ldr	r3, [r4, #0]
 800579c:	0699      	lsls	r1, r3, #26
 800579e:	bf42      	ittt	mi
 80057a0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80057a4:	3302      	addmi	r3, #2
 80057a6:	f8c9 3000 	strmi.w	r3, [r9]
 80057aa:	6825      	ldr	r5, [r4, #0]
 80057ac:	f015 0506 	ands.w	r5, r5, #6
 80057b0:	d107      	bne.n	80057c2 <_printf_common+0x52>
 80057b2:	f104 0a19 	add.w	sl, r4, #25
 80057b6:	68e3      	ldr	r3, [r4, #12]
 80057b8:	f8d9 2000 	ldr.w	r2, [r9]
 80057bc:	1a9b      	subs	r3, r3, r2
 80057be:	42ab      	cmp	r3, r5
 80057c0:	dc28      	bgt.n	8005814 <_printf_common+0xa4>
 80057c2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80057c6:	6822      	ldr	r2, [r4, #0]
 80057c8:	3300      	adds	r3, #0
 80057ca:	bf18      	it	ne
 80057cc:	2301      	movne	r3, #1
 80057ce:	0692      	lsls	r2, r2, #26
 80057d0:	d42d      	bmi.n	800582e <_printf_common+0xbe>
 80057d2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80057d6:	4639      	mov	r1, r7
 80057d8:	4630      	mov	r0, r6
 80057da:	47c0      	blx	r8
 80057dc:	3001      	adds	r0, #1
 80057de:	d020      	beq.n	8005822 <_printf_common+0xb2>
 80057e0:	6823      	ldr	r3, [r4, #0]
 80057e2:	68e5      	ldr	r5, [r4, #12]
 80057e4:	f8d9 2000 	ldr.w	r2, [r9]
 80057e8:	f003 0306 	and.w	r3, r3, #6
 80057ec:	2b04      	cmp	r3, #4
 80057ee:	bf08      	it	eq
 80057f0:	1aad      	subeq	r5, r5, r2
 80057f2:	68a3      	ldr	r3, [r4, #8]
 80057f4:	6922      	ldr	r2, [r4, #16]
 80057f6:	bf0c      	ite	eq
 80057f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80057fc:	2500      	movne	r5, #0
 80057fe:	4293      	cmp	r3, r2
 8005800:	bfc4      	itt	gt
 8005802:	1a9b      	subgt	r3, r3, r2
 8005804:	18ed      	addgt	r5, r5, r3
 8005806:	f04f 0900 	mov.w	r9, #0
 800580a:	341a      	adds	r4, #26
 800580c:	454d      	cmp	r5, r9
 800580e:	d11a      	bne.n	8005846 <_printf_common+0xd6>
 8005810:	2000      	movs	r0, #0
 8005812:	e008      	b.n	8005826 <_printf_common+0xb6>
 8005814:	2301      	movs	r3, #1
 8005816:	4652      	mov	r2, sl
 8005818:	4639      	mov	r1, r7
 800581a:	4630      	mov	r0, r6
 800581c:	47c0      	blx	r8
 800581e:	3001      	adds	r0, #1
 8005820:	d103      	bne.n	800582a <_printf_common+0xba>
 8005822:	f04f 30ff 	mov.w	r0, #4294967295
 8005826:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800582a:	3501      	adds	r5, #1
 800582c:	e7c3      	b.n	80057b6 <_printf_common+0x46>
 800582e:	18e1      	adds	r1, r4, r3
 8005830:	1c5a      	adds	r2, r3, #1
 8005832:	2030      	movs	r0, #48	; 0x30
 8005834:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005838:	4422      	add	r2, r4
 800583a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800583e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005842:	3302      	adds	r3, #2
 8005844:	e7c5      	b.n	80057d2 <_printf_common+0x62>
 8005846:	2301      	movs	r3, #1
 8005848:	4622      	mov	r2, r4
 800584a:	4639      	mov	r1, r7
 800584c:	4630      	mov	r0, r6
 800584e:	47c0      	blx	r8
 8005850:	3001      	adds	r0, #1
 8005852:	d0e6      	beq.n	8005822 <_printf_common+0xb2>
 8005854:	f109 0901 	add.w	r9, r9, #1
 8005858:	e7d8      	b.n	800580c <_printf_common+0x9c>
	...

0800585c <_printf_i>:
 800585c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005860:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005864:	460c      	mov	r4, r1
 8005866:	7e09      	ldrb	r1, [r1, #24]
 8005868:	b085      	sub	sp, #20
 800586a:	296e      	cmp	r1, #110	; 0x6e
 800586c:	4617      	mov	r7, r2
 800586e:	4606      	mov	r6, r0
 8005870:	4698      	mov	r8, r3
 8005872:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005874:	f000 80b3 	beq.w	80059de <_printf_i+0x182>
 8005878:	d822      	bhi.n	80058c0 <_printf_i+0x64>
 800587a:	2963      	cmp	r1, #99	; 0x63
 800587c:	d036      	beq.n	80058ec <_printf_i+0x90>
 800587e:	d80a      	bhi.n	8005896 <_printf_i+0x3a>
 8005880:	2900      	cmp	r1, #0
 8005882:	f000 80b9 	beq.w	80059f8 <_printf_i+0x19c>
 8005886:	2958      	cmp	r1, #88	; 0x58
 8005888:	f000 8083 	beq.w	8005992 <_printf_i+0x136>
 800588c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005890:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005894:	e032      	b.n	80058fc <_printf_i+0xa0>
 8005896:	2964      	cmp	r1, #100	; 0x64
 8005898:	d001      	beq.n	800589e <_printf_i+0x42>
 800589a:	2969      	cmp	r1, #105	; 0x69
 800589c:	d1f6      	bne.n	800588c <_printf_i+0x30>
 800589e:	6820      	ldr	r0, [r4, #0]
 80058a0:	6813      	ldr	r3, [r2, #0]
 80058a2:	0605      	lsls	r5, r0, #24
 80058a4:	f103 0104 	add.w	r1, r3, #4
 80058a8:	d52a      	bpl.n	8005900 <_printf_i+0xa4>
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	6011      	str	r1, [r2, #0]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	da03      	bge.n	80058ba <_printf_i+0x5e>
 80058b2:	222d      	movs	r2, #45	; 0x2d
 80058b4:	425b      	negs	r3, r3
 80058b6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80058ba:	486f      	ldr	r0, [pc, #444]	; (8005a78 <_printf_i+0x21c>)
 80058bc:	220a      	movs	r2, #10
 80058be:	e039      	b.n	8005934 <_printf_i+0xd8>
 80058c0:	2973      	cmp	r1, #115	; 0x73
 80058c2:	f000 809d 	beq.w	8005a00 <_printf_i+0x1a4>
 80058c6:	d808      	bhi.n	80058da <_printf_i+0x7e>
 80058c8:	296f      	cmp	r1, #111	; 0x6f
 80058ca:	d020      	beq.n	800590e <_printf_i+0xb2>
 80058cc:	2970      	cmp	r1, #112	; 0x70
 80058ce:	d1dd      	bne.n	800588c <_printf_i+0x30>
 80058d0:	6823      	ldr	r3, [r4, #0]
 80058d2:	f043 0320 	orr.w	r3, r3, #32
 80058d6:	6023      	str	r3, [r4, #0]
 80058d8:	e003      	b.n	80058e2 <_printf_i+0x86>
 80058da:	2975      	cmp	r1, #117	; 0x75
 80058dc:	d017      	beq.n	800590e <_printf_i+0xb2>
 80058de:	2978      	cmp	r1, #120	; 0x78
 80058e0:	d1d4      	bne.n	800588c <_printf_i+0x30>
 80058e2:	2378      	movs	r3, #120	; 0x78
 80058e4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80058e8:	4864      	ldr	r0, [pc, #400]	; (8005a7c <_printf_i+0x220>)
 80058ea:	e055      	b.n	8005998 <_printf_i+0x13c>
 80058ec:	6813      	ldr	r3, [r2, #0]
 80058ee:	1d19      	adds	r1, r3, #4
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	6011      	str	r1, [r2, #0]
 80058f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80058f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80058fc:	2301      	movs	r3, #1
 80058fe:	e08c      	b.n	8005a1a <_printf_i+0x1be>
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	6011      	str	r1, [r2, #0]
 8005904:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005908:	bf18      	it	ne
 800590a:	b21b      	sxthne	r3, r3
 800590c:	e7cf      	b.n	80058ae <_printf_i+0x52>
 800590e:	6813      	ldr	r3, [r2, #0]
 8005910:	6825      	ldr	r5, [r4, #0]
 8005912:	1d18      	adds	r0, r3, #4
 8005914:	6010      	str	r0, [r2, #0]
 8005916:	0628      	lsls	r0, r5, #24
 8005918:	d501      	bpl.n	800591e <_printf_i+0xc2>
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	e002      	b.n	8005924 <_printf_i+0xc8>
 800591e:	0668      	lsls	r0, r5, #25
 8005920:	d5fb      	bpl.n	800591a <_printf_i+0xbe>
 8005922:	881b      	ldrh	r3, [r3, #0]
 8005924:	4854      	ldr	r0, [pc, #336]	; (8005a78 <_printf_i+0x21c>)
 8005926:	296f      	cmp	r1, #111	; 0x6f
 8005928:	bf14      	ite	ne
 800592a:	220a      	movne	r2, #10
 800592c:	2208      	moveq	r2, #8
 800592e:	2100      	movs	r1, #0
 8005930:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005934:	6865      	ldr	r5, [r4, #4]
 8005936:	60a5      	str	r5, [r4, #8]
 8005938:	2d00      	cmp	r5, #0
 800593a:	f2c0 8095 	blt.w	8005a68 <_printf_i+0x20c>
 800593e:	6821      	ldr	r1, [r4, #0]
 8005940:	f021 0104 	bic.w	r1, r1, #4
 8005944:	6021      	str	r1, [r4, #0]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d13d      	bne.n	80059c6 <_printf_i+0x16a>
 800594a:	2d00      	cmp	r5, #0
 800594c:	f040 808e 	bne.w	8005a6c <_printf_i+0x210>
 8005950:	4665      	mov	r5, ip
 8005952:	2a08      	cmp	r2, #8
 8005954:	d10b      	bne.n	800596e <_printf_i+0x112>
 8005956:	6823      	ldr	r3, [r4, #0]
 8005958:	07db      	lsls	r3, r3, #31
 800595a:	d508      	bpl.n	800596e <_printf_i+0x112>
 800595c:	6923      	ldr	r3, [r4, #16]
 800595e:	6862      	ldr	r2, [r4, #4]
 8005960:	429a      	cmp	r2, r3
 8005962:	bfde      	ittt	le
 8005964:	2330      	movle	r3, #48	; 0x30
 8005966:	f805 3c01 	strble.w	r3, [r5, #-1]
 800596a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800596e:	ebac 0305 	sub.w	r3, ip, r5
 8005972:	6123      	str	r3, [r4, #16]
 8005974:	f8cd 8000 	str.w	r8, [sp]
 8005978:	463b      	mov	r3, r7
 800597a:	aa03      	add	r2, sp, #12
 800597c:	4621      	mov	r1, r4
 800597e:	4630      	mov	r0, r6
 8005980:	f7ff fef6 	bl	8005770 <_printf_common>
 8005984:	3001      	adds	r0, #1
 8005986:	d14d      	bne.n	8005a24 <_printf_i+0x1c8>
 8005988:	f04f 30ff 	mov.w	r0, #4294967295
 800598c:	b005      	add	sp, #20
 800598e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005992:	4839      	ldr	r0, [pc, #228]	; (8005a78 <_printf_i+0x21c>)
 8005994:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005998:	6813      	ldr	r3, [r2, #0]
 800599a:	6821      	ldr	r1, [r4, #0]
 800599c:	1d1d      	adds	r5, r3, #4
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	6015      	str	r5, [r2, #0]
 80059a2:	060a      	lsls	r2, r1, #24
 80059a4:	d50b      	bpl.n	80059be <_printf_i+0x162>
 80059a6:	07ca      	lsls	r2, r1, #31
 80059a8:	bf44      	itt	mi
 80059aa:	f041 0120 	orrmi.w	r1, r1, #32
 80059ae:	6021      	strmi	r1, [r4, #0]
 80059b0:	b91b      	cbnz	r3, 80059ba <_printf_i+0x15e>
 80059b2:	6822      	ldr	r2, [r4, #0]
 80059b4:	f022 0220 	bic.w	r2, r2, #32
 80059b8:	6022      	str	r2, [r4, #0]
 80059ba:	2210      	movs	r2, #16
 80059bc:	e7b7      	b.n	800592e <_printf_i+0xd2>
 80059be:	064d      	lsls	r5, r1, #25
 80059c0:	bf48      	it	mi
 80059c2:	b29b      	uxthmi	r3, r3
 80059c4:	e7ef      	b.n	80059a6 <_printf_i+0x14a>
 80059c6:	4665      	mov	r5, ip
 80059c8:	fbb3 f1f2 	udiv	r1, r3, r2
 80059cc:	fb02 3311 	mls	r3, r2, r1, r3
 80059d0:	5cc3      	ldrb	r3, [r0, r3]
 80059d2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80059d6:	460b      	mov	r3, r1
 80059d8:	2900      	cmp	r1, #0
 80059da:	d1f5      	bne.n	80059c8 <_printf_i+0x16c>
 80059dc:	e7b9      	b.n	8005952 <_printf_i+0xf6>
 80059de:	6813      	ldr	r3, [r2, #0]
 80059e0:	6825      	ldr	r5, [r4, #0]
 80059e2:	6961      	ldr	r1, [r4, #20]
 80059e4:	1d18      	adds	r0, r3, #4
 80059e6:	6010      	str	r0, [r2, #0]
 80059e8:	0628      	lsls	r0, r5, #24
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	d501      	bpl.n	80059f2 <_printf_i+0x196>
 80059ee:	6019      	str	r1, [r3, #0]
 80059f0:	e002      	b.n	80059f8 <_printf_i+0x19c>
 80059f2:	066a      	lsls	r2, r5, #25
 80059f4:	d5fb      	bpl.n	80059ee <_printf_i+0x192>
 80059f6:	8019      	strh	r1, [r3, #0]
 80059f8:	2300      	movs	r3, #0
 80059fa:	6123      	str	r3, [r4, #16]
 80059fc:	4665      	mov	r5, ip
 80059fe:	e7b9      	b.n	8005974 <_printf_i+0x118>
 8005a00:	6813      	ldr	r3, [r2, #0]
 8005a02:	1d19      	adds	r1, r3, #4
 8005a04:	6011      	str	r1, [r2, #0]
 8005a06:	681d      	ldr	r5, [r3, #0]
 8005a08:	6862      	ldr	r2, [r4, #4]
 8005a0a:	2100      	movs	r1, #0
 8005a0c:	4628      	mov	r0, r5
 8005a0e:	f7fa fbe7 	bl	80001e0 <memchr>
 8005a12:	b108      	cbz	r0, 8005a18 <_printf_i+0x1bc>
 8005a14:	1b40      	subs	r0, r0, r5
 8005a16:	6060      	str	r0, [r4, #4]
 8005a18:	6863      	ldr	r3, [r4, #4]
 8005a1a:	6123      	str	r3, [r4, #16]
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a22:	e7a7      	b.n	8005974 <_printf_i+0x118>
 8005a24:	6923      	ldr	r3, [r4, #16]
 8005a26:	462a      	mov	r2, r5
 8005a28:	4639      	mov	r1, r7
 8005a2a:	4630      	mov	r0, r6
 8005a2c:	47c0      	blx	r8
 8005a2e:	3001      	adds	r0, #1
 8005a30:	d0aa      	beq.n	8005988 <_printf_i+0x12c>
 8005a32:	6823      	ldr	r3, [r4, #0]
 8005a34:	079b      	lsls	r3, r3, #30
 8005a36:	d413      	bmi.n	8005a60 <_printf_i+0x204>
 8005a38:	68e0      	ldr	r0, [r4, #12]
 8005a3a:	9b03      	ldr	r3, [sp, #12]
 8005a3c:	4298      	cmp	r0, r3
 8005a3e:	bfb8      	it	lt
 8005a40:	4618      	movlt	r0, r3
 8005a42:	e7a3      	b.n	800598c <_printf_i+0x130>
 8005a44:	2301      	movs	r3, #1
 8005a46:	464a      	mov	r2, r9
 8005a48:	4639      	mov	r1, r7
 8005a4a:	4630      	mov	r0, r6
 8005a4c:	47c0      	blx	r8
 8005a4e:	3001      	adds	r0, #1
 8005a50:	d09a      	beq.n	8005988 <_printf_i+0x12c>
 8005a52:	3501      	adds	r5, #1
 8005a54:	68e3      	ldr	r3, [r4, #12]
 8005a56:	9a03      	ldr	r2, [sp, #12]
 8005a58:	1a9b      	subs	r3, r3, r2
 8005a5a:	42ab      	cmp	r3, r5
 8005a5c:	dcf2      	bgt.n	8005a44 <_printf_i+0x1e8>
 8005a5e:	e7eb      	b.n	8005a38 <_printf_i+0x1dc>
 8005a60:	2500      	movs	r5, #0
 8005a62:	f104 0919 	add.w	r9, r4, #25
 8005a66:	e7f5      	b.n	8005a54 <_printf_i+0x1f8>
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d1ac      	bne.n	80059c6 <_printf_i+0x16a>
 8005a6c:	7803      	ldrb	r3, [r0, #0]
 8005a6e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005a72:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a76:	e76c      	b.n	8005952 <_printf_i+0xf6>
 8005a78:	080079ca 	.word	0x080079ca
 8005a7c:	080079db 	.word	0x080079db

08005a80 <iprintf>:
 8005a80:	b40f      	push	{r0, r1, r2, r3}
 8005a82:	4b0a      	ldr	r3, [pc, #40]	; (8005aac <iprintf+0x2c>)
 8005a84:	b513      	push	{r0, r1, r4, lr}
 8005a86:	681c      	ldr	r4, [r3, #0]
 8005a88:	b124      	cbz	r4, 8005a94 <iprintf+0x14>
 8005a8a:	69a3      	ldr	r3, [r4, #24]
 8005a8c:	b913      	cbnz	r3, 8005a94 <iprintf+0x14>
 8005a8e:	4620      	mov	r0, r4
 8005a90:	f001 f866 	bl	8006b60 <__sinit>
 8005a94:	ab05      	add	r3, sp, #20
 8005a96:	9a04      	ldr	r2, [sp, #16]
 8005a98:	68a1      	ldr	r1, [r4, #8]
 8005a9a:	9301      	str	r3, [sp, #4]
 8005a9c:	4620      	mov	r0, r4
 8005a9e:	f001 fd29 	bl	80074f4 <_vfiprintf_r>
 8005aa2:	b002      	add	sp, #8
 8005aa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005aa8:	b004      	add	sp, #16
 8005aaa:	4770      	bx	lr
 8005aac:	2000000c 	.word	0x2000000c

08005ab0 <_puts_r>:
 8005ab0:	b570      	push	{r4, r5, r6, lr}
 8005ab2:	460e      	mov	r6, r1
 8005ab4:	4605      	mov	r5, r0
 8005ab6:	b118      	cbz	r0, 8005ac0 <_puts_r+0x10>
 8005ab8:	6983      	ldr	r3, [r0, #24]
 8005aba:	b90b      	cbnz	r3, 8005ac0 <_puts_r+0x10>
 8005abc:	f001 f850 	bl	8006b60 <__sinit>
 8005ac0:	69ab      	ldr	r3, [r5, #24]
 8005ac2:	68ac      	ldr	r4, [r5, #8]
 8005ac4:	b913      	cbnz	r3, 8005acc <_puts_r+0x1c>
 8005ac6:	4628      	mov	r0, r5
 8005ac8:	f001 f84a 	bl	8006b60 <__sinit>
 8005acc:	4b23      	ldr	r3, [pc, #140]	; (8005b5c <_puts_r+0xac>)
 8005ace:	429c      	cmp	r4, r3
 8005ad0:	d117      	bne.n	8005b02 <_puts_r+0x52>
 8005ad2:	686c      	ldr	r4, [r5, #4]
 8005ad4:	89a3      	ldrh	r3, [r4, #12]
 8005ad6:	071b      	lsls	r3, r3, #28
 8005ad8:	d51d      	bpl.n	8005b16 <_puts_r+0x66>
 8005ada:	6923      	ldr	r3, [r4, #16]
 8005adc:	b1db      	cbz	r3, 8005b16 <_puts_r+0x66>
 8005ade:	3e01      	subs	r6, #1
 8005ae0:	68a3      	ldr	r3, [r4, #8]
 8005ae2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005ae6:	3b01      	subs	r3, #1
 8005ae8:	60a3      	str	r3, [r4, #8]
 8005aea:	b9e9      	cbnz	r1, 8005b28 <_puts_r+0x78>
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	da2e      	bge.n	8005b4e <_puts_r+0x9e>
 8005af0:	4622      	mov	r2, r4
 8005af2:	210a      	movs	r1, #10
 8005af4:	4628      	mov	r0, r5
 8005af6:	f000 f83f 	bl	8005b78 <__swbuf_r>
 8005afa:	3001      	adds	r0, #1
 8005afc:	d011      	beq.n	8005b22 <_puts_r+0x72>
 8005afe:	200a      	movs	r0, #10
 8005b00:	e011      	b.n	8005b26 <_puts_r+0x76>
 8005b02:	4b17      	ldr	r3, [pc, #92]	; (8005b60 <_puts_r+0xb0>)
 8005b04:	429c      	cmp	r4, r3
 8005b06:	d101      	bne.n	8005b0c <_puts_r+0x5c>
 8005b08:	68ac      	ldr	r4, [r5, #8]
 8005b0a:	e7e3      	b.n	8005ad4 <_puts_r+0x24>
 8005b0c:	4b15      	ldr	r3, [pc, #84]	; (8005b64 <_puts_r+0xb4>)
 8005b0e:	429c      	cmp	r4, r3
 8005b10:	bf08      	it	eq
 8005b12:	68ec      	ldreq	r4, [r5, #12]
 8005b14:	e7de      	b.n	8005ad4 <_puts_r+0x24>
 8005b16:	4621      	mov	r1, r4
 8005b18:	4628      	mov	r0, r5
 8005b1a:	f000 f87f 	bl	8005c1c <__swsetup_r>
 8005b1e:	2800      	cmp	r0, #0
 8005b20:	d0dd      	beq.n	8005ade <_puts_r+0x2e>
 8005b22:	f04f 30ff 	mov.w	r0, #4294967295
 8005b26:	bd70      	pop	{r4, r5, r6, pc}
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	da04      	bge.n	8005b36 <_puts_r+0x86>
 8005b2c:	69a2      	ldr	r2, [r4, #24]
 8005b2e:	429a      	cmp	r2, r3
 8005b30:	dc06      	bgt.n	8005b40 <_puts_r+0x90>
 8005b32:	290a      	cmp	r1, #10
 8005b34:	d004      	beq.n	8005b40 <_puts_r+0x90>
 8005b36:	6823      	ldr	r3, [r4, #0]
 8005b38:	1c5a      	adds	r2, r3, #1
 8005b3a:	6022      	str	r2, [r4, #0]
 8005b3c:	7019      	strb	r1, [r3, #0]
 8005b3e:	e7cf      	b.n	8005ae0 <_puts_r+0x30>
 8005b40:	4622      	mov	r2, r4
 8005b42:	4628      	mov	r0, r5
 8005b44:	f000 f818 	bl	8005b78 <__swbuf_r>
 8005b48:	3001      	adds	r0, #1
 8005b4a:	d1c9      	bne.n	8005ae0 <_puts_r+0x30>
 8005b4c:	e7e9      	b.n	8005b22 <_puts_r+0x72>
 8005b4e:	6823      	ldr	r3, [r4, #0]
 8005b50:	200a      	movs	r0, #10
 8005b52:	1c5a      	adds	r2, r3, #1
 8005b54:	6022      	str	r2, [r4, #0]
 8005b56:	7018      	strb	r0, [r3, #0]
 8005b58:	e7e5      	b.n	8005b26 <_puts_r+0x76>
 8005b5a:	bf00      	nop
 8005b5c:	08007a1c 	.word	0x08007a1c
 8005b60:	08007a3c 	.word	0x08007a3c
 8005b64:	080079fc 	.word	0x080079fc

08005b68 <puts>:
 8005b68:	4b02      	ldr	r3, [pc, #8]	; (8005b74 <puts+0xc>)
 8005b6a:	4601      	mov	r1, r0
 8005b6c:	6818      	ldr	r0, [r3, #0]
 8005b6e:	f7ff bf9f 	b.w	8005ab0 <_puts_r>
 8005b72:	bf00      	nop
 8005b74:	2000000c 	.word	0x2000000c

08005b78 <__swbuf_r>:
 8005b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b7a:	460e      	mov	r6, r1
 8005b7c:	4614      	mov	r4, r2
 8005b7e:	4605      	mov	r5, r0
 8005b80:	b118      	cbz	r0, 8005b8a <__swbuf_r+0x12>
 8005b82:	6983      	ldr	r3, [r0, #24]
 8005b84:	b90b      	cbnz	r3, 8005b8a <__swbuf_r+0x12>
 8005b86:	f000 ffeb 	bl	8006b60 <__sinit>
 8005b8a:	4b21      	ldr	r3, [pc, #132]	; (8005c10 <__swbuf_r+0x98>)
 8005b8c:	429c      	cmp	r4, r3
 8005b8e:	d12a      	bne.n	8005be6 <__swbuf_r+0x6e>
 8005b90:	686c      	ldr	r4, [r5, #4]
 8005b92:	69a3      	ldr	r3, [r4, #24]
 8005b94:	60a3      	str	r3, [r4, #8]
 8005b96:	89a3      	ldrh	r3, [r4, #12]
 8005b98:	071a      	lsls	r2, r3, #28
 8005b9a:	d52e      	bpl.n	8005bfa <__swbuf_r+0x82>
 8005b9c:	6923      	ldr	r3, [r4, #16]
 8005b9e:	b363      	cbz	r3, 8005bfa <__swbuf_r+0x82>
 8005ba0:	6923      	ldr	r3, [r4, #16]
 8005ba2:	6820      	ldr	r0, [r4, #0]
 8005ba4:	1ac0      	subs	r0, r0, r3
 8005ba6:	6963      	ldr	r3, [r4, #20]
 8005ba8:	b2f6      	uxtb	r6, r6
 8005baa:	4283      	cmp	r3, r0
 8005bac:	4637      	mov	r7, r6
 8005bae:	dc04      	bgt.n	8005bba <__swbuf_r+0x42>
 8005bb0:	4621      	mov	r1, r4
 8005bb2:	4628      	mov	r0, r5
 8005bb4:	f000 ff6a 	bl	8006a8c <_fflush_r>
 8005bb8:	bb28      	cbnz	r0, 8005c06 <__swbuf_r+0x8e>
 8005bba:	68a3      	ldr	r3, [r4, #8]
 8005bbc:	3b01      	subs	r3, #1
 8005bbe:	60a3      	str	r3, [r4, #8]
 8005bc0:	6823      	ldr	r3, [r4, #0]
 8005bc2:	1c5a      	adds	r2, r3, #1
 8005bc4:	6022      	str	r2, [r4, #0]
 8005bc6:	701e      	strb	r6, [r3, #0]
 8005bc8:	6963      	ldr	r3, [r4, #20]
 8005bca:	3001      	adds	r0, #1
 8005bcc:	4283      	cmp	r3, r0
 8005bce:	d004      	beq.n	8005bda <__swbuf_r+0x62>
 8005bd0:	89a3      	ldrh	r3, [r4, #12]
 8005bd2:	07db      	lsls	r3, r3, #31
 8005bd4:	d519      	bpl.n	8005c0a <__swbuf_r+0x92>
 8005bd6:	2e0a      	cmp	r6, #10
 8005bd8:	d117      	bne.n	8005c0a <__swbuf_r+0x92>
 8005bda:	4621      	mov	r1, r4
 8005bdc:	4628      	mov	r0, r5
 8005bde:	f000 ff55 	bl	8006a8c <_fflush_r>
 8005be2:	b190      	cbz	r0, 8005c0a <__swbuf_r+0x92>
 8005be4:	e00f      	b.n	8005c06 <__swbuf_r+0x8e>
 8005be6:	4b0b      	ldr	r3, [pc, #44]	; (8005c14 <__swbuf_r+0x9c>)
 8005be8:	429c      	cmp	r4, r3
 8005bea:	d101      	bne.n	8005bf0 <__swbuf_r+0x78>
 8005bec:	68ac      	ldr	r4, [r5, #8]
 8005bee:	e7d0      	b.n	8005b92 <__swbuf_r+0x1a>
 8005bf0:	4b09      	ldr	r3, [pc, #36]	; (8005c18 <__swbuf_r+0xa0>)
 8005bf2:	429c      	cmp	r4, r3
 8005bf4:	bf08      	it	eq
 8005bf6:	68ec      	ldreq	r4, [r5, #12]
 8005bf8:	e7cb      	b.n	8005b92 <__swbuf_r+0x1a>
 8005bfa:	4621      	mov	r1, r4
 8005bfc:	4628      	mov	r0, r5
 8005bfe:	f000 f80d 	bl	8005c1c <__swsetup_r>
 8005c02:	2800      	cmp	r0, #0
 8005c04:	d0cc      	beq.n	8005ba0 <__swbuf_r+0x28>
 8005c06:	f04f 37ff 	mov.w	r7, #4294967295
 8005c0a:	4638      	mov	r0, r7
 8005c0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c0e:	bf00      	nop
 8005c10:	08007a1c 	.word	0x08007a1c
 8005c14:	08007a3c 	.word	0x08007a3c
 8005c18:	080079fc 	.word	0x080079fc

08005c1c <__swsetup_r>:
 8005c1c:	4b32      	ldr	r3, [pc, #200]	; (8005ce8 <__swsetup_r+0xcc>)
 8005c1e:	b570      	push	{r4, r5, r6, lr}
 8005c20:	681d      	ldr	r5, [r3, #0]
 8005c22:	4606      	mov	r6, r0
 8005c24:	460c      	mov	r4, r1
 8005c26:	b125      	cbz	r5, 8005c32 <__swsetup_r+0x16>
 8005c28:	69ab      	ldr	r3, [r5, #24]
 8005c2a:	b913      	cbnz	r3, 8005c32 <__swsetup_r+0x16>
 8005c2c:	4628      	mov	r0, r5
 8005c2e:	f000 ff97 	bl	8006b60 <__sinit>
 8005c32:	4b2e      	ldr	r3, [pc, #184]	; (8005cec <__swsetup_r+0xd0>)
 8005c34:	429c      	cmp	r4, r3
 8005c36:	d10f      	bne.n	8005c58 <__swsetup_r+0x3c>
 8005c38:	686c      	ldr	r4, [r5, #4]
 8005c3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c3e:	b29a      	uxth	r2, r3
 8005c40:	0715      	lsls	r5, r2, #28
 8005c42:	d42c      	bmi.n	8005c9e <__swsetup_r+0x82>
 8005c44:	06d0      	lsls	r0, r2, #27
 8005c46:	d411      	bmi.n	8005c6c <__swsetup_r+0x50>
 8005c48:	2209      	movs	r2, #9
 8005c4a:	6032      	str	r2, [r6, #0]
 8005c4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c50:	81a3      	strh	r3, [r4, #12]
 8005c52:	f04f 30ff 	mov.w	r0, #4294967295
 8005c56:	e03e      	b.n	8005cd6 <__swsetup_r+0xba>
 8005c58:	4b25      	ldr	r3, [pc, #148]	; (8005cf0 <__swsetup_r+0xd4>)
 8005c5a:	429c      	cmp	r4, r3
 8005c5c:	d101      	bne.n	8005c62 <__swsetup_r+0x46>
 8005c5e:	68ac      	ldr	r4, [r5, #8]
 8005c60:	e7eb      	b.n	8005c3a <__swsetup_r+0x1e>
 8005c62:	4b24      	ldr	r3, [pc, #144]	; (8005cf4 <__swsetup_r+0xd8>)
 8005c64:	429c      	cmp	r4, r3
 8005c66:	bf08      	it	eq
 8005c68:	68ec      	ldreq	r4, [r5, #12]
 8005c6a:	e7e6      	b.n	8005c3a <__swsetup_r+0x1e>
 8005c6c:	0751      	lsls	r1, r2, #29
 8005c6e:	d512      	bpl.n	8005c96 <__swsetup_r+0x7a>
 8005c70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c72:	b141      	cbz	r1, 8005c86 <__swsetup_r+0x6a>
 8005c74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005c78:	4299      	cmp	r1, r3
 8005c7a:	d002      	beq.n	8005c82 <__swsetup_r+0x66>
 8005c7c:	4630      	mov	r0, r6
 8005c7e:	f001 fb67 	bl	8007350 <_free_r>
 8005c82:	2300      	movs	r3, #0
 8005c84:	6363      	str	r3, [r4, #52]	; 0x34
 8005c86:	89a3      	ldrh	r3, [r4, #12]
 8005c88:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005c8c:	81a3      	strh	r3, [r4, #12]
 8005c8e:	2300      	movs	r3, #0
 8005c90:	6063      	str	r3, [r4, #4]
 8005c92:	6923      	ldr	r3, [r4, #16]
 8005c94:	6023      	str	r3, [r4, #0]
 8005c96:	89a3      	ldrh	r3, [r4, #12]
 8005c98:	f043 0308 	orr.w	r3, r3, #8
 8005c9c:	81a3      	strh	r3, [r4, #12]
 8005c9e:	6923      	ldr	r3, [r4, #16]
 8005ca0:	b94b      	cbnz	r3, 8005cb6 <__swsetup_r+0x9a>
 8005ca2:	89a3      	ldrh	r3, [r4, #12]
 8005ca4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005ca8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cac:	d003      	beq.n	8005cb6 <__swsetup_r+0x9a>
 8005cae:	4621      	mov	r1, r4
 8005cb0:	4630      	mov	r0, r6
 8005cb2:	f001 f811 	bl	8006cd8 <__smakebuf_r>
 8005cb6:	89a2      	ldrh	r2, [r4, #12]
 8005cb8:	f012 0301 	ands.w	r3, r2, #1
 8005cbc:	d00c      	beq.n	8005cd8 <__swsetup_r+0xbc>
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	60a3      	str	r3, [r4, #8]
 8005cc2:	6963      	ldr	r3, [r4, #20]
 8005cc4:	425b      	negs	r3, r3
 8005cc6:	61a3      	str	r3, [r4, #24]
 8005cc8:	6923      	ldr	r3, [r4, #16]
 8005cca:	b953      	cbnz	r3, 8005ce2 <__swsetup_r+0xc6>
 8005ccc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005cd0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005cd4:	d1ba      	bne.n	8005c4c <__swsetup_r+0x30>
 8005cd6:	bd70      	pop	{r4, r5, r6, pc}
 8005cd8:	0792      	lsls	r2, r2, #30
 8005cda:	bf58      	it	pl
 8005cdc:	6963      	ldrpl	r3, [r4, #20]
 8005cde:	60a3      	str	r3, [r4, #8]
 8005ce0:	e7f2      	b.n	8005cc8 <__swsetup_r+0xac>
 8005ce2:	2000      	movs	r0, #0
 8005ce4:	e7f7      	b.n	8005cd6 <__swsetup_r+0xba>
 8005ce6:	bf00      	nop
 8005ce8:	2000000c 	.word	0x2000000c
 8005cec:	08007a1c 	.word	0x08007a1c
 8005cf0:	08007a3c 	.word	0x08007a3c
 8005cf4:	080079fc 	.word	0x080079fc

08005cf8 <quorem>:
 8005cf8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cfc:	6903      	ldr	r3, [r0, #16]
 8005cfe:	690c      	ldr	r4, [r1, #16]
 8005d00:	42a3      	cmp	r3, r4
 8005d02:	4680      	mov	r8, r0
 8005d04:	f2c0 8082 	blt.w	8005e0c <quorem+0x114>
 8005d08:	3c01      	subs	r4, #1
 8005d0a:	f101 0714 	add.w	r7, r1, #20
 8005d0e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8005d12:	f100 0614 	add.w	r6, r0, #20
 8005d16:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8005d1a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8005d1e:	eb06 030c 	add.w	r3, r6, ip
 8005d22:	3501      	adds	r5, #1
 8005d24:	eb07 090c 	add.w	r9, r7, ip
 8005d28:	9301      	str	r3, [sp, #4]
 8005d2a:	fbb0 f5f5 	udiv	r5, r0, r5
 8005d2e:	b395      	cbz	r5, 8005d96 <quorem+0x9e>
 8005d30:	f04f 0a00 	mov.w	sl, #0
 8005d34:	4638      	mov	r0, r7
 8005d36:	46b6      	mov	lr, r6
 8005d38:	46d3      	mov	fp, sl
 8005d3a:	f850 2b04 	ldr.w	r2, [r0], #4
 8005d3e:	b293      	uxth	r3, r2
 8005d40:	fb05 a303 	mla	r3, r5, r3, sl
 8005d44:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005d48:	b29b      	uxth	r3, r3
 8005d4a:	ebab 0303 	sub.w	r3, fp, r3
 8005d4e:	0c12      	lsrs	r2, r2, #16
 8005d50:	f8de b000 	ldr.w	fp, [lr]
 8005d54:	fb05 a202 	mla	r2, r5, r2, sl
 8005d58:	fa13 f38b 	uxtah	r3, r3, fp
 8005d5c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8005d60:	fa1f fb82 	uxth.w	fp, r2
 8005d64:	f8de 2000 	ldr.w	r2, [lr]
 8005d68:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8005d6c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005d70:	b29b      	uxth	r3, r3
 8005d72:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005d76:	4581      	cmp	r9, r0
 8005d78:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8005d7c:	f84e 3b04 	str.w	r3, [lr], #4
 8005d80:	d2db      	bcs.n	8005d3a <quorem+0x42>
 8005d82:	f856 300c 	ldr.w	r3, [r6, ip]
 8005d86:	b933      	cbnz	r3, 8005d96 <quorem+0x9e>
 8005d88:	9b01      	ldr	r3, [sp, #4]
 8005d8a:	3b04      	subs	r3, #4
 8005d8c:	429e      	cmp	r6, r3
 8005d8e:	461a      	mov	r2, r3
 8005d90:	d330      	bcc.n	8005df4 <quorem+0xfc>
 8005d92:	f8c8 4010 	str.w	r4, [r8, #16]
 8005d96:	4640      	mov	r0, r8
 8005d98:	f001 fa06 	bl	80071a8 <__mcmp>
 8005d9c:	2800      	cmp	r0, #0
 8005d9e:	db25      	blt.n	8005dec <quorem+0xf4>
 8005da0:	3501      	adds	r5, #1
 8005da2:	4630      	mov	r0, r6
 8005da4:	f04f 0c00 	mov.w	ip, #0
 8005da8:	f857 2b04 	ldr.w	r2, [r7], #4
 8005dac:	f8d0 e000 	ldr.w	lr, [r0]
 8005db0:	b293      	uxth	r3, r2
 8005db2:	ebac 0303 	sub.w	r3, ip, r3
 8005db6:	0c12      	lsrs	r2, r2, #16
 8005db8:	fa13 f38e 	uxtah	r3, r3, lr
 8005dbc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005dc0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005dc4:	b29b      	uxth	r3, r3
 8005dc6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005dca:	45b9      	cmp	r9, r7
 8005dcc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005dd0:	f840 3b04 	str.w	r3, [r0], #4
 8005dd4:	d2e8      	bcs.n	8005da8 <quorem+0xb0>
 8005dd6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8005dda:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8005dde:	b92a      	cbnz	r2, 8005dec <quorem+0xf4>
 8005de0:	3b04      	subs	r3, #4
 8005de2:	429e      	cmp	r6, r3
 8005de4:	461a      	mov	r2, r3
 8005de6:	d30b      	bcc.n	8005e00 <quorem+0x108>
 8005de8:	f8c8 4010 	str.w	r4, [r8, #16]
 8005dec:	4628      	mov	r0, r5
 8005dee:	b003      	add	sp, #12
 8005df0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005df4:	6812      	ldr	r2, [r2, #0]
 8005df6:	3b04      	subs	r3, #4
 8005df8:	2a00      	cmp	r2, #0
 8005dfa:	d1ca      	bne.n	8005d92 <quorem+0x9a>
 8005dfc:	3c01      	subs	r4, #1
 8005dfe:	e7c5      	b.n	8005d8c <quorem+0x94>
 8005e00:	6812      	ldr	r2, [r2, #0]
 8005e02:	3b04      	subs	r3, #4
 8005e04:	2a00      	cmp	r2, #0
 8005e06:	d1ef      	bne.n	8005de8 <quorem+0xf0>
 8005e08:	3c01      	subs	r4, #1
 8005e0a:	e7ea      	b.n	8005de2 <quorem+0xea>
 8005e0c:	2000      	movs	r0, #0
 8005e0e:	e7ee      	b.n	8005dee <quorem+0xf6>

08005e10 <_dtoa_r>:
 8005e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e14:	ec57 6b10 	vmov	r6, r7, d0
 8005e18:	b097      	sub	sp, #92	; 0x5c
 8005e1a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005e1c:	9106      	str	r1, [sp, #24]
 8005e1e:	4604      	mov	r4, r0
 8005e20:	920b      	str	r2, [sp, #44]	; 0x2c
 8005e22:	9312      	str	r3, [sp, #72]	; 0x48
 8005e24:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005e28:	e9cd 6700 	strd	r6, r7, [sp]
 8005e2c:	b93d      	cbnz	r5, 8005e3e <_dtoa_r+0x2e>
 8005e2e:	2010      	movs	r0, #16
 8005e30:	f000 ff92 	bl	8006d58 <malloc>
 8005e34:	6260      	str	r0, [r4, #36]	; 0x24
 8005e36:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005e3a:	6005      	str	r5, [r0, #0]
 8005e3c:	60c5      	str	r5, [r0, #12]
 8005e3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e40:	6819      	ldr	r1, [r3, #0]
 8005e42:	b151      	cbz	r1, 8005e5a <_dtoa_r+0x4a>
 8005e44:	685a      	ldr	r2, [r3, #4]
 8005e46:	604a      	str	r2, [r1, #4]
 8005e48:	2301      	movs	r3, #1
 8005e4a:	4093      	lsls	r3, r2
 8005e4c:	608b      	str	r3, [r1, #8]
 8005e4e:	4620      	mov	r0, r4
 8005e50:	f000 ffc9 	bl	8006de6 <_Bfree>
 8005e54:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e56:	2200      	movs	r2, #0
 8005e58:	601a      	str	r2, [r3, #0]
 8005e5a:	1e3b      	subs	r3, r7, #0
 8005e5c:	bfbb      	ittet	lt
 8005e5e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005e62:	9301      	strlt	r3, [sp, #4]
 8005e64:	2300      	movge	r3, #0
 8005e66:	2201      	movlt	r2, #1
 8005e68:	bfac      	ite	ge
 8005e6a:	f8c8 3000 	strge.w	r3, [r8]
 8005e6e:	f8c8 2000 	strlt.w	r2, [r8]
 8005e72:	4baf      	ldr	r3, [pc, #700]	; (8006130 <_dtoa_r+0x320>)
 8005e74:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005e78:	ea33 0308 	bics.w	r3, r3, r8
 8005e7c:	d114      	bne.n	8005ea8 <_dtoa_r+0x98>
 8005e7e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005e80:	f242 730f 	movw	r3, #9999	; 0x270f
 8005e84:	6013      	str	r3, [r2, #0]
 8005e86:	9b00      	ldr	r3, [sp, #0]
 8005e88:	b923      	cbnz	r3, 8005e94 <_dtoa_r+0x84>
 8005e8a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8005e8e:	2800      	cmp	r0, #0
 8005e90:	f000 8542 	beq.w	8006918 <_dtoa_r+0xb08>
 8005e94:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005e96:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8006144 <_dtoa_r+0x334>
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	f000 8544 	beq.w	8006928 <_dtoa_r+0xb18>
 8005ea0:	f10b 0303 	add.w	r3, fp, #3
 8005ea4:	f000 bd3e 	b.w	8006924 <_dtoa_r+0xb14>
 8005ea8:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005eac:	2200      	movs	r2, #0
 8005eae:	2300      	movs	r3, #0
 8005eb0:	4630      	mov	r0, r6
 8005eb2:	4639      	mov	r1, r7
 8005eb4:	f7fa fe08 	bl	8000ac8 <__aeabi_dcmpeq>
 8005eb8:	4681      	mov	r9, r0
 8005eba:	b168      	cbz	r0, 8005ed8 <_dtoa_r+0xc8>
 8005ebc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	6013      	str	r3, [r2, #0]
 8005ec2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	f000 8524 	beq.w	8006912 <_dtoa_r+0xb02>
 8005eca:	4b9a      	ldr	r3, [pc, #616]	; (8006134 <_dtoa_r+0x324>)
 8005ecc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005ece:	f103 3bff 	add.w	fp, r3, #4294967295
 8005ed2:	6013      	str	r3, [r2, #0]
 8005ed4:	f000 bd28 	b.w	8006928 <_dtoa_r+0xb18>
 8005ed8:	aa14      	add	r2, sp, #80	; 0x50
 8005eda:	a915      	add	r1, sp, #84	; 0x54
 8005edc:	ec47 6b10 	vmov	d0, r6, r7
 8005ee0:	4620      	mov	r0, r4
 8005ee2:	f001 f9d8 	bl	8007296 <__d2b>
 8005ee6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005eea:	9004      	str	r0, [sp, #16]
 8005eec:	2d00      	cmp	r5, #0
 8005eee:	d07c      	beq.n	8005fea <_dtoa_r+0x1da>
 8005ef0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005ef4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8005ef8:	46b2      	mov	sl, r6
 8005efa:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8005efe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005f02:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8005f06:	2200      	movs	r2, #0
 8005f08:	4b8b      	ldr	r3, [pc, #556]	; (8006138 <_dtoa_r+0x328>)
 8005f0a:	4650      	mov	r0, sl
 8005f0c:	4659      	mov	r1, fp
 8005f0e:	f7fa f9bb 	bl	8000288 <__aeabi_dsub>
 8005f12:	a381      	add	r3, pc, #516	; (adr r3, 8006118 <_dtoa_r+0x308>)
 8005f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f18:	f7fa fb6e 	bl	80005f8 <__aeabi_dmul>
 8005f1c:	a380      	add	r3, pc, #512	; (adr r3, 8006120 <_dtoa_r+0x310>)
 8005f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f22:	f7fa f9b3 	bl	800028c <__adddf3>
 8005f26:	4606      	mov	r6, r0
 8005f28:	4628      	mov	r0, r5
 8005f2a:	460f      	mov	r7, r1
 8005f2c:	f7fa fafa 	bl	8000524 <__aeabi_i2d>
 8005f30:	a37d      	add	r3, pc, #500	; (adr r3, 8006128 <_dtoa_r+0x318>)
 8005f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f36:	f7fa fb5f 	bl	80005f8 <__aeabi_dmul>
 8005f3a:	4602      	mov	r2, r0
 8005f3c:	460b      	mov	r3, r1
 8005f3e:	4630      	mov	r0, r6
 8005f40:	4639      	mov	r1, r7
 8005f42:	f7fa f9a3 	bl	800028c <__adddf3>
 8005f46:	4606      	mov	r6, r0
 8005f48:	460f      	mov	r7, r1
 8005f4a:	f7fa fe05 	bl	8000b58 <__aeabi_d2iz>
 8005f4e:	2200      	movs	r2, #0
 8005f50:	4682      	mov	sl, r0
 8005f52:	2300      	movs	r3, #0
 8005f54:	4630      	mov	r0, r6
 8005f56:	4639      	mov	r1, r7
 8005f58:	f7fa fdc0 	bl	8000adc <__aeabi_dcmplt>
 8005f5c:	b148      	cbz	r0, 8005f72 <_dtoa_r+0x162>
 8005f5e:	4650      	mov	r0, sl
 8005f60:	f7fa fae0 	bl	8000524 <__aeabi_i2d>
 8005f64:	4632      	mov	r2, r6
 8005f66:	463b      	mov	r3, r7
 8005f68:	f7fa fdae 	bl	8000ac8 <__aeabi_dcmpeq>
 8005f6c:	b908      	cbnz	r0, 8005f72 <_dtoa_r+0x162>
 8005f6e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005f72:	f1ba 0f16 	cmp.w	sl, #22
 8005f76:	d859      	bhi.n	800602c <_dtoa_r+0x21c>
 8005f78:	4970      	ldr	r1, [pc, #448]	; (800613c <_dtoa_r+0x32c>)
 8005f7a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8005f7e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005f82:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f86:	f7fa fdc7 	bl	8000b18 <__aeabi_dcmpgt>
 8005f8a:	2800      	cmp	r0, #0
 8005f8c:	d050      	beq.n	8006030 <_dtoa_r+0x220>
 8005f8e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005f92:	2300      	movs	r3, #0
 8005f94:	930f      	str	r3, [sp, #60]	; 0x3c
 8005f96:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005f98:	1b5d      	subs	r5, r3, r5
 8005f9a:	f1b5 0801 	subs.w	r8, r5, #1
 8005f9e:	bf49      	itett	mi
 8005fa0:	f1c5 0301 	rsbmi	r3, r5, #1
 8005fa4:	2300      	movpl	r3, #0
 8005fa6:	9305      	strmi	r3, [sp, #20]
 8005fa8:	f04f 0800 	movmi.w	r8, #0
 8005fac:	bf58      	it	pl
 8005fae:	9305      	strpl	r3, [sp, #20]
 8005fb0:	f1ba 0f00 	cmp.w	sl, #0
 8005fb4:	db3e      	blt.n	8006034 <_dtoa_r+0x224>
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	44d0      	add	r8, sl
 8005fba:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8005fbe:	9307      	str	r3, [sp, #28]
 8005fc0:	9b06      	ldr	r3, [sp, #24]
 8005fc2:	2b09      	cmp	r3, #9
 8005fc4:	f200 8090 	bhi.w	80060e8 <_dtoa_r+0x2d8>
 8005fc8:	2b05      	cmp	r3, #5
 8005fca:	bfc4      	itt	gt
 8005fcc:	3b04      	subgt	r3, #4
 8005fce:	9306      	strgt	r3, [sp, #24]
 8005fd0:	9b06      	ldr	r3, [sp, #24]
 8005fd2:	f1a3 0302 	sub.w	r3, r3, #2
 8005fd6:	bfcc      	ite	gt
 8005fd8:	2500      	movgt	r5, #0
 8005fda:	2501      	movle	r5, #1
 8005fdc:	2b03      	cmp	r3, #3
 8005fde:	f200 808f 	bhi.w	8006100 <_dtoa_r+0x2f0>
 8005fe2:	e8df f003 	tbb	[pc, r3]
 8005fe6:	7f7d      	.short	0x7f7d
 8005fe8:	7131      	.short	0x7131
 8005fea:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8005fee:	441d      	add	r5, r3
 8005ff0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8005ff4:	2820      	cmp	r0, #32
 8005ff6:	dd13      	ble.n	8006020 <_dtoa_r+0x210>
 8005ff8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8005ffc:	9b00      	ldr	r3, [sp, #0]
 8005ffe:	fa08 f800 	lsl.w	r8, r8, r0
 8006002:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8006006:	fa23 f000 	lsr.w	r0, r3, r0
 800600a:	ea48 0000 	orr.w	r0, r8, r0
 800600e:	f7fa fa79 	bl	8000504 <__aeabi_ui2d>
 8006012:	2301      	movs	r3, #1
 8006014:	4682      	mov	sl, r0
 8006016:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800601a:	3d01      	subs	r5, #1
 800601c:	9313      	str	r3, [sp, #76]	; 0x4c
 800601e:	e772      	b.n	8005f06 <_dtoa_r+0xf6>
 8006020:	9b00      	ldr	r3, [sp, #0]
 8006022:	f1c0 0020 	rsb	r0, r0, #32
 8006026:	fa03 f000 	lsl.w	r0, r3, r0
 800602a:	e7f0      	b.n	800600e <_dtoa_r+0x1fe>
 800602c:	2301      	movs	r3, #1
 800602e:	e7b1      	b.n	8005f94 <_dtoa_r+0x184>
 8006030:	900f      	str	r0, [sp, #60]	; 0x3c
 8006032:	e7b0      	b.n	8005f96 <_dtoa_r+0x186>
 8006034:	9b05      	ldr	r3, [sp, #20]
 8006036:	eba3 030a 	sub.w	r3, r3, sl
 800603a:	9305      	str	r3, [sp, #20]
 800603c:	f1ca 0300 	rsb	r3, sl, #0
 8006040:	9307      	str	r3, [sp, #28]
 8006042:	2300      	movs	r3, #0
 8006044:	930e      	str	r3, [sp, #56]	; 0x38
 8006046:	e7bb      	b.n	8005fc0 <_dtoa_r+0x1b0>
 8006048:	2301      	movs	r3, #1
 800604a:	930a      	str	r3, [sp, #40]	; 0x28
 800604c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800604e:	2b00      	cmp	r3, #0
 8006050:	dd59      	ble.n	8006106 <_dtoa_r+0x2f6>
 8006052:	9302      	str	r3, [sp, #8]
 8006054:	4699      	mov	r9, r3
 8006056:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006058:	2200      	movs	r2, #0
 800605a:	6072      	str	r2, [r6, #4]
 800605c:	2204      	movs	r2, #4
 800605e:	f102 0014 	add.w	r0, r2, #20
 8006062:	4298      	cmp	r0, r3
 8006064:	6871      	ldr	r1, [r6, #4]
 8006066:	d953      	bls.n	8006110 <_dtoa_r+0x300>
 8006068:	4620      	mov	r0, r4
 800606a:	f000 fe88 	bl	8006d7e <_Balloc>
 800606e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006070:	6030      	str	r0, [r6, #0]
 8006072:	f1b9 0f0e 	cmp.w	r9, #14
 8006076:	f8d3 b000 	ldr.w	fp, [r3]
 800607a:	f200 80e6 	bhi.w	800624a <_dtoa_r+0x43a>
 800607e:	2d00      	cmp	r5, #0
 8006080:	f000 80e3 	beq.w	800624a <_dtoa_r+0x43a>
 8006084:	ed9d 7b00 	vldr	d7, [sp]
 8006088:	f1ba 0f00 	cmp.w	sl, #0
 800608c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8006090:	dd74      	ble.n	800617c <_dtoa_r+0x36c>
 8006092:	4a2a      	ldr	r2, [pc, #168]	; (800613c <_dtoa_r+0x32c>)
 8006094:	f00a 030f 	and.w	r3, sl, #15
 8006098:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800609c:	ed93 7b00 	vldr	d7, [r3]
 80060a0:	ea4f 162a 	mov.w	r6, sl, asr #4
 80060a4:	06f0      	lsls	r0, r6, #27
 80060a6:	ed8d 7b08 	vstr	d7, [sp, #32]
 80060aa:	d565      	bpl.n	8006178 <_dtoa_r+0x368>
 80060ac:	4b24      	ldr	r3, [pc, #144]	; (8006140 <_dtoa_r+0x330>)
 80060ae:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80060b2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80060b6:	f7fa fbc9 	bl	800084c <__aeabi_ddiv>
 80060ba:	e9cd 0100 	strd	r0, r1, [sp]
 80060be:	f006 060f 	and.w	r6, r6, #15
 80060c2:	2503      	movs	r5, #3
 80060c4:	4f1e      	ldr	r7, [pc, #120]	; (8006140 <_dtoa_r+0x330>)
 80060c6:	e04c      	b.n	8006162 <_dtoa_r+0x352>
 80060c8:	2301      	movs	r3, #1
 80060ca:	930a      	str	r3, [sp, #40]	; 0x28
 80060cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80060ce:	4453      	add	r3, sl
 80060d0:	f103 0901 	add.w	r9, r3, #1
 80060d4:	9302      	str	r3, [sp, #8]
 80060d6:	464b      	mov	r3, r9
 80060d8:	2b01      	cmp	r3, #1
 80060da:	bfb8      	it	lt
 80060dc:	2301      	movlt	r3, #1
 80060de:	e7ba      	b.n	8006056 <_dtoa_r+0x246>
 80060e0:	2300      	movs	r3, #0
 80060e2:	e7b2      	b.n	800604a <_dtoa_r+0x23a>
 80060e4:	2300      	movs	r3, #0
 80060e6:	e7f0      	b.n	80060ca <_dtoa_r+0x2ba>
 80060e8:	2501      	movs	r5, #1
 80060ea:	2300      	movs	r3, #0
 80060ec:	9306      	str	r3, [sp, #24]
 80060ee:	950a      	str	r5, [sp, #40]	; 0x28
 80060f0:	f04f 33ff 	mov.w	r3, #4294967295
 80060f4:	9302      	str	r3, [sp, #8]
 80060f6:	4699      	mov	r9, r3
 80060f8:	2200      	movs	r2, #0
 80060fa:	2312      	movs	r3, #18
 80060fc:	920b      	str	r2, [sp, #44]	; 0x2c
 80060fe:	e7aa      	b.n	8006056 <_dtoa_r+0x246>
 8006100:	2301      	movs	r3, #1
 8006102:	930a      	str	r3, [sp, #40]	; 0x28
 8006104:	e7f4      	b.n	80060f0 <_dtoa_r+0x2e0>
 8006106:	2301      	movs	r3, #1
 8006108:	9302      	str	r3, [sp, #8]
 800610a:	4699      	mov	r9, r3
 800610c:	461a      	mov	r2, r3
 800610e:	e7f5      	b.n	80060fc <_dtoa_r+0x2ec>
 8006110:	3101      	adds	r1, #1
 8006112:	6071      	str	r1, [r6, #4]
 8006114:	0052      	lsls	r2, r2, #1
 8006116:	e7a2      	b.n	800605e <_dtoa_r+0x24e>
 8006118:	636f4361 	.word	0x636f4361
 800611c:	3fd287a7 	.word	0x3fd287a7
 8006120:	8b60c8b3 	.word	0x8b60c8b3
 8006124:	3fc68a28 	.word	0x3fc68a28
 8006128:	509f79fb 	.word	0x509f79fb
 800612c:	3fd34413 	.word	0x3fd34413
 8006130:	7ff00000 	.word	0x7ff00000
 8006134:	080079c9 	.word	0x080079c9
 8006138:	3ff80000 	.word	0x3ff80000
 800613c:	08007a88 	.word	0x08007a88
 8006140:	08007a60 	.word	0x08007a60
 8006144:	080079f5 	.word	0x080079f5
 8006148:	07f1      	lsls	r1, r6, #31
 800614a:	d508      	bpl.n	800615e <_dtoa_r+0x34e>
 800614c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006150:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006154:	f7fa fa50 	bl	80005f8 <__aeabi_dmul>
 8006158:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800615c:	3501      	adds	r5, #1
 800615e:	1076      	asrs	r6, r6, #1
 8006160:	3708      	adds	r7, #8
 8006162:	2e00      	cmp	r6, #0
 8006164:	d1f0      	bne.n	8006148 <_dtoa_r+0x338>
 8006166:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800616a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800616e:	f7fa fb6d 	bl	800084c <__aeabi_ddiv>
 8006172:	e9cd 0100 	strd	r0, r1, [sp]
 8006176:	e01a      	b.n	80061ae <_dtoa_r+0x39e>
 8006178:	2502      	movs	r5, #2
 800617a:	e7a3      	b.n	80060c4 <_dtoa_r+0x2b4>
 800617c:	f000 80a0 	beq.w	80062c0 <_dtoa_r+0x4b0>
 8006180:	f1ca 0600 	rsb	r6, sl, #0
 8006184:	4b9f      	ldr	r3, [pc, #636]	; (8006404 <_dtoa_r+0x5f4>)
 8006186:	4fa0      	ldr	r7, [pc, #640]	; (8006408 <_dtoa_r+0x5f8>)
 8006188:	f006 020f 	and.w	r2, r6, #15
 800618c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006194:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006198:	f7fa fa2e 	bl	80005f8 <__aeabi_dmul>
 800619c:	e9cd 0100 	strd	r0, r1, [sp]
 80061a0:	1136      	asrs	r6, r6, #4
 80061a2:	2300      	movs	r3, #0
 80061a4:	2502      	movs	r5, #2
 80061a6:	2e00      	cmp	r6, #0
 80061a8:	d17f      	bne.n	80062aa <_dtoa_r+0x49a>
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d1e1      	bne.n	8006172 <_dtoa_r+0x362>
 80061ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	f000 8087 	beq.w	80062c4 <_dtoa_r+0x4b4>
 80061b6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80061ba:	2200      	movs	r2, #0
 80061bc:	4b93      	ldr	r3, [pc, #588]	; (800640c <_dtoa_r+0x5fc>)
 80061be:	4630      	mov	r0, r6
 80061c0:	4639      	mov	r1, r7
 80061c2:	f7fa fc8b 	bl	8000adc <__aeabi_dcmplt>
 80061c6:	2800      	cmp	r0, #0
 80061c8:	d07c      	beq.n	80062c4 <_dtoa_r+0x4b4>
 80061ca:	f1b9 0f00 	cmp.w	r9, #0
 80061ce:	d079      	beq.n	80062c4 <_dtoa_r+0x4b4>
 80061d0:	9b02      	ldr	r3, [sp, #8]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	dd35      	ble.n	8006242 <_dtoa_r+0x432>
 80061d6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80061da:	9308      	str	r3, [sp, #32]
 80061dc:	4639      	mov	r1, r7
 80061de:	2200      	movs	r2, #0
 80061e0:	4b8b      	ldr	r3, [pc, #556]	; (8006410 <_dtoa_r+0x600>)
 80061e2:	4630      	mov	r0, r6
 80061e4:	f7fa fa08 	bl	80005f8 <__aeabi_dmul>
 80061e8:	e9cd 0100 	strd	r0, r1, [sp]
 80061ec:	9f02      	ldr	r7, [sp, #8]
 80061ee:	3501      	adds	r5, #1
 80061f0:	4628      	mov	r0, r5
 80061f2:	f7fa f997 	bl	8000524 <__aeabi_i2d>
 80061f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80061fa:	f7fa f9fd 	bl	80005f8 <__aeabi_dmul>
 80061fe:	2200      	movs	r2, #0
 8006200:	4b84      	ldr	r3, [pc, #528]	; (8006414 <_dtoa_r+0x604>)
 8006202:	f7fa f843 	bl	800028c <__adddf3>
 8006206:	4605      	mov	r5, r0
 8006208:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800620c:	2f00      	cmp	r7, #0
 800620e:	d15d      	bne.n	80062cc <_dtoa_r+0x4bc>
 8006210:	2200      	movs	r2, #0
 8006212:	4b81      	ldr	r3, [pc, #516]	; (8006418 <_dtoa_r+0x608>)
 8006214:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006218:	f7fa f836 	bl	8000288 <__aeabi_dsub>
 800621c:	462a      	mov	r2, r5
 800621e:	4633      	mov	r3, r6
 8006220:	e9cd 0100 	strd	r0, r1, [sp]
 8006224:	f7fa fc78 	bl	8000b18 <__aeabi_dcmpgt>
 8006228:	2800      	cmp	r0, #0
 800622a:	f040 8288 	bne.w	800673e <_dtoa_r+0x92e>
 800622e:	462a      	mov	r2, r5
 8006230:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006234:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006238:	f7fa fc50 	bl	8000adc <__aeabi_dcmplt>
 800623c:	2800      	cmp	r0, #0
 800623e:	f040 827c 	bne.w	800673a <_dtoa_r+0x92a>
 8006242:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006246:	e9cd 2300 	strd	r2, r3, [sp]
 800624a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800624c:	2b00      	cmp	r3, #0
 800624e:	f2c0 8150 	blt.w	80064f2 <_dtoa_r+0x6e2>
 8006252:	f1ba 0f0e 	cmp.w	sl, #14
 8006256:	f300 814c 	bgt.w	80064f2 <_dtoa_r+0x6e2>
 800625a:	4b6a      	ldr	r3, [pc, #424]	; (8006404 <_dtoa_r+0x5f4>)
 800625c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006260:	ed93 7b00 	vldr	d7, [r3]
 8006264:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006266:	2b00      	cmp	r3, #0
 8006268:	ed8d 7b02 	vstr	d7, [sp, #8]
 800626c:	f280 80d8 	bge.w	8006420 <_dtoa_r+0x610>
 8006270:	f1b9 0f00 	cmp.w	r9, #0
 8006274:	f300 80d4 	bgt.w	8006420 <_dtoa_r+0x610>
 8006278:	f040 825e 	bne.w	8006738 <_dtoa_r+0x928>
 800627c:	2200      	movs	r2, #0
 800627e:	4b66      	ldr	r3, [pc, #408]	; (8006418 <_dtoa_r+0x608>)
 8006280:	ec51 0b17 	vmov	r0, r1, d7
 8006284:	f7fa f9b8 	bl	80005f8 <__aeabi_dmul>
 8006288:	e9dd 2300 	ldrd	r2, r3, [sp]
 800628c:	f7fa fc3a 	bl	8000b04 <__aeabi_dcmpge>
 8006290:	464f      	mov	r7, r9
 8006292:	464e      	mov	r6, r9
 8006294:	2800      	cmp	r0, #0
 8006296:	f040 8234 	bne.w	8006702 <_dtoa_r+0x8f2>
 800629a:	2331      	movs	r3, #49	; 0x31
 800629c:	f10b 0501 	add.w	r5, fp, #1
 80062a0:	f88b 3000 	strb.w	r3, [fp]
 80062a4:	f10a 0a01 	add.w	sl, sl, #1
 80062a8:	e22f      	b.n	800670a <_dtoa_r+0x8fa>
 80062aa:	07f2      	lsls	r2, r6, #31
 80062ac:	d505      	bpl.n	80062ba <_dtoa_r+0x4aa>
 80062ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062b2:	f7fa f9a1 	bl	80005f8 <__aeabi_dmul>
 80062b6:	3501      	adds	r5, #1
 80062b8:	2301      	movs	r3, #1
 80062ba:	1076      	asrs	r6, r6, #1
 80062bc:	3708      	adds	r7, #8
 80062be:	e772      	b.n	80061a6 <_dtoa_r+0x396>
 80062c0:	2502      	movs	r5, #2
 80062c2:	e774      	b.n	80061ae <_dtoa_r+0x39e>
 80062c4:	f8cd a020 	str.w	sl, [sp, #32]
 80062c8:	464f      	mov	r7, r9
 80062ca:	e791      	b.n	80061f0 <_dtoa_r+0x3e0>
 80062cc:	4b4d      	ldr	r3, [pc, #308]	; (8006404 <_dtoa_r+0x5f4>)
 80062ce:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80062d2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80062d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d047      	beq.n	800636c <_dtoa_r+0x55c>
 80062dc:	4602      	mov	r2, r0
 80062de:	460b      	mov	r3, r1
 80062e0:	2000      	movs	r0, #0
 80062e2:	494e      	ldr	r1, [pc, #312]	; (800641c <_dtoa_r+0x60c>)
 80062e4:	f7fa fab2 	bl	800084c <__aeabi_ddiv>
 80062e8:	462a      	mov	r2, r5
 80062ea:	4633      	mov	r3, r6
 80062ec:	f7f9 ffcc 	bl	8000288 <__aeabi_dsub>
 80062f0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80062f4:	465d      	mov	r5, fp
 80062f6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80062fa:	f7fa fc2d 	bl	8000b58 <__aeabi_d2iz>
 80062fe:	4606      	mov	r6, r0
 8006300:	f7fa f910 	bl	8000524 <__aeabi_i2d>
 8006304:	4602      	mov	r2, r0
 8006306:	460b      	mov	r3, r1
 8006308:	e9dd 0100 	ldrd	r0, r1, [sp]
 800630c:	f7f9 ffbc 	bl	8000288 <__aeabi_dsub>
 8006310:	3630      	adds	r6, #48	; 0x30
 8006312:	f805 6b01 	strb.w	r6, [r5], #1
 8006316:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800631a:	e9cd 0100 	strd	r0, r1, [sp]
 800631e:	f7fa fbdd 	bl	8000adc <__aeabi_dcmplt>
 8006322:	2800      	cmp	r0, #0
 8006324:	d163      	bne.n	80063ee <_dtoa_r+0x5de>
 8006326:	e9dd 2300 	ldrd	r2, r3, [sp]
 800632a:	2000      	movs	r0, #0
 800632c:	4937      	ldr	r1, [pc, #220]	; (800640c <_dtoa_r+0x5fc>)
 800632e:	f7f9 ffab 	bl	8000288 <__aeabi_dsub>
 8006332:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006336:	f7fa fbd1 	bl	8000adc <__aeabi_dcmplt>
 800633a:	2800      	cmp	r0, #0
 800633c:	f040 80b7 	bne.w	80064ae <_dtoa_r+0x69e>
 8006340:	eba5 030b 	sub.w	r3, r5, fp
 8006344:	429f      	cmp	r7, r3
 8006346:	f77f af7c 	ble.w	8006242 <_dtoa_r+0x432>
 800634a:	2200      	movs	r2, #0
 800634c:	4b30      	ldr	r3, [pc, #192]	; (8006410 <_dtoa_r+0x600>)
 800634e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006352:	f7fa f951 	bl	80005f8 <__aeabi_dmul>
 8006356:	2200      	movs	r2, #0
 8006358:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800635c:	4b2c      	ldr	r3, [pc, #176]	; (8006410 <_dtoa_r+0x600>)
 800635e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006362:	f7fa f949 	bl	80005f8 <__aeabi_dmul>
 8006366:	e9cd 0100 	strd	r0, r1, [sp]
 800636a:	e7c4      	b.n	80062f6 <_dtoa_r+0x4e6>
 800636c:	462a      	mov	r2, r5
 800636e:	4633      	mov	r3, r6
 8006370:	f7fa f942 	bl	80005f8 <__aeabi_dmul>
 8006374:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006378:	eb0b 0507 	add.w	r5, fp, r7
 800637c:	465e      	mov	r6, fp
 800637e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006382:	f7fa fbe9 	bl	8000b58 <__aeabi_d2iz>
 8006386:	4607      	mov	r7, r0
 8006388:	f7fa f8cc 	bl	8000524 <__aeabi_i2d>
 800638c:	3730      	adds	r7, #48	; 0x30
 800638e:	4602      	mov	r2, r0
 8006390:	460b      	mov	r3, r1
 8006392:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006396:	f7f9 ff77 	bl	8000288 <__aeabi_dsub>
 800639a:	f806 7b01 	strb.w	r7, [r6], #1
 800639e:	42ae      	cmp	r6, r5
 80063a0:	e9cd 0100 	strd	r0, r1, [sp]
 80063a4:	f04f 0200 	mov.w	r2, #0
 80063a8:	d126      	bne.n	80063f8 <_dtoa_r+0x5e8>
 80063aa:	4b1c      	ldr	r3, [pc, #112]	; (800641c <_dtoa_r+0x60c>)
 80063ac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80063b0:	f7f9 ff6c 	bl	800028c <__adddf3>
 80063b4:	4602      	mov	r2, r0
 80063b6:	460b      	mov	r3, r1
 80063b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80063bc:	f7fa fbac 	bl	8000b18 <__aeabi_dcmpgt>
 80063c0:	2800      	cmp	r0, #0
 80063c2:	d174      	bne.n	80064ae <_dtoa_r+0x69e>
 80063c4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80063c8:	2000      	movs	r0, #0
 80063ca:	4914      	ldr	r1, [pc, #80]	; (800641c <_dtoa_r+0x60c>)
 80063cc:	f7f9 ff5c 	bl	8000288 <__aeabi_dsub>
 80063d0:	4602      	mov	r2, r0
 80063d2:	460b      	mov	r3, r1
 80063d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80063d8:	f7fa fb80 	bl	8000adc <__aeabi_dcmplt>
 80063dc:	2800      	cmp	r0, #0
 80063de:	f43f af30 	beq.w	8006242 <_dtoa_r+0x432>
 80063e2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80063e6:	2b30      	cmp	r3, #48	; 0x30
 80063e8:	f105 32ff 	add.w	r2, r5, #4294967295
 80063ec:	d002      	beq.n	80063f4 <_dtoa_r+0x5e4>
 80063ee:	f8dd a020 	ldr.w	sl, [sp, #32]
 80063f2:	e04a      	b.n	800648a <_dtoa_r+0x67a>
 80063f4:	4615      	mov	r5, r2
 80063f6:	e7f4      	b.n	80063e2 <_dtoa_r+0x5d2>
 80063f8:	4b05      	ldr	r3, [pc, #20]	; (8006410 <_dtoa_r+0x600>)
 80063fa:	f7fa f8fd 	bl	80005f8 <__aeabi_dmul>
 80063fe:	e9cd 0100 	strd	r0, r1, [sp]
 8006402:	e7bc      	b.n	800637e <_dtoa_r+0x56e>
 8006404:	08007a88 	.word	0x08007a88
 8006408:	08007a60 	.word	0x08007a60
 800640c:	3ff00000 	.word	0x3ff00000
 8006410:	40240000 	.word	0x40240000
 8006414:	401c0000 	.word	0x401c0000
 8006418:	40140000 	.word	0x40140000
 800641c:	3fe00000 	.word	0x3fe00000
 8006420:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006424:	465d      	mov	r5, fp
 8006426:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800642a:	4630      	mov	r0, r6
 800642c:	4639      	mov	r1, r7
 800642e:	f7fa fa0d 	bl	800084c <__aeabi_ddiv>
 8006432:	f7fa fb91 	bl	8000b58 <__aeabi_d2iz>
 8006436:	4680      	mov	r8, r0
 8006438:	f7fa f874 	bl	8000524 <__aeabi_i2d>
 800643c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006440:	f7fa f8da 	bl	80005f8 <__aeabi_dmul>
 8006444:	4602      	mov	r2, r0
 8006446:	460b      	mov	r3, r1
 8006448:	4630      	mov	r0, r6
 800644a:	4639      	mov	r1, r7
 800644c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8006450:	f7f9 ff1a 	bl	8000288 <__aeabi_dsub>
 8006454:	f805 6b01 	strb.w	r6, [r5], #1
 8006458:	eba5 060b 	sub.w	r6, r5, fp
 800645c:	45b1      	cmp	r9, r6
 800645e:	4602      	mov	r2, r0
 8006460:	460b      	mov	r3, r1
 8006462:	d139      	bne.n	80064d8 <_dtoa_r+0x6c8>
 8006464:	f7f9 ff12 	bl	800028c <__adddf3>
 8006468:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800646c:	4606      	mov	r6, r0
 800646e:	460f      	mov	r7, r1
 8006470:	f7fa fb52 	bl	8000b18 <__aeabi_dcmpgt>
 8006474:	b9c8      	cbnz	r0, 80064aa <_dtoa_r+0x69a>
 8006476:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800647a:	4630      	mov	r0, r6
 800647c:	4639      	mov	r1, r7
 800647e:	f7fa fb23 	bl	8000ac8 <__aeabi_dcmpeq>
 8006482:	b110      	cbz	r0, 800648a <_dtoa_r+0x67a>
 8006484:	f018 0f01 	tst.w	r8, #1
 8006488:	d10f      	bne.n	80064aa <_dtoa_r+0x69a>
 800648a:	9904      	ldr	r1, [sp, #16]
 800648c:	4620      	mov	r0, r4
 800648e:	f000 fcaa 	bl	8006de6 <_Bfree>
 8006492:	2300      	movs	r3, #0
 8006494:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006496:	702b      	strb	r3, [r5, #0]
 8006498:	f10a 0301 	add.w	r3, sl, #1
 800649c:	6013      	str	r3, [r2, #0]
 800649e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	f000 8241 	beq.w	8006928 <_dtoa_r+0xb18>
 80064a6:	601d      	str	r5, [r3, #0]
 80064a8:	e23e      	b.n	8006928 <_dtoa_r+0xb18>
 80064aa:	f8cd a020 	str.w	sl, [sp, #32]
 80064ae:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80064b2:	2a39      	cmp	r2, #57	; 0x39
 80064b4:	f105 33ff 	add.w	r3, r5, #4294967295
 80064b8:	d108      	bne.n	80064cc <_dtoa_r+0x6bc>
 80064ba:	459b      	cmp	fp, r3
 80064bc:	d10a      	bne.n	80064d4 <_dtoa_r+0x6c4>
 80064be:	9b08      	ldr	r3, [sp, #32]
 80064c0:	3301      	adds	r3, #1
 80064c2:	9308      	str	r3, [sp, #32]
 80064c4:	2330      	movs	r3, #48	; 0x30
 80064c6:	f88b 3000 	strb.w	r3, [fp]
 80064ca:	465b      	mov	r3, fp
 80064cc:	781a      	ldrb	r2, [r3, #0]
 80064ce:	3201      	adds	r2, #1
 80064d0:	701a      	strb	r2, [r3, #0]
 80064d2:	e78c      	b.n	80063ee <_dtoa_r+0x5de>
 80064d4:	461d      	mov	r5, r3
 80064d6:	e7ea      	b.n	80064ae <_dtoa_r+0x69e>
 80064d8:	2200      	movs	r2, #0
 80064da:	4b9b      	ldr	r3, [pc, #620]	; (8006748 <_dtoa_r+0x938>)
 80064dc:	f7fa f88c 	bl	80005f8 <__aeabi_dmul>
 80064e0:	2200      	movs	r2, #0
 80064e2:	2300      	movs	r3, #0
 80064e4:	4606      	mov	r6, r0
 80064e6:	460f      	mov	r7, r1
 80064e8:	f7fa faee 	bl	8000ac8 <__aeabi_dcmpeq>
 80064ec:	2800      	cmp	r0, #0
 80064ee:	d09a      	beq.n	8006426 <_dtoa_r+0x616>
 80064f0:	e7cb      	b.n	800648a <_dtoa_r+0x67a>
 80064f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80064f4:	2a00      	cmp	r2, #0
 80064f6:	f000 808b 	beq.w	8006610 <_dtoa_r+0x800>
 80064fa:	9a06      	ldr	r2, [sp, #24]
 80064fc:	2a01      	cmp	r2, #1
 80064fe:	dc6e      	bgt.n	80065de <_dtoa_r+0x7ce>
 8006500:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006502:	2a00      	cmp	r2, #0
 8006504:	d067      	beq.n	80065d6 <_dtoa_r+0x7c6>
 8006506:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800650a:	9f07      	ldr	r7, [sp, #28]
 800650c:	9d05      	ldr	r5, [sp, #20]
 800650e:	9a05      	ldr	r2, [sp, #20]
 8006510:	2101      	movs	r1, #1
 8006512:	441a      	add	r2, r3
 8006514:	4620      	mov	r0, r4
 8006516:	9205      	str	r2, [sp, #20]
 8006518:	4498      	add	r8, r3
 800651a:	f000 fd04 	bl	8006f26 <__i2b>
 800651e:	4606      	mov	r6, r0
 8006520:	2d00      	cmp	r5, #0
 8006522:	dd0c      	ble.n	800653e <_dtoa_r+0x72e>
 8006524:	f1b8 0f00 	cmp.w	r8, #0
 8006528:	dd09      	ble.n	800653e <_dtoa_r+0x72e>
 800652a:	4545      	cmp	r5, r8
 800652c:	9a05      	ldr	r2, [sp, #20]
 800652e:	462b      	mov	r3, r5
 8006530:	bfa8      	it	ge
 8006532:	4643      	movge	r3, r8
 8006534:	1ad2      	subs	r2, r2, r3
 8006536:	9205      	str	r2, [sp, #20]
 8006538:	1aed      	subs	r5, r5, r3
 800653a:	eba8 0803 	sub.w	r8, r8, r3
 800653e:	9b07      	ldr	r3, [sp, #28]
 8006540:	b1eb      	cbz	r3, 800657e <_dtoa_r+0x76e>
 8006542:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006544:	2b00      	cmp	r3, #0
 8006546:	d067      	beq.n	8006618 <_dtoa_r+0x808>
 8006548:	b18f      	cbz	r7, 800656e <_dtoa_r+0x75e>
 800654a:	4631      	mov	r1, r6
 800654c:	463a      	mov	r2, r7
 800654e:	4620      	mov	r0, r4
 8006550:	f000 fd88 	bl	8007064 <__pow5mult>
 8006554:	9a04      	ldr	r2, [sp, #16]
 8006556:	4601      	mov	r1, r0
 8006558:	4606      	mov	r6, r0
 800655a:	4620      	mov	r0, r4
 800655c:	f000 fcec 	bl	8006f38 <__multiply>
 8006560:	9904      	ldr	r1, [sp, #16]
 8006562:	9008      	str	r0, [sp, #32]
 8006564:	4620      	mov	r0, r4
 8006566:	f000 fc3e 	bl	8006de6 <_Bfree>
 800656a:	9b08      	ldr	r3, [sp, #32]
 800656c:	9304      	str	r3, [sp, #16]
 800656e:	9b07      	ldr	r3, [sp, #28]
 8006570:	1bda      	subs	r2, r3, r7
 8006572:	d004      	beq.n	800657e <_dtoa_r+0x76e>
 8006574:	9904      	ldr	r1, [sp, #16]
 8006576:	4620      	mov	r0, r4
 8006578:	f000 fd74 	bl	8007064 <__pow5mult>
 800657c:	9004      	str	r0, [sp, #16]
 800657e:	2101      	movs	r1, #1
 8006580:	4620      	mov	r0, r4
 8006582:	f000 fcd0 	bl	8006f26 <__i2b>
 8006586:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006588:	4607      	mov	r7, r0
 800658a:	2b00      	cmp	r3, #0
 800658c:	f000 81d0 	beq.w	8006930 <_dtoa_r+0xb20>
 8006590:	461a      	mov	r2, r3
 8006592:	4601      	mov	r1, r0
 8006594:	4620      	mov	r0, r4
 8006596:	f000 fd65 	bl	8007064 <__pow5mult>
 800659a:	9b06      	ldr	r3, [sp, #24]
 800659c:	2b01      	cmp	r3, #1
 800659e:	4607      	mov	r7, r0
 80065a0:	dc40      	bgt.n	8006624 <_dtoa_r+0x814>
 80065a2:	9b00      	ldr	r3, [sp, #0]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d139      	bne.n	800661c <_dtoa_r+0x80c>
 80065a8:	9b01      	ldr	r3, [sp, #4]
 80065aa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d136      	bne.n	8006620 <_dtoa_r+0x810>
 80065b2:	9b01      	ldr	r3, [sp, #4]
 80065b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80065b8:	0d1b      	lsrs	r3, r3, #20
 80065ba:	051b      	lsls	r3, r3, #20
 80065bc:	b12b      	cbz	r3, 80065ca <_dtoa_r+0x7ba>
 80065be:	9b05      	ldr	r3, [sp, #20]
 80065c0:	3301      	adds	r3, #1
 80065c2:	9305      	str	r3, [sp, #20]
 80065c4:	f108 0801 	add.w	r8, r8, #1
 80065c8:	2301      	movs	r3, #1
 80065ca:	9307      	str	r3, [sp, #28]
 80065cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d12a      	bne.n	8006628 <_dtoa_r+0x818>
 80065d2:	2001      	movs	r0, #1
 80065d4:	e030      	b.n	8006638 <_dtoa_r+0x828>
 80065d6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80065d8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80065dc:	e795      	b.n	800650a <_dtoa_r+0x6fa>
 80065de:	9b07      	ldr	r3, [sp, #28]
 80065e0:	f109 37ff 	add.w	r7, r9, #4294967295
 80065e4:	42bb      	cmp	r3, r7
 80065e6:	bfbf      	itttt	lt
 80065e8:	9b07      	ldrlt	r3, [sp, #28]
 80065ea:	9707      	strlt	r7, [sp, #28]
 80065ec:	1afa      	sublt	r2, r7, r3
 80065ee:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80065f0:	bfbb      	ittet	lt
 80065f2:	189b      	addlt	r3, r3, r2
 80065f4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80065f6:	1bdf      	subge	r7, r3, r7
 80065f8:	2700      	movlt	r7, #0
 80065fa:	f1b9 0f00 	cmp.w	r9, #0
 80065fe:	bfb5      	itete	lt
 8006600:	9b05      	ldrlt	r3, [sp, #20]
 8006602:	9d05      	ldrge	r5, [sp, #20]
 8006604:	eba3 0509 	sublt.w	r5, r3, r9
 8006608:	464b      	movge	r3, r9
 800660a:	bfb8      	it	lt
 800660c:	2300      	movlt	r3, #0
 800660e:	e77e      	b.n	800650e <_dtoa_r+0x6fe>
 8006610:	9f07      	ldr	r7, [sp, #28]
 8006612:	9d05      	ldr	r5, [sp, #20]
 8006614:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8006616:	e783      	b.n	8006520 <_dtoa_r+0x710>
 8006618:	9a07      	ldr	r2, [sp, #28]
 800661a:	e7ab      	b.n	8006574 <_dtoa_r+0x764>
 800661c:	2300      	movs	r3, #0
 800661e:	e7d4      	b.n	80065ca <_dtoa_r+0x7ba>
 8006620:	9b00      	ldr	r3, [sp, #0]
 8006622:	e7d2      	b.n	80065ca <_dtoa_r+0x7ba>
 8006624:	2300      	movs	r3, #0
 8006626:	9307      	str	r3, [sp, #28]
 8006628:	693b      	ldr	r3, [r7, #16]
 800662a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800662e:	6918      	ldr	r0, [r3, #16]
 8006630:	f000 fc2b 	bl	8006e8a <__hi0bits>
 8006634:	f1c0 0020 	rsb	r0, r0, #32
 8006638:	4440      	add	r0, r8
 800663a:	f010 001f 	ands.w	r0, r0, #31
 800663e:	d047      	beq.n	80066d0 <_dtoa_r+0x8c0>
 8006640:	f1c0 0320 	rsb	r3, r0, #32
 8006644:	2b04      	cmp	r3, #4
 8006646:	dd3b      	ble.n	80066c0 <_dtoa_r+0x8b0>
 8006648:	9b05      	ldr	r3, [sp, #20]
 800664a:	f1c0 001c 	rsb	r0, r0, #28
 800664e:	4403      	add	r3, r0
 8006650:	9305      	str	r3, [sp, #20]
 8006652:	4405      	add	r5, r0
 8006654:	4480      	add	r8, r0
 8006656:	9b05      	ldr	r3, [sp, #20]
 8006658:	2b00      	cmp	r3, #0
 800665a:	dd05      	ble.n	8006668 <_dtoa_r+0x858>
 800665c:	461a      	mov	r2, r3
 800665e:	9904      	ldr	r1, [sp, #16]
 8006660:	4620      	mov	r0, r4
 8006662:	f000 fd4d 	bl	8007100 <__lshift>
 8006666:	9004      	str	r0, [sp, #16]
 8006668:	f1b8 0f00 	cmp.w	r8, #0
 800666c:	dd05      	ble.n	800667a <_dtoa_r+0x86a>
 800666e:	4639      	mov	r1, r7
 8006670:	4642      	mov	r2, r8
 8006672:	4620      	mov	r0, r4
 8006674:	f000 fd44 	bl	8007100 <__lshift>
 8006678:	4607      	mov	r7, r0
 800667a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800667c:	b353      	cbz	r3, 80066d4 <_dtoa_r+0x8c4>
 800667e:	4639      	mov	r1, r7
 8006680:	9804      	ldr	r0, [sp, #16]
 8006682:	f000 fd91 	bl	80071a8 <__mcmp>
 8006686:	2800      	cmp	r0, #0
 8006688:	da24      	bge.n	80066d4 <_dtoa_r+0x8c4>
 800668a:	2300      	movs	r3, #0
 800668c:	220a      	movs	r2, #10
 800668e:	9904      	ldr	r1, [sp, #16]
 8006690:	4620      	mov	r0, r4
 8006692:	f000 fbbf 	bl	8006e14 <__multadd>
 8006696:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006698:	9004      	str	r0, [sp, #16]
 800669a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800669e:	2b00      	cmp	r3, #0
 80066a0:	f000 814d 	beq.w	800693e <_dtoa_r+0xb2e>
 80066a4:	2300      	movs	r3, #0
 80066a6:	4631      	mov	r1, r6
 80066a8:	220a      	movs	r2, #10
 80066aa:	4620      	mov	r0, r4
 80066ac:	f000 fbb2 	bl	8006e14 <__multadd>
 80066b0:	9b02      	ldr	r3, [sp, #8]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	4606      	mov	r6, r0
 80066b6:	dc4f      	bgt.n	8006758 <_dtoa_r+0x948>
 80066b8:	9b06      	ldr	r3, [sp, #24]
 80066ba:	2b02      	cmp	r3, #2
 80066bc:	dd4c      	ble.n	8006758 <_dtoa_r+0x948>
 80066be:	e011      	b.n	80066e4 <_dtoa_r+0x8d4>
 80066c0:	d0c9      	beq.n	8006656 <_dtoa_r+0x846>
 80066c2:	9a05      	ldr	r2, [sp, #20]
 80066c4:	331c      	adds	r3, #28
 80066c6:	441a      	add	r2, r3
 80066c8:	9205      	str	r2, [sp, #20]
 80066ca:	441d      	add	r5, r3
 80066cc:	4498      	add	r8, r3
 80066ce:	e7c2      	b.n	8006656 <_dtoa_r+0x846>
 80066d0:	4603      	mov	r3, r0
 80066d2:	e7f6      	b.n	80066c2 <_dtoa_r+0x8b2>
 80066d4:	f1b9 0f00 	cmp.w	r9, #0
 80066d8:	dc38      	bgt.n	800674c <_dtoa_r+0x93c>
 80066da:	9b06      	ldr	r3, [sp, #24]
 80066dc:	2b02      	cmp	r3, #2
 80066de:	dd35      	ble.n	800674c <_dtoa_r+0x93c>
 80066e0:	f8cd 9008 	str.w	r9, [sp, #8]
 80066e4:	9b02      	ldr	r3, [sp, #8]
 80066e6:	b963      	cbnz	r3, 8006702 <_dtoa_r+0x8f2>
 80066e8:	4639      	mov	r1, r7
 80066ea:	2205      	movs	r2, #5
 80066ec:	4620      	mov	r0, r4
 80066ee:	f000 fb91 	bl	8006e14 <__multadd>
 80066f2:	4601      	mov	r1, r0
 80066f4:	4607      	mov	r7, r0
 80066f6:	9804      	ldr	r0, [sp, #16]
 80066f8:	f000 fd56 	bl	80071a8 <__mcmp>
 80066fc:	2800      	cmp	r0, #0
 80066fe:	f73f adcc 	bgt.w	800629a <_dtoa_r+0x48a>
 8006702:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006704:	465d      	mov	r5, fp
 8006706:	ea6f 0a03 	mvn.w	sl, r3
 800670a:	f04f 0900 	mov.w	r9, #0
 800670e:	4639      	mov	r1, r7
 8006710:	4620      	mov	r0, r4
 8006712:	f000 fb68 	bl	8006de6 <_Bfree>
 8006716:	2e00      	cmp	r6, #0
 8006718:	f43f aeb7 	beq.w	800648a <_dtoa_r+0x67a>
 800671c:	f1b9 0f00 	cmp.w	r9, #0
 8006720:	d005      	beq.n	800672e <_dtoa_r+0x91e>
 8006722:	45b1      	cmp	r9, r6
 8006724:	d003      	beq.n	800672e <_dtoa_r+0x91e>
 8006726:	4649      	mov	r1, r9
 8006728:	4620      	mov	r0, r4
 800672a:	f000 fb5c 	bl	8006de6 <_Bfree>
 800672e:	4631      	mov	r1, r6
 8006730:	4620      	mov	r0, r4
 8006732:	f000 fb58 	bl	8006de6 <_Bfree>
 8006736:	e6a8      	b.n	800648a <_dtoa_r+0x67a>
 8006738:	2700      	movs	r7, #0
 800673a:	463e      	mov	r6, r7
 800673c:	e7e1      	b.n	8006702 <_dtoa_r+0x8f2>
 800673e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8006742:	463e      	mov	r6, r7
 8006744:	e5a9      	b.n	800629a <_dtoa_r+0x48a>
 8006746:	bf00      	nop
 8006748:	40240000 	.word	0x40240000
 800674c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800674e:	f8cd 9008 	str.w	r9, [sp, #8]
 8006752:	2b00      	cmp	r3, #0
 8006754:	f000 80fa 	beq.w	800694c <_dtoa_r+0xb3c>
 8006758:	2d00      	cmp	r5, #0
 800675a:	dd05      	ble.n	8006768 <_dtoa_r+0x958>
 800675c:	4631      	mov	r1, r6
 800675e:	462a      	mov	r2, r5
 8006760:	4620      	mov	r0, r4
 8006762:	f000 fccd 	bl	8007100 <__lshift>
 8006766:	4606      	mov	r6, r0
 8006768:	9b07      	ldr	r3, [sp, #28]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d04c      	beq.n	8006808 <_dtoa_r+0x9f8>
 800676e:	6871      	ldr	r1, [r6, #4]
 8006770:	4620      	mov	r0, r4
 8006772:	f000 fb04 	bl	8006d7e <_Balloc>
 8006776:	6932      	ldr	r2, [r6, #16]
 8006778:	3202      	adds	r2, #2
 800677a:	4605      	mov	r5, r0
 800677c:	0092      	lsls	r2, r2, #2
 800677e:	f106 010c 	add.w	r1, r6, #12
 8006782:	300c      	adds	r0, #12
 8006784:	f000 faf0 	bl	8006d68 <memcpy>
 8006788:	2201      	movs	r2, #1
 800678a:	4629      	mov	r1, r5
 800678c:	4620      	mov	r0, r4
 800678e:	f000 fcb7 	bl	8007100 <__lshift>
 8006792:	9b00      	ldr	r3, [sp, #0]
 8006794:	f8cd b014 	str.w	fp, [sp, #20]
 8006798:	f003 0301 	and.w	r3, r3, #1
 800679c:	46b1      	mov	r9, r6
 800679e:	9307      	str	r3, [sp, #28]
 80067a0:	4606      	mov	r6, r0
 80067a2:	4639      	mov	r1, r7
 80067a4:	9804      	ldr	r0, [sp, #16]
 80067a6:	f7ff faa7 	bl	8005cf8 <quorem>
 80067aa:	4649      	mov	r1, r9
 80067ac:	4605      	mov	r5, r0
 80067ae:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80067b2:	9804      	ldr	r0, [sp, #16]
 80067b4:	f000 fcf8 	bl	80071a8 <__mcmp>
 80067b8:	4632      	mov	r2, r6
 80067ba:	9000      	str	r0, [sp, #0]
 80067bc:	4639      	mov	r1, r7
 80067be:	4620      	mov	r0, r4
 80067c0:	f000 fd0c 	bl	80071dc <__mdiff>
 80067c4:	68c3      	ldr	r3, [r0, #12]
 80067c6:	4602      	mov	r2, r0
 80067c8:	bb03      	cbnz	r3, 800680c <_dtoa_r+0x9fc>
 80067ca:	4601      	mov	r1, r0
 80067cc:	9008      	str	r0, [sp, #32]
 80067ce:	9804      	ldr	r0, [sp, #16]
 80067d0:	f000 fcea 	bl	80071a8 <__mcmp>
 80067d4:	9a08      	ldr	r2, [sp, #32]
 80067d6:	4603      	mov	r3, r0
 80067d8:	4611      	mov	r1, r2
 80067da:	4620      	mov	r0, r4
 80067dc:	9308      	str	r3, [sp, #32]
 80067de:	f000 fb02 	bl	8006de6 <_Bfree>
 80067e2:	9b08      	ldr	r3, [sp, #32]
 80067e4:	b9a3      	cbnz	r3, 8006810 <_dtoa_r+0xa00>
 80067e6:	9a06      	ldr	r2, [sp, #24]
 80067e8:	b992      	cbnz	r2, 8006810 <_dtoa_r+0xa00>
 80067ea:	9a07      	ldr	r2, [sp, #28]
 80067ec:	b982      	cbnz	r2, 8006810 <_dtoa_r+0xa00>
 80067ee:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80067f2:	d029      	beq.n	8006848 <_dtoa_r+0xa38>
 80067f4:	9b00      	ldr	r3, [sp, #0]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	dd01      	ble.n	80067fe <_dtoa_r+0x9ee>
 80067fa:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80067fe:	9b05      	ldr	r3, [sp, #20]
 8006800:	1c5d      	adds	r5, r3, #1
 8006802:	f883 8000 	strb.w	r8, [r3]
 8006806:	e782      	b.n	800670e <_dtoa_r+0x8fe>
 8006808:	4630      	mov	r0, r6
 800680a:	e7c2      	b.n	8006792 <_dtoa_r+0x982>
 800680c:	2301      	movs	r3, #1
 800680e:	e7e3      	b.n	80067d8 <_dtoa_r+0x9c8>
 8006810:	9a00      	ldr	r2, [sp, #0]
 8006812:	2a00      	cmp	r2, #0
 8006814:	db04      	blt.n	8006820 <_dtoa_r+0xa10>
 8006816:	d125      	bne.n	8006864 <_dtoa_r+0xa54>
 8006818:	9a06      	ldr	r2, [sp, #24]
 800681a:	bb1a      	cbnz	r2, 8006864 <_dtoa_r+0xa54>
 800681c:	9a07      	ldr	r2, [sp, #28]
 800681e:	bb0a      	cbnz	r2, 8006864 <_dtoa_r+0xa54>
 8006820:	2b00      	cmp	r3, #0
 8006822:	ddec      	ble.n	80067fe <_dtoa_r+0x9ee>
 8006824:	2201      	movs	r2, #1
 8006826:	9904      	ldr	r1, [sp, #16]
 8006828:	4620      	mov	r0, r4
 800682a:	f000 fc69 	bl	8007100 <__lshift>
 800682e:	4639      	mov	r1, r7
 8006830:	9004      	str	r0, [sp, #16]
 8006832:	f000 fcb9 	bl	80071a8 <__mcmp>
 8006836:	2800      	cmp	r0, #0
 8006838:	dc03      	bgt.n	8006842 <_dtoa_r+0xa32>
 800683a:	d1e0      	bne.n	80067fe <_dtoa_r+0x9ee>
 800683c:	f018 0f01 	tst.w	r8, #1
 8006840:	d0dd      	beq.n	80067fe <_dtoa_r+0x9ee>
 8006842:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006846:	d1d8      	bne.n	80067fa <_dtoa_r+0x9ea>
 8006848:	9b05      	ldr	r3, [sp, #20]
 800684a:	9a05      	ldr	r2, [sp, #20]
 800684c:	1c5d      	adds	r5, r3, #1
 800684e:	2339      	movs	r3, #57	; 0x39
 8006850:	7013      	strb	r3, [r2, #0]
 8006852:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006856:	2b39      	cmp	r3, #57	; 0x39
 8006858:	f105 32ff 	add.w	r2, r5, #4294967295
 800685c:	d04f      	beq.n	80068fe <_dtoa_r+0xaee>
 800685e:	3301      	adds	r3, #1
 8006860:	7013      	strb	r3, [r2, #0]
 8006862:	e754      	b.n	800670e <_dtoa_r+0x8fe>
 8006864:	9a05      	ldr	r2, [sp, #20]
 8006866:	2b00      	cmp	r3, #0
 8006868:	f102 0501 	add.w	r5, r2, #1
 800686c:	dd06      	ble.n	800687c <_dtoa_r+0xa6c>
 800686e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006872:	d0e9      	beq.n	8006848 <_dtoa_r+0xa38>
 8006874:	f108 0801 	add.w	r8, r8, #1
 8006878:	9b05      	ldr	r3, [sp, #20]
 800687a:	e7c2      	b.n	8006802 <_dtoa_r+0x9f2>
 800687c:	9a02      	ldr	r2, [sp, #8]
 800687e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8006882:	eba5 030b 	sub.w	r3, r5, fp
 8006886:	4293      	cmp	r3, r2
 8006888:	d021      	beq.n	80068ce <_dtoa_r+0xabe>
 800688a:	2300      	movs	r3, #0
 800688c:	220a      	movs	r2, #10
 800688e:	9904      	ldr	r1, [sp, #16]
 8006890:	4620      	mov	r0, r4
 8006892:	f000 fabf 	bl	8006e14 <__multadd>
 8006896:	45b1      	cmp	r9, r6
 8006898:	9004      	str	r0, [sp, #16]
 800689a:	f04f 0300 	mov.w	r3, #0
 800689e:	f04f 020a 	mov.w	r2, #10
 80068a2:	4649      	mov	r1, r9
 80068a4:	4620      	mov	r0, r4
 80068a6:	d105      	bne.n	80068b4 <_dtoa_r+0xaa4>
 80068a8:	f000 fab4 	bl	8006e14 <__multadd>
 80068ac:	4681      	mov	r9, r0
 80068ae:	4606      	mov	r6, r0
 80068b0:	9505      	str	r5, [sp, #20]
 80068b2:	e776      	b.n	80067a2 <_dtoa_r+0x992>
 80068b4:	f000 faae 	bl	8006e14 <__multadd>
 80068b8:	4631      	mov	r1, r6
 80068ba:	4681      	mov	r9, r0
 80068bc:	2300      	movs	r3, #0
 80068be:	220a      	movs	r2, #10
 80068c0:	4620      	mov	r0, r4
 80068c2:	f000 faa7 	bl	8006e14 <__multadd>
 80068c6:	4606      	mov	r6, r0
 80068c8:	e7f2      	b.n	80068b0 <_dtoa_r+0xaa0>
 80068ca:	f04f 0900 	mov.w	r9, #0
 80068ce:	2201      	movs	r2, #1
 80068d0:	9904      	ldr	r1, [sp, #16]
 80068d2:	4620      	mov	r0, r4
 80068d4:	f000 fc14 	bl	8007100 <__lshift>
 80068d8:	4639      	mov	r1, r7
 80068da:	9004      	str	r0, [sp, #16]
 80068dc:	f000 fc64 	bl	80071a8 <__mcmp>
 80068e0:	2800      	cmp	r0, #0
 80068e2:	dcb6      	bgt.n	8006852 <_dtoa_r+0xa42>
 80068e4:	d102      	bne.n	80068ec <_dtoa_r+0xadc>
 80068e6:	f018 0f01 	tst.w	r8, #1
 80068ea:	d1b2      	bne.n	8006852 <_dtoa_r+0xa42>
 80068ec:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80068f0:	2b30      	cmp	r3, #48	; 0x30
 80068f2:	f105 32ff 	add.w	r2, r5, #4294967295
 80068f6:	f47f af0a 	bne.w	800670e <_dtoa_r+0x8fe>
 80068fa:	4615      	mov	r5, r2
 80068fc:	e7f6      	b.n	80068ec <_dtoa_r+0xadc>
 80068fe:	4593      	cmp	fp, r2
 8006900:	d105      	bne.n	800690e <_dtoa_r+0xafe>
 8006902:	2331      	movs	r3, #49	; 0x31
 8006904:	f10a 0a01 	add.w	sl, sl, #1
 8006908:	f88b 3000 	strb.w	r3, [fp]
 800690c:	e6ff      	b.n	800670e <_dtoa_r+0x8fe>
 800690e:	4615      	mov	r5, r2
 8006910:	e79f      	b.n	8006852 <_dtoa_r+0xa42>
 8006912:	f8df b064 	ldr.w	fp, [pc, #100]	; 8006978 <_dtoa_r+0xb68>
 8006916:	e007      	b.n	8006928 <_dtoa_r+0xb18>
 8006918:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800691a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800697c <_dtoa_r+0xb6c>
 800691e:	b11b      	cbz	r3, 8006928 <_dtoa_r+0xb18>
 8006920:	f10b 0308 	add.w	r3, fp, #8
 8006924:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006926:	6013      	str	r3, [r2, #0]
 8006928:	4658      	mov	r0, fp
 800692a:	b017      	add	sp, #92	; 0x5c
 800692c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006930:	9b06      	ldr	r3, [sp, #24]
 8006932:	2b01      	cmp	r3, #1
 8006934:	f77f ae35 	ble.w	80065a2 <_dtoa_r+0x792>
 8006938:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800693a:	9307      	str	r3, [sp, #28]
 800693c:	e649      	b.n	80065d2 <_dtoa_r+0x7c2>
 800693e:	9b02      	ldr	r3, [sp, #8]
 8006940:	2b00      	cmp	r3, #0
 8006942:	dc03      	bgt.n	800694c <_dtoa_r+0xb3c>
 8006944:	9b06      	ldr	r3, [sp, #24]
 8006946:	2b02      	cmp	r3, #2
 8006948:	f73f aecc 	bgt.w	80066e4 <_dtoa_r+0x8d4>
 800694c:	465d      	mov	r5, fp
 800694e:	4639      	mov	r1, r7
 8006950:	9804      	ldr	r0, [sp, #16]
 8006952:	f7ff f9d1 	bl	8005cf8 <quorem>
 8006956:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800695a:	f805 8b01 	strb.w	r8, [r5], #1
 800695e:	9a02      	ldr	r2, [sp, #8]
 8006960:	eba5 030b 	sub.w	r3, r5, fp
 8006964:	429a      	cmp	r2, r3
 8006966:	ddb0      	ble.n	80068ca <_dtoa_r+0xaba>
 8006968:	2300      	movs	r3, #0
 800696a:	220a      	movs	r2, #10
 800696c:	9904      	ldr	r1, [sp, #16]
 800696e:	4620      	mov	r0, r4
 8006970:	f000 fa50 	bl	8006e14 <__multadd>
 8006974:	9004      	str	r0, [sp, #16]
 8006976:	e7ea      	b.n	800694e <_dtoa_r+0xb3e>
 8006978:	080079c8 	.word	0x080079c8
 800697c:	080079ec 	.word	0x080079ec

08006980 <__sflush_r>:
 8006980:	898a      	ldrh	r2, [r1, #12]
 8006982:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006986:	4605      	mov	r5, r0
 8006988:	0710      	lsls	r0, r2, #28
 800698a:	460c      	mov	r4, r1
 800698c:	d458      	bmi.n	8006a40 <__sflush_r+0xc0>
 800698e:	684b      	ldr	r3, [r1, #4]
 8006990:	2b00      	cmp	r3, #0
 8006992:	dc05      	bgt.n	80069a0 <__sflush_r+0x20>
 8006994:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006996:	2b00      	cmp	r3, #0
 8006998:	dc02      	bgt.n	80069a0 <__sflush_r+0x20>
 800699a:	2000      	movs	r0, #0
 800699c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80069a2:	2e00      	cmp	r6, #0
 80069a4:	d0f9      	beq.n	800699a <__sflush_r+0x1a>
 80069a6:	2300      	movs	r3, #0
 80069a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80069ac:	682f      	ldr	r7, [r5, #0]
 80069ae:	6a21      	ldr	r1, [r4, #32]
 80069b0:	602b      	str	r3, [r5, #0]
 80069b2:	d032      	beq.n	8006a1a <__sflush_r+0x9a>
 80069b4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80069b6:	89a3      	ldrh	r3, [r4, #12]
 80069b8:	075a      	lsls	r2, r3, #29
 80069ba:	d505      	bpl.n	80069c8 <__sflush_r+0x48>
 80069bc:	6863      	ldr	r3, [r4, #4]
 80069be:	1ac0      	subs	r0, r0, r3
 80069c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80069c2:	b10b      	cbz	r3, 80069c8 <__sflush_r+0x48>
 80069c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80069c6:	1ac0      	subs	r0, r0, r3
 80069c8:	2300      	movs	r3, #0
 80069ca:	4602      	mov	r2, r0
 80069cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80069ce:	6a21      	ldr	r1, [r4, #32]
 80069d0:	4628      	mov	r0, r5
 80069d2:	47b0      	blx	r6
 80069d4:	1c43      	adds	r3, r0, #1
 80069d6:	89a3      	ldrh	r3, [r4, #12]
 80069d8:	d106      	bne.n	80069e8 <__sflush_r+0x68>
 80069da:	6829      	ldr	r1, [r5, #0]
 80069dc:	291d      	cmp	r1, #29
 80069de:	d848      	bhi.n	8006a72 <__sflush_r+0xf2>
 80069e0:	4a29      	ldr	r2, [pc, #164]	; (8006a88 <__sflush_r+0x108>)
 80069e2:	40ca      	lsrs	r2, r1
 80069e4:	07d6      	lsls	r6, r2, #31
 80069e6:	d544      	bpl.n	8006a72 <__sflush_r+0xf2>
 80069e8:	2200      	movs	r2, #0
 80069ea:	6062      	str	r2, [r4, #4]
 80069ec:	04d9      	lsls	r1, r3, #19
 80069ee:	6922      	ldr	r2, [r4, #16]
 80069f0:	6022      	str	r2, [r4, #0]
 80069f2:	d504      	bpl.n	80069fe <__sflush_r+0x7e>
 80069f4:	1c42      	adds	r2, r0, #1
 80069f6:	d101      	bne.n	80069fc <__sflush_r+0x7c>
 80069f8:	682b      	ldr	r3, [r5, #0]
 80069fa:	b903      	cbnz	r3, 80069fe <__sflush_r+0x7e>
 80069fc:	6560      	str	r0, [r4, #84]	; 0x54
 80069fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a00:	602f      	str	r7, [r5, #0]
 8006a02:	2900      	cmp	r1, #0
 8006a04:	d0c9      	beq.n	800699a <__sflush_r+0x1a>
 8006a06:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006a0a:	4299      	cmp	r1, r3
 8006a0c:	d002      	beq.n	8006a14 <__sflush_r+0x94>
 8006a0e:	4628      	mov	r0, r5
 8006a10:	f000 fc9e 	bl	8007350 <_free_r>
 8006a14:	2000      	movs	r0, #0
 8006a16:	6360      	str	r0, [r4, #52]	; 0x34
 8006a18:	e7c0      	b.n	800699c <__sflush_r+0x1c>
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	4628      	mov	r0, r5
 8006a1e:	47b0      	blx	r6
 8006a20:	1c41      	adds	r1, r0, #1
 8006a22:	d1c8      	bne.n	80069b6 <__sflush_r+0x36>
 8006a24:	682b      	ldr	r3, [r5, #0]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d0c5      	beq.n	80069b6 <__sflush_r+0x36>
 8006a2a:	2b1d      	cmp	r3, #29
 8006a2c:	d001      	beq.n	8006a32 <__sflush_r+0xb2>
 8006a2e:	2b16      	cmp	r3, #22
 8006a30:	d101      	bne.n	8006a36 <__sflush_r+0xb6>
 8006a32:	602f      	str	r7, [r5, #0]
 8006a34:	e7b1      	b.n	800699a <__sflush_r+0x1a>
 8006a36:	89a3      	ldrh	r3, [r4, #12]
 8006a38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a3c:	81a3      	strh	r3, [r4, #12]
 8006a3e:	e7ad      	b.n	800699c <__sflush_r+0x1c>
 8006a40:	690f      	ldr	r7, [r1, #16]
 8006a42:	2f00      	cmp	r7, #0
 8006a44:	d0a9      	beq.n	800699a <__sflush_r+0x1a>
 8006a46:	0793      	lsls	r3, r2, #30
 8006a48:	680e      	ldr	r6, [r1, #0]
 8006a4a:	bf08      	it	eq
 8006a4c:	694b      	ldreq	r3, [r1, #20]
 8006a4e:	600f      	str	r7, [r1, #0]
 8006a50:	bf18      	it	ne
 8006a52:	2300      	movne	r3, #0
 8006a54:	eba6 0807 	sub.w	r8, r6, r7
 8006a58:	608b      	str	r3, [r1, #8]
 8006a5a:	f1b8 0f00 	cmp.w	r8, #0
 8006a5e:	dd9c      	ble.n	800699a <__sflush_r+0x1a>
 8006a60:	4643      	mov	r3, r8
 8006a62:	463a      	mov	r2, r7
 8006a64:	6a21      	ldr	r1, [r4, #32]
 8006a66:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006a68:	4628      	mov	r0, r5
 8006a6a:	47b0      	blx	r6
 8006a6c:	2800      	cmp	r0, #0
 8006a6e:	dc06      	bgt.n	8006a7e <__sflush_r+0xfe>
 8006a70:	89a3      	ldrh	r3, [r4, #12]
 8006a72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a76:	81a3      	strh	r3, [r4, #12]
 8006a78:	f04f 30ff 	mov.w	r0, #4294967295
 8006a7c:	e78e      	b.n	800699c <__sflush_r+0x1c>
 8006a7e:	4407      	add	r7, r0
 8006a80:	eba8 0800 	sub.w	r8, r8, r0
 8006a84:	e7e9      	b.n	8006a5a <__sflush_r+0xda>
 8006a86:	bf00      	nop
 8006a88:	20400001 	.word	0x20400001

08006a8c <_fflush_r>:
 8006a8c:	b538      	push	{r3, r4, r5, lr}
 8006a8e:	690b      	ldr	r3, [r1, #16]
 8006a90:	4605      	mov	r5, r0
 8006a92:	460c      	mov	r4, r1
 8006a94:	b1db      	cbz	r3, 8006ace <_fflush_r+0x42>
 8006a96:	b118      	cbz	r0, 8006aa0 <_fflush_r+0x14>
 8006a98:	6983      	ldr	r3, [r0, #24]
 8006a9a:	b90b      	cbnz	r3, 8006aa0 <_fflush_r+0x14>
 8006a9c:	f000 f860 	bl	8006b60 <__sinit>
 8006aa0:	4b0c      	ldr	r3, [pc, #48]	; (8006ad4 <_fflush_r+0x48>)
 8006aa2:	429c      	cmp	r4, r3
 8006aa4:	d109      	bne.n	8006aba <_fflush_r+0x2e>
 8006aa6:	686c      	ldr	r4, [r5, #4]
 8006aa8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006aac:	b17b      	cbz	r3, 8006ace <_fflush_r+0x42>
 8006aae:	4621      	mov	r1, r4
 8006ab0:	4628      	mov	r0, r5
 8006ab2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ab6:	f7ff bf63 	b.w	8006980 <__sflush_r>
 8006aba:	4b07      	ldr	r3, [pc, #28]	; (8006ad8 <_fflush_r+0x4c>)
 8006abc:	429c      	cmp	r4, r3
 8006abe:	d101      	bne.n	8006ac4 <_fflush_r+0x38>
 8006ac0:	68ac      	ldr	r4, [r5, #8]
 8006ac2:	e7f1      	b.n	8006aa8 <_fflush_r+0x1c>
 8006ac4:	4b05      	ldr	r3, [pc, #20]	; (8006adc <_fflush_r+0x50>)
 8006ac6:	429c      	cmp	r4, r3
 8006ac8:	bf08      	it	eq
 8006aca:	68ec      	ldreq	r4, [r5, #12]
 8006acc:	e7ec      	b.n	8006aa8 <_fflush_r+0x1c>
 8006ace:	2000      	movs	r0, #0
 8006ad0:	bd38      	pop	{r3, r4, r5, pc}
 8006ad2:	bf00      	nop
 8006ad4:	08007a1c 	.word	0x08007a1c
 8006ad8:	08007a3c 	.word	0x08007a3c
 8006adc:	080079fc 	.word	0x080079fc

08006ae0 <std>:
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	b510      	push	{r4, lr}
 8006ae4:	4604      	mov	r4, r0
 8006ae6:	e9c0 3300 	strd	r3, r3, [r0]
 8006aea:	6083      	str	r3, [r0, #8]
 8006aec:	8181      	strh	r1, [r0, #12]
 8006aee:	6643      	str	r3, [r0, #100]	; 0x64
 8006af0:	81c2      	strh	r2, [r0, #14]
 8006af2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006af6:	6183      	str	r3, [r0, #24]
 8006af8:	4619      	mov	r1, r3
 8006afa:	2208      	movs	r2, #8
 8006afc:	305c      	adds	r0, #92	; 0x5c
 8006afe:	f7fe fb5b 	bl	80051b8 <memset>
 8006b02:	4b05      	ldr	r3, [pc, #20]	; (8006b18 <std+0x38>)
 8006b04:	6263      	str	r3, [r4, #36]	; 0x24
 8006b06:	4b05      	ldr	r3, [pc, #20]	; (8006b1c <std+0x3c>)
 8006b08:	62a3      	str	r3, [r4, #40]	; 0x28
 8006b0a:	4b05      	ldr	r3, [pc, #20]	; (8006b20 <std+0x40>)
 8006b0c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006b0e:	4b05      	ldr	r3, [pc, #20]	; (8006b24 <std+0x44>)
 8006b10:	6224      	str	r4, [r4, #32]
 8006b12:	6323      	str	r3, [r4, #48]	; 0x30
 8006b14:	bd10      	pop	{r4, pc}
 8006b16:	bf00      	nop
 8006b18:	08007741 	.word	0x08007741
 8006b1c:	08007763 	.word	0x08007763
 8006b20:	0800779b 	.word	0x0800779b
 8006b24:	080077bf 	.word	0x080077bf

08006b28 <_cleanup_r>:
 8006b28:	4901      	ldr	r1, [pc, #4]	; (8006b30 <_cleanup_r+0x8>)
 8006b2a:	f000 b885 	b.w	8006c38 <_fwalk_reent>
 8006b2e:	bf00      	nop
 8006b30:	08006a8d 	.word	0x08006a8d

08006b34 <__sfmoreglue>:
 8006b34:	b570      	push	{r4, r5, r6, lr}
 8006b36:	1e4a      	subs	r2, r1, #1
 8006b38:	2568      	movs	r5, #104	; 0x68
 8006b3a:	4355      	muls	r5, r2
 8006b3c:	460e      	mov	r6, r1
 8006b3e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006b42:	f000 fc53 	bl	80073ec <_malloc_r>
 8006b46:	4604      	mov	r4, r0
 8006b48:	b140      	cbz	r0, 8006b5c <__sfmoreglue+0x28>
 8006b4a:	2100      	movs	r1, #0
 8006b4c:	e9c0 1600 	strd	r1, r6, [r0]
 8006b50:	300c      	adds	r0, #12
 8006b52:	60a0      	str	r0, [r4, #8]
 8006b54:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006b58:	f7fe fb2e 	bl	80051b8 <memset>
 8006b5c:	4620      	mov	r0, r4
 8006b5e:	bd70      	pop	{r4, r5, r6, pc}

08006b60 <__sinit>:
 8006b60:	6983      	ldr	r3, [r0, #24]
 8006b62:	b510      	push	{r4, lr}
 8006b64:	4604      	mov	r4, r0
 8006b66:	bb33      	cbnz	r3, 8006bb6 <__sinit+0x56>
 8006b68:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8006b6c:	6503      	str	r3, [r0, #80]	; 0x50
 8006b6e:	4b12      	ldr	r3, [pc, #72]	; (8006bb8 <__sinit+0x58>)
 8006b70:	4a12      	ldr	r2, [pc, #72]	; (8006bbc <__sinit+0x5c>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	6282      	str	r2, [r0, #40]	; 0x28
 8006b76:	4298      	cmp	r0, r3
 8006b78:	bf04      	itt	eq
 8006b7a:	2301      	moveq	r3, #1
 8006b7c:	6183      	streq	r3, [r0, #24]
 8006b7e:	f000 f81f 	bl	8006bc0 <__sfp>
 8006b82:	6060      	str	r0, [r4, #4]
 8006b84:	4620      	mov	r0, r4
 8006b86:	f000 f81b 	bl	8006bc0 <__sfp>
 8006b8a:	60a0      	str	r0, [r4, #8]
 8006b8c:	4620      	mov	r0, r4
 8006b8e:	f000 f817 	bl	8006bc0 <__sfp>
 8006b92:	2200      	movs	r2, #0
 8006b94:	60e0      	str	r0, [r4, #12]
 8006b96:	2104      	movs	r1, #4
 8006b98:	6860      	ldr	r0, [r4, #4]
 8006b9a:	f7ff ffa1 	bl	8006ae0 <std>
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	2109      	movs	r1, #9
 8006ba2:	68a0      	ldr	r0, [r4, #8]
 8006ba4:	f7ff ff9c 	bl	8006ae0 <std>
 8006ba8:	2202      	movs	r2, #2
 8006baa:	2112      	movs	r1, #18
 8006bac:	68e0      	ldr	r0, [r4, #12]
 8006bae:	f7ff ff97 	bl	8006ae0 <std>
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	61a3      	str	r3, [r4, #24]
 8006bb6:	bd10      	pop	{r4, pc}
 8006bb8:	080079b4 	.word	0x080079b4
 8006bbc:	08006b29 	.word	0x08006b29

08006bc0 <__sfp>:
 8006bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bc2:	4b1b      	ldr	r3, [pc, #108]	; (8006c30 <__sfp+0x70>)
 8006bc4:	681e      	ldr	r6, [r3, #0]
 8006bc6:	69b3      	ldr	r3, [r6, #24]
 8006bc8:	4607      	mov	r7, r0
 8006bca:	b913      	cbnz	r3, 8006bd2 <__sfp+0x12>
 8006bcc:	4630      	mov	r0, r6
 8006bce:	f7ff ffc7 	bl	8006b60 <__sinit>
 8006bd2:	3648      	adds	r6, #72	; 0x48
 8006bd4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006bd8:	3b01      	subs	r3, #1
 8006bda:	d503      	bpl.n	8006be4 <__sfp+0x24>
 8006bdc:	6833      	ldr	r3, [r6, #0]
 8006bde:	b133      	cbz	r3, 8006bee <__sfp+0x2e>
 8006be0:	6836      	ldr	r6, [r6, #0]
 8006be2:	e7f7      	b.n	8006bd4 <__sfp+0x14>
 8006be4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006be8:	b16d      	cbz	r5, 8006c06 <__sfp+0x46>
 8006bea:	3468      	adds	r4, #104	; 0x68
 8006bec:	e7f4      	b.n	8006bd8 <__sfp+0x18>
 8006bee:	2104      	movs	r1, #4
 8006bf0:	4638      	mov	r0, r7
 8006bf2:	f7ff ff9f 	bl	8006b34 <__sfmoreglue>
 8006bf6:	6030      	str	r0, [r6, #0]
 8006bf8:	2800      	cmp	r0, #0
 8006bfa:	d1f1      	bne.n	8006be0 <__sfp+0x20>
 8006bfc:	230c      	movs	r3, #12
 8006bfe:	603b      	str	r3, [r7, #0]
 8006c00:	4604      	mov	r4, r0
 8006c02:	4620      	mov	r0, r4
 8006c04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c06:	4b0b      	ldr	r3, [pc, #44]	; (8006c34 <__sfp+0x74>)
 8006c08:	6665      	str	r5, [r4, #100]	; 0x64
 8006c0a:	e9c4 5500 	strd	r5, r5, [r4]
 8006c0e:	60a5      	str	r5, [r4, #8]
 8006c10:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8006c14:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8006c18:	2208      	movs	r2, #8
 8006c1a:	4629      	mov	r1, r5
 8006c1c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006c20:	f7fe faca 	bl	80051b8 <memset>
 8006c24:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006c28:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006c2c:	e7e9      	b.n	8006c02 <__sfp+0x42>
 8006c2e:	bf00      	nop
 8006c30:	080079b4 	.word	0x080079b4
 8006c34:	ffff0001 	.word	0xffff0001

08006c38 <_fwalk_reent>:
 8006c38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c3c:	4680      	mov	r8, r0
 8006c3e:	4689      	mov	r9, r1
 8006c40:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006c44:	2600      	movs	r6, #0
 8006c46:	b914      	cbnz	r4, 8006c4e <_fwalk_reent+0x16>
 8006c48:	4630      	mov	r0, r6
 8006c4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c4e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8006c52:	3f01      	subs	r7, #1
 8006c54:	d501      	bpl.n	8006c5a <_fwalk_reent+0x22>
 8006c56:	6824      	ldr	r4, [r4, #0]
 8006c58:	e7f5      	b.n	8006c46 <_fwalk_reent+0xe>
 8006c5a:	89ab      	ldrh	r3, [r5, #12]
 8006c5c:	2b01      	cmp	r3, #1
 8006c5e:	d907      	bls.n	8006c70 <_fwalk_reent+0x38>
 8006c60:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006c64:	3301      	adds	r3, #1
 8006c66:	d003      	beq.n	8006c70 <_fwalk_reent+0x38>
 8006c68:	4629      	mov	r1, r5
 8006c6a:	4640      	mov	r0, r8
 8006c6c:	47c8      	blx	r9
 8006c6e:	4306      	orrs	r6, r0
 8006c70:	3568      	adds	r5, #104	; 0x68
 8006c72:	e7ee      	b.n	8006c52 <_fwalk_reent+0x1a>

08006c74 <_localeconv_r>:
 8006c74:	4b04      	ldr	r3, [pc, #16]	; (8006c88 <_localeconv_r+0x14>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	6a18      	ldr	r0, [r3, #32]
 8006c7a:	4b04      	ldr	r3, [pc, #16]	; (8006c8c <_localeconv_r+0x18>)
 8006c7c:	2800      	cmp	r0, #0
 8006c7e:	bf08      	it	eq
 8006c80:	4618      	moveq	r0, r3
 8006c82:	30f0      	adds	r0, #240	; 0xf0
 8006c84:	4770      	bx	lr
 8006c86:	bf00      	nop
 8006c88:	2000000c 	.word	0x2000000c
 8006c8c:	20000070 	.word	0x20000070

08006c90 <__swhatbuf_r>:
 8006c90:	b570      	push	{r4, r5, r6, lr}
 8006c92:	460e      	mov	r6, r1
 8006c94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c98:	2900      	cmp	r1, #0
 8006c9a:	b096      	sub	sp, #88	; 0x58
 8006c9c:	4614      	mov	r4, r2
 8006c9e:	461d      	mov	r5, r3
 8006ca0:	da07      	bge.n	8006cb2 <__swhatbuf_r+0x22>
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	602b      	str	r3, [r5, #0]
 8006ca6:	89b3      	ldrh	r3, [r6, #12]
 8006ca8:	061a      	lsls	r2, r3, #24
 8006caa:	d410      	bmi.n	8006cce <__swhatbuf_r+0x3e>
 8006cac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006cb0:	e00e      	b.n	8006cd0 <__swhatbuf_r+0x40>
 8006cb2:	466a      	mov	r2, sp
 8006cb4:	f000 fdaa 	bl	800780c <_fstat_r>
 8006cb8:	2800      	cmp	r0, #0
 8006cba:	dbf2      	blt.n	8006ca2 <__swhatbuf_r+0x12>
 8006cbc:	9a01      	ldr	r2, [sp, #4]
 8006cbe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006cc2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006cc6:	425a      	negs	r2, r3
 8006cc8:	415a      	adcs	r2, r3
 8006cca:	602a      	str	r2, [r5, #0]
 8006ccc:	e7ee      	b.n	8006cac <__swhatbuf_r+0x1c>
 8006cce:	2340      	movs	r3, #64	; 0x40
 8006cd0:	2000      	movs	r0, #0
 8006cd2:	6023      	str	r3, [r4, #0]
 8006cd4:	b016      	add	sp, #88	; 0x58
 8006cd6:	bd70      	pop	{r4, r5, r6, pc}

08006cd8 <__smakebuf_r>:
 8006cd8:	898b      	ldrh	r3, [r1, #12]
 8006cda:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006cdc:	079d      	lsls	r5, r3, #30
 8006cde:	4606      	mov	r6, r0
 8006ce0:	460c      	mov	r4, r1
 8006ce2:	d507      	bpl.n	8006cf4 <__smakebuf_r+0x1c>
 8006ce4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006ce8:	6023      	str	r3, [r4, #0]
 8006cea:	6123      	str	r3, [r4, #16]
 8006cec:	2301      	movs	r3, #1
 8006cee:	6163      	str	r3, [r4, #20]
 8006cf0:	b002      	add	sp, #8
 8006cf2:	bd70      	pop	{r4, r5, r6, pc}
 8006cf4:	ab01      	add	r3, sp, #4
 8006cf6:	466a      	mov	r2, sp
 8006cf8:	f7ff ffca 	bl	8006c90 <__swhatbuf_r>
 8006cfc:	9900      	ldr	r1, [sp, #0]
 8006cfe:	4605      	mov	r5, r0
 8006d00:	4630      	mov	r0, r6
 8006d02:	f000 fb73 	bl	80073ec <_malloc_r>
 8006d06:	b948      	cbnz	r0, 8006d1c <__smakebuf_r+0x44>
 8006d08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d0c:	059a      	lsls	r2, r3, #22
 8006d0e:	d4ef      	bmi.n	8006cf0 <__smakebuf_r+0x18>
 8006d10:	f023 0303 	bic.w	r3, r3, #3
 8006d14:	f043 0302 	orr.w	r3, r3, #2
 8006d18:	81a3      	strh	r3, [r4, #12]
 8006d1a:	e7e3      	b.n	8006ce4 <__smakebuf_r+0xc>
 8006d1c:	4b0d      	ldr	r3, [pc, #52]	; (8006d54 <__smakebuf_r+0x7c>)
 8006d1e:	62b3      	str	r3, [r6, #40]	; 0x28
 8006d20:	89a3      	ldrh	r3, [r4, #12]
 8006d22:	6020      	str	r0, [r4, #0]
 8006d24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d28:	81a3      	strh	r3, [r4, #12]
 8006d2a:	9b00      	ldr	r3, [sp, #0]
 8006d2c:	6163      	str	r3, [r4, #20]
 8006d2e:	9b01      	ldr	r3, [sp, #4]
 8006d30:	6120      	str	r0, [r4, #16]
 8006d32:	b15b      	cbz	r3, 8006d4c <__smakebuf_r+0x74>
 8006d34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d38:	4630      	mov	r0, r6
 8006d3a:	f000 fd79 	bl	8007830 <_isatty_r>
 8006d3e:	b128      	cbz	r0, 8006d4c <__smakebuf_r+0x74>
 8006d40:	89a3      	ldrh	r3, [r4, #12]
 8006d42:	f023 0303 	bic.w	r3, r3, #3
 8006d46:	f043 0301 	orr.w	r3, r3, #1
 8006d4a:	81a3      	strh	r3, [r4, #12]
 8006d4c:	89a3      	ldrh	r3, [r4, #12]
 8006d4e:	431d      	orrs	r5, r3
 8006d50:	81a5      	strh	r5, [r4, #12]
 8006d52:	e7cd      	b.n	8006cf0 <__smakebuf_r+0x18>
 8006d54:	08006b29 	.word	0x08006b29

08006d58 <malloc>:
 8006d58:	4b02      	ldr	r3, [pc, #8]	; (8006d64 <malloc+0xc>)
 8006d5a:	4601      	mov	r1, r0
 8006d5c:	6818      	ldr	r0, [r3, #0]
 8006d5e:	f000 bb45 	b.w	80073ec <_malloc_r>
 8006d62:	bf00      	nop
 8006d64:	2000000c 	.word	0x2000000c

08006d68 <memcpy>:
 8006d68:	b510      	push	{r4, lr}
 8006d6a:	1e43      	subs	r3, r0, #1
 8006d6c:	440a      	add	r2, r1
 8006d6e:	4291      	cmp	r1, r2
 8006d70:	d100      	bne.n	8006d74 <memcpy+0xc>
 8006d72:	bd10      	pop	{r4, pc}
 8006d74:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d78:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d7c:	e7f7      	b.n	8006d6e <memcpy+0x6>

08006d7e <_Balloc>:
 8006d7e:	b570      	push	{r4, r5, r6, lr}
 8006d80:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006d82:	4604      	mov	r4, r0
 8006d84:	460e      	mov	r6, r1
 8006d86:	b93d      	cbnz	r5, 8006d98 <_Balloc+0x1a>
 8006d88:	2010      	movs	r0, #16
 8006d8a:	f7ff ffe5 	bl	8006d58 <malloc>
 8006d8e:	6260      	str	r0, [r4, #36]	; 0x24
 8006d90:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006d94:	6005      	str	r5, [r0, #0]
 8006d96:	60c5      	str	r5, [r0, #12]
 8006d98:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006d9a:	68eb      	ldr	r3, [r5, #12]
 8006d9c:	b183      	cbz	r3, 8006dc0 <_Balloc+0x42>
 8006d9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006da0:	68db      	ldr	r3, [r3, #12]
 8006da2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006da6:	b9b8      	cbnz	r0, 8006dd8 <_Balloc+0x5a>
 8006da8:	2101      	movs	r1, #1
 8006daa:	fa01 f506 	lsl.w	r5, r1, r6
 8006dae:	1d6a      	adds	r2, r5, #5
 8006db0:	0092      	lsls	r2, r2, #2
 8006db2:	4620      	mov	r0, r4
 8006db4:	f000 fabe 	bl	8007334 <_calloc_r>
 8006db8:	b160      	cbz	r0, 8006dd4 <_Balloc+0x56>
 8006dba:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8006dbe:	e00e      	b.n	8006dde <_Balloc+0x60>
 8006dc0:	2221      	movs	r2, #33	; 0x21
 8006dc2:	2104      	movs	r1, #4
 8006dc4:	4620      	mov	r0, r4
 8006dc6:	f000 fab5 	bl	8007334 <_calloc_r>
 8006dca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006dcc:	60e8      	str	r0, [r5, #12]
 8006dce:	68db      	ldr	r3, [r3, #12]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d1e4      	bne.n	8006d9e <_Balloc+0x20>
 8006dd4:	2000      	movs	r0, #0
 8006dd6:	bd70      	pop	{r4, r5, r6, pc}
 8006dd8:	6802      	ldr	r2, [r0, #0]
 8006dda:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8006dde:	2300      	movs	r3, #0
 8006de0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006de4:	e7f7      	b.n	8006dd6 <_Balloc+0x58>

08006de6 <_Bfree>:
 8006de6:	b570      	push	{r4, r5, r6, lr}
 8006de8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006dea:	4606      	mov	r6, r0
 8006dec:	460d      	mov	r5, r1
 8006dee:	b93c      	cbnz	r4, 8006e00 <_Bfree+0x1a>
 8006df0:	2010      	movs	r0, #16
 8006df2:	f7ff ffb1 	bl	8006d58 <malloc>
 8006df6:	6270      	str	r0, [r6, #36]	; 0x24
 8006df8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006dfc:	6004      	str	r4, [r0, #0]
 8006dfe:	60c4      	str	r4, [r0, #12]
 8006e00:	b13d      	cbz	r5, 8006e12 <_Bfree+0x2c>
 8006e02:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006e04:	686a      	ldr	r2, [r5, #4]
 8006e06:	68db      	ldr	r3, [r3, #12]
 8006e08:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006e0c:	6029      	str	r1, [r5, #0]
 8006e0e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8006e12:	bd70      	pop	{r4, r5, r6, pc}

08006e14 <__multadd>:
 8006e14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e18:	690d      	ldr	r5, [r1, #16]
 8006e1a:	461f      	mov	r7, r3
 8006e1c:	4606      	mov	r6, r0
 8006e1e:	460c      	mov	r4, r1
 8006e20:	f101 0c14 	add.w	ip, r1, #20
 8006e24:	2300      	movs	r3, #0
 8006e26:	f8dc 0000 	ldr.w	r0, [ip]
 8006e2a:	b281      	uxth	r1, r0
 8006e2c:	fb02 7101 	mla	r1, r2, r1, r7
 8006e30:	0c0f      	lsrs	r7, r1, #16
 8006e32:	0c00      	lsrs	r0, r0, #16
 8006e34:	fb02 7000 	mla	r0, r2, r0, r7
 8006e38:	b289      	uxth	r1, r1
 8006e3a:	3301      	adds	r3, #1
 8006e3c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8006e40:	429d      	cmp	r5, r3
 8006e42:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8006e46:	f84c 1b04 	str.w	r1, [ip], #4
 8006e4a:	dcec      	bgt.n	8006e26 <__multadd+0x12>
 8006e4c:	b1d7      	cbz	r7, 8006e84 <__multadd+0x70>
 8006e4e:	68a3      	ldr	r3, [r4, #8]
 8006e50:	42ab      	cmp	r3, r5
 8006e52:	dc12      	bgt.n	8006e7a <__multadd+0x66>
 8006e54:	6861      	ldr	r1, [r4, #4]
 8006e56:	4630      	mov	r0, r6
 8006e58:	3101      	adds	r1, #1
 8006e5a:	f7ff ff90 	bl	8006d7e <_Balloc>
 8006e5e:	6922      	ldr	r2, [r4, #16]
 8006e60:	3202      	adds	r2, #2
 8006e62:	f104 010c 	add.w	r1, r4, #12
 8006e66:	4680      	mov	r8, r0
 8006e68:	0092      	lsls	r2, r2, #2
 8006e6a:	300c      	adds	r0, #12
 8006e6c:	f7ff ff7c 	bl	8006d68 <memcpy>
 8006e70:	4621      	mov	r1, r4
 8006e72:	4630      	mov	r0, r6
 8006e74:	f7ff ffb7 	bl	8006de6 <_Bfree>
 8006e78:	4644      	mov	r4, r8
 8006e7a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006e7e:	3501      	adds	r5, #1
 8006e80:	615f      	str	r7, [r3, #20]
 8006e82:	6125      	str	r5, [r4, #16]
 8006e84:	4620      	mov	r0, r4
 8006e86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006e8a <__hi0bits>:
 8006e8a:	0c02      	lsrs	r2, r0, #16
 8006e8c:	0412      	lsls	r2, r2, #16
 8006e8e:	4603      	mov	r3, r0
 8006e90:	b9b2      	cbnz	r2, 8006ec0 <__hi0bits+0x36>
 8006e92:	0403      	lsls	r3, r0, #16
 8006e94:	2010      	movs	r0, #16
 8006e96:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006e9a:	bf04      	itt	eq
 8006e9c:	021b      	lsleq	r3, r3, #8
 8006e9e:	3008      	addeq	r0, #8
 8006ea0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006ea4:	bf04      	itt	eq
 8006ea6:	011b      	lsleq	r3, r3, #4
 8006ea8:	3004      	addeq	r0, #4
 8006eaa:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006eae:	bf04      	itt	eq
 8006eb0:	009b      	lsleq	r3, r3, #2
 8006eb2:	3002      	addeq	r0, #2
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	db06      	blt.n	8006ec6 <__hi0bits+0x3c>
 8006eb8:	005b      	lsls	r3, r3, #1
 8006eba:	d503      	bpl.n	8006ec4 <__hi0bits+0x3a>
 8006ebc:	3001      	adds	r0, #1
 8006ebe:	4770      	bx	lr
 8006ec0:	2000      	movs	r0, #0
 8006ec2:	e7e8      	b.n	8006e96 <__hi0bits+0xc>
 8006ec4:	2020      	movs	r0, #32
 8006ec6:	4770      	bx	lr

08006ec8 <__lo0bits>:
 8006ec8:	6803      	ldr	r3, [r0, #0]
 8006eca:	f013 0207 	ands.w	r2, r3, #7
 8006ece:	4601      	mov	r1, r0
 8006ed0:	d00b      	beq.n	8006eea <__lo0bits+0x22>
 8006ed2:	07da      	lsls	r2, r3, #31
 8006ed4:	d423      	bmi.n	8006f1e <__lo0bits+0x56>
 8006ed6:	0798      	lsls	r0, r3, #30
 8006ed8:	bf49      	itett	mi
 8006eda:	085b      	lsrmi	r3, r3, #1
 8006edc:	089b      	lsrpl	r3, r3, #2
 8006ede:	2001      	movmi	r0, #1
 8006ee0:	600b      	strmi	r3, [r1, #0]
 8006ee2:	bf5c      	itt	pl
 8006ee4:	600b      	strpl	r3, [r1, #0]
 8006ee6:	2002      	movpl	r0, #2
 8006ee8:	4770      	bx	lr
 8006eea:	b298      	uxth	r0, r3
 8006eec:	b9a8      	cbnz	r0, 8006f1a <__lo0bits+0x52>
 8006eee:	0c1b      	lsrs	r3, r3, #16
 8006ef0:	2010      	movs	r0, #16
 8006ef2:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006ef6:	bf04      	itt	eq
 8006ef8:	0a1b      	lsreq	r3, r3, #8
 8006efa:	3008      	addeq	r0, #8
 8006efc:	071a      	lsls	r2, r3, #28
 8006efe:	bf04      	itt	eq
 8006f00:	091b      	lsreq	r3, r3, #4
 8006f02:	3004      	addeq	r0, #4
 8006f04:	079a      	lsls	r2, r3, #30
 8006f06:	bf04      	itt	eq
 8006f08:	089b      	lsreq	r3, r3, #2
 8006f0a:	3002      	addeq	r0, #2
 8006f0c:	07da      	lsls	r2, r3, #31
 8006f0e:	d402      	bmi.n	8006f16 <__lo0bits+0x4e>
 8006f10:	085b      	lsrs	r3, r3, #1
 8006f12:	d006      	beq.n	8006f22 <__lo0bits+0x5a>
 8006f14:	3001      	adds	r0, #1
 8006f16:	600b      	str	r3, [r1, #0]
 8006f18:	4770      	bx	lr
 8006f1a:	4610      	mov	r0, r2
 8006f1c:	e7e9      	b.n	8006ef2 <__lo0bits+0x2a>
 8006f1e:	2000      	movs	r0, #0
 8006f20:	4770      	bx	lr
 8006f22:	2020      	movs	r0, #32
 8006f24:	4770      	bx	lr

08006f26 <__i2b>:
 8006f26:	b510      	push	{r4, lr}
 8006f28:	460c      	mov	r4, r1
 8006f2a:	2101      	movs	r1, #1
 8006f2c:	f7ff ff27 	bl	8006d7e <_Balloc>
 8006f30:	2201      	movs	r2, #1
 8006f32:	6144      	str	r4, [r0, #20]
 8006f34:	6102      	str	r2, [r0, #16]
 8006f36:	bd10      	pop	{r4, pc}

08006f38 <__multiply>:
 8006f38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f3c:	4614      	mov	r4, r2
 8006f3e:	690a      	ldr	r2, [r1, #16]
 8006f40:	6923      	ldr	r3, [r4, #16]
 8006f42:	429a      	cmp	r2, r3
 8006f44:	bfb8      	it	lt
 8006f46:	460b      	movlt	r3, r1
 8006f48:	4688      	mov	r8, r1
 8006f4a:	bfbc      	itt	lt
 8006f4c:	46a0      	movlt	r8, r4
 8006f4e:	461c      	movlt	r4, r3
 8006f50:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006f54:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006f58:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006f5c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006f60:	eb07 0609 	add.w	r6, r7, r9
 8006f64:	42b3      	cmp	r3, r6
 8006f66:	bfb8      	it	lt
 8006f68:	3101      	addlt	r1, #1
 8006f6a:	f7ff ff08 	bl	8006d7e <_Balloc>
 8006f6e:	f100 0514 	add.w	r5, r0, #20
 8006f72:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8006f76:	462b      	mov	r3, r5
 8006f78:	2200      	movs	r2, #0
 8006f7a:	4573      	cmp	r3, lr
 8006f7c:	d316      	bcc.n	8006fac <__multiply+0x74>
 8006f7e:	f104 0214 	add.w	r2, r4, #20
 8006f82:	f108 0114 	add.w	r1, r8, #20
 8006f86:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8006f8a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8006f8e:	9300      	str	r3, [sp, #0]
 8006f90:	9b00      	ldr	r3, [sp, #0]
 8006f92:	9201      	str	r2, [sp, #4]
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d80c      	bhi.n	8006fb2 <__multiply+0x7a>
 8006f98:	2e00      	cmp	r6, #0
 8006f9a:	dd03      	ble.n	8006fa4 <__multiply+0x6c>
 8006f9c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d05d      	beq.n	8007060 <__multiply+0x128>
 8006fa4:	6106      	str	r6, [r0, #16]
 8006fa6:	b003      	add	sp, #12
 8006fa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fac:	f843 2b04 	str.w	r2, [r3], #4
 8006fb0:	e7e3      	b.n	8006f7a <__multiply+0x42>
 8006fb2:	f8b2 b000 	ldrh.w	fp, [r2]
 8006fb6:	f1bb 0f00 	cmp.w	fp, #0
 8006fba:	d023      	beq.n	8007004 <__multiply+0xcc>
 8006fbc:	4689      	mov	r9, r1
 8006fbe:	46ac      	mov	ip, r5
 8006fc0:	f04f 0800 	mov.w	r8, #0
 8006fc4:	f859 4b04 	ldr.w	r4, [r9], #4
 8006fc8:	f8dc a000 	ldr.w	sl, [ip]
 8006fcc:	b2a3      	uxth	r3, r4
 8006fce:	fa1f fa8a 	uxth.w	sl, sl
 8006fd2:	fb0b a303 	mla	r3, fp, r3, sl
 8006fd6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006fda:	f8dc 4000 	ldr.w	r4, [ip]
 8006fde:	4443      	add	r3, r8
 8006fe0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006fe4:	fb0b 840a 	mla	r4, fp, sl, r8
 8006fe8:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8006fec:	46e2      	mov	sl, ip
 8006fee:	b29b      	uxth	r3, r3
 8006ff0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006ff4:	454f      	cmp	r7, r9
 8006ff6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006ffa:	f84a 3b04 	str.w	r3, [sl], #4
 8006ffe:	d82b      	bhi.n	8007058 <__multiply+0x120>
 8007000:	f8cc 8004 	str.w	r8, [ip, #4]
 8007004:	9b01      	ldr	r3, [sp, #4]
 8007006:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800700a:	3204      	adds	r2, #4
 800700c:	f1ba 0f00 	cmp.w	sl, #0
 8007010:	d020      	beq.n	8007054 <__multiply+0x11c>
 8007012:	682b      	ldr	r3, [r5, #0]
 8007014:	4689      	mov	r9, r1
 8007016:	46a8      	mov	r8, r5
 8007018:	f04f 0b00 	mov.w	fp, #0
 800701c:	f8b9 c000 	ldrh.w	ip, [r9]
 8007020:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8007024:	fb0a 440c 	mla	r4, sl, ip, r4
 8007028:	445c      	add	r4, fp
 800702a:	46c4      	mov	ip, r8
 800702c:	b29b      	uxth	r3, r3
 800702e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007032:	f84c 3b04 	str.w	r3, [ip], #4
 8007036:	f859 3b04 	ldr.w	r3, [r9], #4
 800703a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800703e:	0c1b      	lsrs	r3, r3, #16
 8007040:	fb0a b303 	mla	r3, sl, r3, fp
 8007044:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8007048:	454f      	cmp	r7, r9
 800704a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800704e:	d805      	bhi.n	800705c <__multiply+0x124>
 8007050:	f8c8 3004 	str.w	r3, [r8, #4]
 8007054:	3504      	adds	r5, #4
 8007056:	e79b      	b.n	8006f90 <__multiply+0x58>
 8007058:	46d4      	mov	ip, sl
 800705a:	e7b3      	b.n	8006fc4 <__multiply+0x8c>
 800705c:	46e0      	mov	r8, ip
 800705e:	e7dd      	b.n	800701c <__multiply+0xe4>
 8007060:	3e01      	subs	r6, #1
 8007062:	e799      	b.n	8006f98 <__multiply+0x60>

08007064 <__pow5mult>:
 8007064:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007068:	4615      	mov	r5, r2
 800706a:	f012 0203 	ands.w	r2, r2, #3
 800706e:	4606      	mov	r6, r0
 8007070:	460f      	mov	r7, r1
 8007072:	d007      	beq.n	8007084 <__pow5mult+0x20>
 8007074:	3a01      	subs	r2, #1
 8007076:	4c21      	ldr	r4, [pc, #132]	; (80070fc <__pow5mult+0x98>)
 8007078:	2300      	movs	r3, #0
 800707a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800707e:	f7ff fec9 	bl	8006e14 <__multadd>
 8007082:	4607      	mov	r7, r0
 8007084:	10ad      	asrs	r5, r5, #2
 8007086:	d035      	beq.n	80070f4 <__pow5mult+0x90>
 8007088:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800708a:	b93c      	cbnz	r4, 800709c <__pow5mult+0x38>
 800708c:	2010      	movs	r0, #16
 800708e:	f7ff fe63 	bl	8006d58 <malloc>
 8007092:	6270      	str	r0, [r6, #36]	; 0x24
 8007094:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007098:	6004      	str	r4, [r0, #0]
 800709a:	60c4      	str	r4, [r0, #12]
 800709c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80070a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80070a4:	b94c      	cbnz	r4, 80070ba <__pow5mult+0x56>
 80070a6:	f240 2171 	movw	r1, #625	; 0x271
 80070aa:	4630      	mov	r0, r6
 80070ac:	f7ff ff3b 	bl	8006f26 <__i2b>
 80070b0:	2300      	movs	r3, #0
 80070b2:	f8c8 0008 	str.w	r0, [r8, #8]
 80070b6:	4604      	mov	r4, r0
 80070b8:	6003      	str	r3, [r0, #0]
 80070ba:	f04f 0800 	mov.w	r8, #0
 80070be:	07eb      	lsls	r3, r5, #31
 80070c0:	d50a      	bpl.n	80070d8 <__pow5mult+0x74>
 80070c2:	4639      	mov	r1, r7
 80070c4:	4622      	mov	r2, r4
 80070c6:	4630      	mov	r0, r6
 80070c8:	f7ff ff36 	bl	8006f38 <__multiply>
 80070cc:	4639      	mov	r1, r7
 80070ce:	4681      	mov	r9, r0
 80070d0:	4630      	mov	r0, r6
 80070d2:	f7ff fe88 	bl	8006de6 <_Bfree>
 80070d6:	464f      	mov	r7, r9
 80070d8:	106d      	asrs	r5, r5, #1
 80070da:	d00b      	beq.n	80070f4 <__pow5mult+0x90>
 80070dc:	6820      	ldr	r0, [r4, #0]
 80070de:	b938      	cbnz	r0, 80070f0 <__pow5mult+0x8c>
 80070e0:	4622      	mov	r2, r4
 80070e2:	4621      	mov	r1, r4
 80070e4:	4630      	mov	r0, r6
 80070e6:	f7ff ff27 	bl	8006f38 <__multiply>
 80070ea:	6020      	str	r0, [r4, #0]
 80070ec:	f8c0 8000 	str.w	r8, [r0]
 80070f0:	4604      	mov	r4, r0
 80070f2:	e7e4      	b.n	80070be <__pow5mult+0x5a>
 80070f4:	4638      	mov	r0, r7
 80070f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070fa:	bf00      	nop
 80070fc:	08007b50 	.word	0x08007b50

08007100 <__lshift>:
 8007100:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007104:	460c      	mov	r4, r1
 8007106:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800710a:	6923      	ldr	r3, [r4, #16]
 800710c:	6849      	ldr	r1, [r1, #4]
 800710e:	eb0a 0903 	add.w	r9, sl, r3
 8007112:	68a3      	ldr	r3, [r4, #8]
 8007114:	4607      	mov	r7, r0
 8007116:	4616      	mov	r6, r2
 8007118:	f109 0501 	add.w	r5, r9, #1
 800711c:	42ab      	cmp	r3, r5
 800711e:	db32      	blt.n	8007186 <__lshift+0x86>
 8007120:	4638      	mov	r0, r7
 8007122:	f7ff fe2c 	bl	8006d7e <_Balloc>
 8007126:	2300      	movs	r3, #0
 8007128:	4680      	mov	r8, r0
 800712a:	f100 0114 	add.w	r1, r0, #20
 800712e:	461a      	mov	r2, r3
 8007130:	4553      	cmp	r3, sl
 8007132:	db2b      	blt.n	800718c <__lshift+0x8c>
 8007134:	6920      	ldr	r0, [r4, #16]
 8007136:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800713a:	f104 0314 	add.w	r3, r4, #20
 800713e:	f016 021f 	ands.w	r2, r6, #31
 8007142:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007146:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800714a:	d025      	beq.n	8007198 <__lshift+0x98>
 800714c:	f1c2 0e20 	rsb	lr, r2, #32
 8007150:	2000      	movs	r0, #0
 8007152:	681e      	ldr	r6, [r3, #0]
 8007154:	468a      	mov	sl, r1
 8007156:	4096      	lsls	r6, r2
 8007158:	4330      	orrs	r0, r6
 800715a:	f84a 0b04 	str.w	r0, [sl], #4
 800715e:	f853 0b04 	ldr.w	r0, [r3], #4
 8007162:	459c      	cmp	ip, r3
 8007164:	fa20 f00e 	lsr.w	r0, r0, lr
 8007168:	d814      	bhi.n	8007194 <__lshift+0x94>
 800716a:	6048      	str	r0, [r1, #4]
 800716c:	b108      	cbz	r0, 8007172 <__lshift+0x72>
 800716e:	f109 0502 	add.w	r5, r9, #2
 8007172:	3d01      	subs	r5, #1
 8007174:	4638      	mov	r0, r7
 8007176:	f8c8 5010 	str.w	r5, [r8, #16]
 800717a:	4621      	mov	r1, r4
 800717c:	f7ff fe33 	bl	8006de6 <_Bfree>
 8007180:	4640      	mov	r0, r8
 8007182:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007186:	3101      	adds	r1, #1
 8007188:	005b      	lsls	r3, r3, #1
 800718a:	e7c7      	b.n	800711c <__lshift+0x1c>
 800718c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007190:	3301      	adds	r3, #1
 8007192:	e7cd      	b.n	8007130 <__lshift+0x30>
 8007194:	4651      	mov	r1, sl
 8007196:	e7dc      	b.n	8007152 <__lshift+0x52>
 8007198:	3904      	subs	r1, #4
 800719a:	f853 2b04 	ldr.w	r2, [r3], #4
 800719e:	f841 2f04 	str.w	r2, [r1, #4]!
 80071a2:	459c      	cmp	ip, r3
 80071a4:	d8f9      	bhi.n	800719a <__lshift+0x9a>
 80071a6:	e7e4      	b.n	8007172 <__lshift+0x72>

080071a8 <__mcmp>:
 80071a8:	6903      	ldr	r3, [r0, #16]
 80071aa:	690a      	ldr	r2, [r1, #16]
 80071ac:	1a9b      	subs	r3, r3, r2
 80071ae:	b530      	push	{r4, r5, lr}
 80071b0:	d10c      	bne.n	80071cc <__mcmp+0x24>
 80071b2:	0092      	lsls	r2, r2, #2
 80071b4:	3014      	adds	r0, #20
 80071b6:	3114      	adds	r1, #20
 80071b8:	1884      	adds	r4, r0, r2
 80071ba:	4411      	add	r1, r2
 80071bc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80071c0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80071c4:	4295      	cmp	r5, r2
 80071c6:	d003      	beq.n	80071d0 <__mcmp+0x28>
 80071c8:	d305      	bcc.n	80071d6 <__mcmp+0x2e>
 80071ca:	2301      	movs	r3, #1
 80071cc:	4618      	mov	r0, r3
 80071ce:	bd30      	pop	{r4, r5, pc}
 80071d0:	42a0      	cmp	r0, r4
 80071d2:	d3f3      	bcc.n	80071bc <__mcmp+0x14>
 80071d4:	e7fa      	b.n	80071cc <__mcmp+0x24>
 80071d6:	f04f 33ff 	mov.w	r3, #4294967295
 80071da:	e7f7      	b.n	80071cc <__mcmp+0x24>

080071dc <__mdiff>:
 80071dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071e0:	460d      	mov	r5, r1
 80071e2:	4607      	mov	r7, r0
 80071e4:	4611      	mov	r1, r2
 80071e6:	4628      	mov	r0, r5
 80071e8:	4614      	mov	r4, r2
 80071ea:	f7ff ffdd 	bl	80071a8 <__mcmp>
 80071ee:	1e06      	subs	r6, r0, #0
 80071f0:	d108      	bne.n	8007204 <__mdiff+0x28>
 80071f2:	4631      	mov	r1, r6
 80071f4:	4638      	mov	r0, r7
 80071f6:	f7ff fdc2 	bl	8006d7e <_Balloc>
 80071fa:	2301      	movs	r3, #1
 80071fc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007200:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007204:	bfa4      	itt	ge
 8007206:	4623      	movge	r3, r4
 8007208:	462c      	movge	r4, r5
 800720a:	4638      	mov	r0, r7
 800720c:	6861      	ldr	r1, [r4, #4]
 800720e:	bfa6      	itte	ge
 8007210:	461d      	movge	r5, r3
 8007212:	2600      	movge	r6, #0
 8007214:	2601      	movlt	r6, #1
 8007216:	f7ff fdb2 	bl	8006d7e <_Balloc>
 800721a:	692b      	ldr	r3, [r5, #16]
 800721c:	60c6      	str	r6, [r0, #12]
 800721e:	6926      	ldr	r6, [r4, #16]
 8007220:	f105 0914 	add.w	r9, r5, #20
 8007224:	f104 0214 	add.w	r2, r4, #20
 8007228:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800722c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8007230:	f100 0514 	add.w	r5, r0, #20
 8007234:	f04f 0e00 	mov.w	lr, #0
 8007238:	f852 ab04 	ldr.w	sl, [r2], #4
 800723c:	f859 4b04 	ldr.w	r4, [r9], #4
 8007240:	fa1e f18a 	uxtah	r1, lr, sl
 8007244:	b2a3      	uxth	r3, r4
 8007246:	1ac9      	subs	r1, r1, r3
 8007248:	0c23      	lsrs	r3, r4, #16
 800724a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800724e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007252:	b289      	uxth	r1, r1
 8007254:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8007258:	45c8      	cmp	r8, r9
 800725a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800725e:	4694      	mov	ip, r2
 8007260:	f845 3b04 	str.w	r3, [r5], #4
 8007264:	d8e8      	bhi.n	8007238 <__mdiff+0x5c>
 8007266:	45bc      	cmp	ip, r7
 8007268:	d304      	bcc.n	8007274 <__mdiff+0x98>
 800726a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800726e:	b183      	cbz	r3, 8007292 <__mdiff+0xb6>
 8007270:	6106      	str	r6, [r0, #16]
 8007272:	e7c5      	b.n	8007200 <__mdiff+0x24>
 8007274:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007278:	fa1e f381 	uxtah	r3, lr, r1
 800727c:	141a      	asrs	r2, r3, #16
 800727e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007282:	b29b      	uxth	r3, r3
 8007284:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007288:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800728c:	f845 3b04 	str.w	r3, [r5], #4
 8007290:	e7e9      	b.n	8007266 <__mdiff+0x8a>
 8007292:	3e01      	subs	r6, #1
 8007294:	e7e9      	b.n	800726a <__mdiff+0x8e>

08007296 <__d2b>:
 8007296:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800729a:	460e      	mov	r6, r1
 800729c:	2101      	movs	r1, #1
 800729e:	ec59 8b10 	vmov	r8, r9, d0
 80072a2:	4615      	mov	r5, r2
 80072a4:	f7ff fd6b 	bl	8006d7e <_Balloc>
 80072a8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80072ac:	4607      	mov	r7, r0
 80072ae:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80072b2:	bb34      	cbnz	r4, 8007302 <__d2b+0x6c>
 80072b4:	9301      	str	r3, [sp, #4]
 80072b6:	f1b8 0300 	subs.w	r3, r8, #0
 80072ba:	d027      	beq.n	800730c <__d2b+0x76>
 80072bc:	a802      	add	r0, sp, #8
 80072be:	f840 3d08 	str.w	r3, [r0, #-8]!
 80072c2:	f7ff fe01 	bl	8006ec8 <__lo0bits>
 80072c6:	9900      	ldr	r1, [sp, #0]
 80072c8:	b1f0      	cbz	r0, 8007308 <__d2b+0x72>
 80072ca:	9a01      	ldr	r2, [sp, #4]
 80072cc:	f1c0 0320 	rsb	r3, r0, #32
 80072d0:	fa02 f303 	lsl.w	r3, r2, r3
 80072d4:	430b      	orrs	r3, r1
 80072d6:	40c2      	lsrs	r2, r0
 80072d8:	617b      	str	r3, [r7, #20]
 80072da:	9201      	str	r2, [sp, #4]
 80072dc:	9b01      	ldr	r3, [sp, #4]
 80072de:	61bb      	str	r3, [r7, #24]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	bf14      	ite	ne
 80072e4:	2102      	movne	r1, #2
 80072e6:	2101      	moveq	r1, #1
 80072e8:	6139      	str	r1, [r7, #16]
 80072ea:	b1c4      	cbz	r4, 800731e <__d2b+0x88>
 80072ec:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80072f0:	4404      	add	r4, r0
 80072f2:	6034      	str	r4, [r6, #0]
 80072f4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80072f8:	6028      	str	r0, [r5, #0]
 80072fa:	4638      	mov	r0, r7
 80072fc:	b003      	add	sp, #12
 80072fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007302:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007306:	e7d5      	b.n	80072b4 <__d2b+0x1e>
 8007308:	6179      	str	r1, [r7, #20]
 800730a:	e7e7      	b.n	80072dc <__d2b+0x46>
 800730c:	a801      	add	r0, sp, #4
 800730e:	f7ff fddb 	bl	8006ec8 <__lo0bits>
 8007312:	9b01      	ldr	r3, [sp, #4]
 8007314:	617b      	str	r3, [r7, #20]
 8007316:	2101      	movs	r1, #1
 8007318:	6139      	str	r1, [r7, #16]
 800731a:	3020      	adds	r0, #32
 800731c:	e7e5      	b.n	80072ea <__d2b+0x54>
 800731e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8007322:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007326:	6030      	str	r0, [r6, #0]
 8007328:	6918      	ldr	r0, [r3, #16]
 800732a:	f7ff fdae 	bl	8006e8a <__hi0bits>
 800732e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007332:	e7e1      	b.n	80072f8 <__d2b+0x62>

08007334 <_calloc_r>:
 8007334:	b538      	push	{r3, r4, r5, lr}
 8007336:	fb02 f401 	mul.w	r4, r2, r1
 800733a:	4621      	mov	r1, r4
 800733c:	f000 f856 	bl	80073ec <_malloc_r>
 8007340:	4605      	mov	r5, r0
 8007342:	b118      	cbz	r0, 800734c <_calloc_r+0x18>
 8007344:	4622      	mov	r2, r4
 8007346:	2100      	movs	r1, #0
 8007348:	f7fd ff36 	bl	80051b8 <memset>
 800734c:	4628      	mov	r0, r5
 800734e:	bd38      	pop	{r3, r4, r5, pc}

08007350 <_free_r>:
 8007350:	b538      	push	{r3, r4, r5, lr}
 8007352:	4605      	mov	r5, r0
 8007354:	2900      	cmp	r1, #0
 8007356:	d045      	beq.n	80073e4 <_free_r+0x94>
 8007358:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800735c:	1f0c      	subs	r4, r1, #4
 800735e:	2b00      	cmp	r3, #0
 8007360:	bfb8      	it	lt
 8007362:	18e4      	addlt	r4, r4, r3
 8007364:	f000 fa98 	bl	8007898 <__malloc_lock>
 8007368:	4a1f      	ldr	r2, [pc, #124]	; (80073e8 <_free_r+0x98>)
 800736a:	6813      	ldr	r3, [r2, #0]
 800736c:	4610      	mov	r0, r2
 800736e:	b933      	cbnz	r3, 800737e <_free_r+0x2e>
 8007370:	6063      	str	r3, [r4, #4]
 8007372:	6014      	str	r4, [r2, #0]
 8007374:	4628      	mov	r0, r5
 8007376:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800737a:	f000 ba8e 	b.w	800789a <__malloc_unlock>
 800737e:	42a3      	cmp	r3, r4
 8007380:	d90c      	bls.n	800739c <_free_r+0x4c>
 8007382:	6821      	ldr	r1, [r4, #0]
 8007384:	1862      	adds	r2, r4, r1
 8007386:	4293      	cmp	r3, r2
 8007388:	bf04      	itt	eq
 800738a:	681a      	ldreq	r2, [r3, #0]
 800738c:	685b      	ldreq	r3, [r3, #4]
 800738e:	6063      	str	r3, [r4, #4]
 8007390:	bf04      	itt	eq
 8007392:	1852      	addeq	r2, r2, r1
 8007394:	6022      	streq	r2, [r4, #0]
 8007396:	6004      	str	r4, [r0, #0]
 8007398:	e7ec      	b.n	8007374 <_free_r+0x24>
 800739a:	4613      	mov	r3, r2
 800739c:	685a      	ldr	r2, [r3, #4]
 800739e:	b10a      	cbz	r2, 80073a4 <_free_r+0x54>
 80073a0:	42a2      	cmp	r2, r4
 80073a2:	d9fa      	bls.n	800739a <_free_r+0x4a>
 80073a4:	6819      	ldr	r1, [r3, #0]
 80073a6:	1858      	adds	r0, r3, r1
 80073a8:	42a0      	cmp	r0, r4
 80073aa:	d10b      	bne.n	80073c4 <_free_r+0x74>
 80073ac:	6820      	ldr	r0, [r4, #0]
 80073ae:	4401      	add	r1, r0
 80073b0:	1858      	adds	r0, r3, r1
 80073b2:	4282      	cmp	r2, r0
 80073b4:	6019      	str	r1, [r3, #0]
 80073b6:	d1dd      	bne.n	8007374 <_free_r+0x24>
 80073b8:	6810      	ldr	r0, [r2, #0]
 80073ba:	6852      	ldr	r2, [r2, #4]
 80073bc:	605a      	str	r2, [r3, #4]
 80073be:	4401      	add	r1, r0
 80073c0:	6019      	str	r1, [r3, #0]
 80073c2:	e7d7      	b.n	8007374 <_free_r+0x24>
 80073c4:	d902      	bls.n	80073cc <_free_r+0x7c>
 80073c6:	230c      	movs	r3, #12
 80073c8:	602b      	str	r3, [r5, #0]
 80073ca:	e7d3      	b.n	8007374 <_free_r+0x24>
 80073cc:	6820      	ldr	r0, [r4, #0]
 80073ce:	1821      	adds	r1, r4, r0
 80073d0:	428a      	cmp	r2, r1
 80073d2:	bf04      	itt	eq
 80073d4:	6811      	ldreq	r1, [r2, #0]
 80073d6:	6852      	ldreq	r2, [r2, #4]
 80073d8:	6062      	str	r2, [r4, #4]
 80073da:	bf04      	itt	eq
 80073dc:	1809      	addeq	r1, r1, r0
 80073de:	6021      	streq	r1, [r4, #0]
 80073e0:	605c      	str	r4, [r3, #4]
 80073e2:	e7c7      	b.n	8007374 <_free_r+0x24>
 80073e4:	bd38      	pop	{r3, r4, r5, pc}
 80073e6:	bf00      	nop
 80073e8:	200001fc 	.word	0x200001fc

080073ec <_malloc_r>:
 80073ec:	b570      	push	{r4, r5, r6, lr}
 80073ee:	1ccd      	adds	r5, r1, #3
 80073f0:	f025 0503 	bic.w	r5, r5, #3
 80073f4:	3508      	adds	r5, #8
 80073f6:	2d0c      	cmp	r5, #12
 80073f8:	bf38      	it	cc
 80073fa:	250c      	movcc	r5, #12
 80073fc:	2d00      	cmp	r5, #0
 80073fe:	4606      	mov	r6, r0
 8007400:	db01      	blt.n	8007406 <_malloc_r+0x1a>
 8007402:	42a9      	cmp	r1, r5
 8007404:	d903      	bls.n	800740e <_malloc_r+0x22>
 8007406:	230c      	movs	r3, #12
 8007408:	6033      	str	r3, [r6, #0]
 800740a:	2000      	movs	r0, #0
 800740c:	bd70      	pop	{r4, r5, r6, pc}
 800740e:	f000 fa43 	bl	8007898 <__malloc_lock>
 8007412:	4a21      	ldr	r2, [pc, #132]	; (8007498 <_malloc_r+0xac>)
 8007414:	6814      	ldr	r4, [r2, #0]
 8007416:	4621      	mov	r1, r4
 8007418:	b991      	cbnz	r1, 8007440 <_malloc_r+0x54>
 800741a:	4c20      	ldr	r4, [pc, #128]	; (800749c <_malloc_r+0xb0>)
 800741c:	6823      	ldr	r3, [r4, #0]
 800741e:	b91b      	cbnz	r3, 8007428 <_malloc_r+0x3c>
 8007420:	4630      	mov	r0, r6
 8007422:	f000 f97d 	bl	8007720 <_sbrk_r>
 8007426:	6020      	str	r0, [r4, #0]
 8007428:	4629      	mov	r1, r5
 800742a:	4630      	mov	r0, r6
 800742c:	f000 f978 	bl	8007720 <_sbrk_r>
 8007430:	1c43      	adds	r3, r0, #1
 8007432:	d124      	bne.n	800747e <_malloc_r+0x92>
 8007434:	230c      	movs	r3, #12
 8007436:	6033      	str	r3, [r6, #0]
 8007438:	4630      	mov	r0, r6
 800743a:	f000 fa2e 	bl	800789a <__malloc_unlock>
 800743e:	e7e4      	b.n	800740a <_malloc_r+0x1e>
 8007440:	680b      	ldr	r3, [r1, #0]
 8007442:	1b5b      	subs	r3, r3, r5
 8007444:	d418      	bmi.n	8007478 <_malloc_r+0x8c>
 8007446:	2b0b      	cmp	r3, #11
 8007448:	d90f      	bls.n	800746a <_malloc_r+0x7e>
 800744a:	600b      	str	r3, [r1, #0]
 800744c:	50cd      	str	r5, [r1, r3]
 800744e:	18cc      	adds	r4, r1, r3
 8007450:	4630      	mov	r0, r6
 8007452:	f000 fa22 	bl	800789a <__malloc_unlock>
 8007456:	f104 000b 	add.w	r0, r4, #11
 800745a:	1d23      	adds	r3, r4, #4
 800745c:	f020 0007 	bic.w	r0, r0, #7
 8007460:	1ac3      	subs	r3, r0, r3
 8007462:	d0d3      	beq.n	800740c <_malloc_r+0x20>
 8007464:	425a      	negs	r2, r3
 8007466:	50e2      	str	r2, [r4, r3]
 8007468:	e7d0      	b.n	800740c <_malloc_r+0x20>
 800746a:	428c      	cmp	r4, r1
 800746c:	684b      	ldr	r3, [r1, #4]
 800746e:	bf16      	itet	ne
 8007470:	6063      	strne	r3, [r4, #4]
 8007472:	6013      	streq	r3, [r2, #0]
 8007474:	460c      	movne	r4, r1
 8007476:	e7eb      	b.n	8007450 <_malloc_r+0x64>
 8007478:	460c      	mov	r4, r1
 800747a:	6849      	ldr	r1, [r1, #4]
 800747c:	e7cc      	b.n	8007418 <_malloc_r+0x2c>
 800747e:	1cc4      	adds	r4, r0, #3
 8007480:	f024 0403 	bic.w	r4, r4, #3
 8007484:	42a0      	cmp	r0, r4
 8007486:	d005      	beq.n	8007494 <_malloc_r+0xa8>
 8007488:	1a21      	subs	r1, r4, r0
 800748a:	4630      	mov	r0, r6
 800748c:	f000 f948 	bl	8007720 <_sbrk_r>
 8007490:	3001      	adds	r0, #1
 8007492:	d0cf      	beq.n	8007434 <_malloc_r+0x48>
 8007494:	6025      	str	r5, [r4, #0]
 8007496:	e7db      	b.n	8007450 <_malloc_r+0x64>
 8007498:	200001fc 	.word	0x200001fc
 800749c:	20000200 	.word	0x20000200

080074a0 <__sfputc_r>:
 80074a0:	6893      	ldr	r3, [r2, #8]
 80074a2:	3b01      	subs	r3, #1
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	b410      	push	{r4}
 80074a8:	6093      	str	r3, [r2, #8]
 80074aa:	da08      	bge.n	80074be <__sfputc_r+0x1e>
 80074ac:	6994      	ldr	r4, [r2, #24]
 80074ae:	42a3      	cmp	r3, r4
 80074b0:	db01      	blt.n	80074b6 <__sfputc_r+0x16>
 80074b2:	290a      	cmp	r1, #10
 80074b4:	d103      	bne.n	80074be <__sfputc_r+0x1e>
 80074b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80074ba:	f7fe bb5d 	b.w	8005b78 <__swbuf_r>
 80074be:	6813      	ldr	r3, [r2, #0]
 80074c0:	1c58      	adds	r0, r3, #1
 80074c2:	6010      	str	r0, [r2, #0]
 80074c4:	7019      	strb	r1, [r3, #0]
 80074c6:	4608      	mov	r0, r1
 80074c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80074cc:	4770      	bx	lr

080074ce <__sfputs_r>:
 80074ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074d0:	4606      	mov	r6, r0
 80074d2:	460f      	mov	r7, r1
 80074d4:	4614      	mov	r4, r2
 80074d6:	18d5      	adds	r5, r2, r3
 80074d8:	42ac      	cmp	r4, r5
 80074da:	d101      	bne.n	80074e0 <__sfputs_r+0x12>
 80074dc:	2000      	movs	r0, #0
 80074de:	e007      	b.n	80074f0 <__sfputs_r+0x22>
 80074e0:	463a      	mov	r2, r7
 80074e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074e6:	4630      	mov	r0, r6
 80074e8:	f7ff ffda 	bl	80074a0 <__sfputc_r>
 80074ec:	1c43      	adds	r3, r0, #1
 80074ee:	d1f3      	bne.n	80074d8 <__sfputs_r+0xa>
 80074f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080074f4 <_vfiprintf_r>:
 80074f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074f8:	460c      	mov	r4, r1
 80074fa:	b09d      	sub	sp, #116	; 0x74
 80074fc:	4617      	mov	r7, r2
 80074fe:	461d      	mov	r5, r3
 8007500:	4606      	mov	r6, r0
 8007502:	b118      	cbz	r0, 800750c <_vfiprintf_r+0x18>
 8007504:	6983      	ldr	r3, [r0, #24]
 8007506:	b90b      	cbnz	r3, 800750c <_vfiprintf_r+0x18>
 8007508:	f7ff fb2a 	bl	8006b60 <__sinit>
 800750c:	4b7c      	ldr	r3, [pc, #496]	; (8007700 <_vfiprintf_r+0x20c>)
 800750e:	429c      	cmp	r4, r3
 8007510:	d158      	bne.n	80075c4 <_vfiprintf_r+0xd0>
 8007512:	6874      	ldr	r4, [r6, #4]
 8007514:	89a3      	ldrh	r3, [r4, #12]
 8007516:	0718      	lsls	r0, r3, #28
 8007518:	d55e      	bpl.n	80075d8 <_vfiprintf_r+0xe4>
 800751a:	6923      	ldr	r3, [r4, #16]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d05b      	beq.n	80075d8 <_vfiprintf_r+0xe4>
 8007520:	2300      	movs	r3, #0
 8007522:	9309      	str	r3, [sp, #36]	; 0x24
 8007524:	2320      	movs	r3, #32
 8007526:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800752a:	2330      	movs	r3, #48	; 0x30
 800752c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007530:	9503      	str	r5, [sp, #12]
 8007532:	f04f 0b01 	mov.w	fp, #1
 8007536:	46b8      	mov	r8, r7
 8007538:	4645      	mov	r5, r8
 800753a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800753e:	b10b      	cbz	r3, 8007544 <_vfiprintf_r+0x50>
 8007540:	2b25      	cmp	r3, #37	; 0x25
 8007542:	d154      	bne.n	80075ee <_vfiprintf_r+0xfa>
 8007544:	ebb8 0a07 	subs.w	sl, r8, r7
 8007548:	d00b      	beq.n	8007562 <_vfiprintf_r+0x6e>
 800754a:	4653      	mov	r3, sl
 800754c:	463a      	mov	r2, r7
 800754e:	4621      	mov	r1, r4
 8007550:	4630      	mov	r0, r6
 8007552:	f7ff ffbc 	bl	80074ce <__sfputs_r>
 8007556:	3001      	adds	r0, #1
 8007558:	f000 80c2 	beq.w	80076e0 <_vfiprintf_r+0x1ec>
 800755c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800755e:	4453      	add	r3, sl
 8007560:	9309      	str	r3, [sp, #36]	; 0x24
 8007562:	f898 3000 	ldrb.w	r3, [r8]
 8007566:	2b00      	cmp	r3, #0
 8007568:	f000 80ba 	beq.w	80076e0 <_vfiprintf_r+0x1ec>
 800756c:	2300      	movs	r3, #0
 800756e:	f04f 32ff 	mov.w	r2, #4294967295
 8007572:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007576:	9304      	str	r3, [sp, #16]
 8007578:	9307      	str	r3, [sp, #28]
 800757a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800757e:	931a      	str	r3, [sp, #104]	; 0x68
 8007580:	46a8      	mov	r8, r5
 8007582:	2205      	movs	r2, #5
 8007584:	f818 1b01 	ldrb.w	r1, [r8], #1
 8007588:	485e      	ldr	r0, [pc, #376]	; (8007704 <_vfiprintf_r+0x210>)
 800758a:	f7f8 fe29 	bl	80001e0 <memchr>
 800758e:	9b04      	ldr	r3, [sp, #16]
 8007590:	bb78      	cbnz	r0, 80075f2 <_vfiprintf_r+0xfe>
 8007592:	06d9      	lsls	r1, r3, #27
 8007594:	bf44      	itt	mi
 8007596:	2220      	movmi	r2, #32
 8007598:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800759c:	071a      	lsls	r2, r3, #28
 800759e:	bf44      	itt	mi
 80075a0:	222b      	movmi	r2, #43	; 0x2b
 80075a2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80075a6:	782a      	ldrb	r2, [r5, #0]
 80075a8:	2a2a      	cmp	r2, #42	; 0x2a
 80075aa:	d02a      	beq.n	8007602 <_vfiprintf_r+0x10e>
 80075ac:	9a07      	ldr	r2, [sp, #28]
 80075ae:	46a8      	mov	r8, r5
 80075b0:	2000      	movs	r0, #0
 80075b2:	250a      	movs	r5, #10
 80075b4:	4641      	mov	r1, r8
 80075b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80075ba:	3b30      	subs	r3, #48	; 0x30
 80075bc:	2b09      	cmp	r3, #9
 80075be:	d969      	bls.n	8007694 <_vfiprintf_r+0x1a0>
 80075c0:	b360      	cbz	r0, 800761c <_vfiprintf_r+0x128>
 80075c2:	e024      	b.n	800760e <_vfiprintf_r+0x11a>
 80075c4:	4b50      	ldr	r3, [pc, #320]	; (8007708 <_vfiprintf_r+0x214>)
 80075c6:	429c      	cmp	r4, r3
 80075c8:	d101      	bne.n	80075ce <_vfiprintf_r+0xda>
 80075ca:	68b4      	ldr	r4, [r6, #8]
 80075cc:	e7a2      	b.n	8007514 <_vfiprintf_r+0x20>
 80075ce:	4b4f      	ldr	r3, [pc, #316]	; (800770c <_vfiprintf_r+0x218>)
 80075d0:	429c      	cmp	r4, r3
 80075d2:	bf08      	it	eq
 80075d4:	68f4      	ldreq	r4, [r6, #12]
 80075d6:	e79d      	b.n	8007514 <_vfiprintf_r+0x20>
 80075d8:	4621      	mov	r1, r4
 80075da:	4630      	mov	r0, r6
 80075dc:	f7fe fb1e 	bl	8005c1c <__swsetup_r>
 80075e0:	2800      	cmp	r0, #0
 80075e2:	d09d      	beq.n	8007520 <_vfiprintf_r+0x2c>
 80075e4:	f04f 30ff 	mov.w	r0, #4294967295
 80075e8:	b01d      	add	sp, #116	; 0x74
 80075ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075ee:	46a8      	mov	r8, r5
 80075f0:	e7a2      	b.n	8007538 <_vfiprintf_r+0x44>
 80075f2:	4a44      	ldr	r2, [pc, #272]	; (8007704 <_vfiprintf_r+0x210>)
 80075f4:	1a80      	subs	r0, r0, r2
 80075f6:	fa0b f000 	lsl.w	r0, fp, r0
 80075fa:	4318      	orrs	r0, r3
 80075fc:	9004      	str	r0, [sp, #16]
 80075fe:	4645      	mov	r5, r8
 8007600:	e7be      	b.n	8007580 <_vfiprintf_r+0x8c>
 8007602:	9a03      	ldr	r2, [sp, #12]
 8007604:	1d11      	adds	r1, r2, #4
 8007606:	6812      	ldr	r2, [r2, #0]
 8007608:	9103      	str	r1, [sp, #12]
 800760a:	2a00      	cmp	r2, #0
 800760c:	db01      	blt.n	8007612 <_vfiprintf_r+0x11e>
 800760e:	9207      	str	r2, [sp, #28]
 8007610:	e004      	b.n	800761c <_vfiprintf_r+0x128>
 8007612:	4252      	negs	r2, r2
 8007614:	f043 0302 	orr.w	r3, r3, #2
 8007618:	9207      	str	r2, [sp, #28]
 800761a:	9304      	str	r3, [sp, #16]
 800761c:	f898 3000 	ldrb.w	r3, [r8]
 8007620:	2b2e      	cmp	r3, #46	; 0x2e
 8007622:	d10e      	bne.n	8007642 <_vfiprintf_r+0x14e>
 8007624:	f898 3001 	ldrb.w	r3, [r8, #1]
 8007628:	2b2a      	cmp	r3, #42	; 0x2a
 800762a:	d138      	bne.n	800769e <_vfiprintf_r+0x1aa>
 800762c:	9b03      	ldr	r3, [sp, #12]
 800762e:	1d1a      	adds	r2, r3, #4
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	9203      	str	r2, [sp, #12]
 8007634:	2b00      	cmp	r3, #0
 8007636:	bfb8      	it	lt
 8007638:	f04f 33ff 	movlt.w	r3, #4294967295
 800763c:	f108 0802 	add.w	r8, r8, #2
 8007640:	9305      	str	r3, [sp, #20]
 8007642:	4d33      	ldr	r5, [pc, #204]	; (8007710 <_vfiprintf_r+0x21c>)
 8007644:	f898 1000 	ldrb.w	r1, [r8]
 8007648:	2203      	movs	r2, #3
 800764a:	4628      	mov	r0, r5
 800764c:	f7f8 fdc8 	bl	80001e0 <memchr>
 8007650:	b140      	cbz	r0, 8007664 <_vfiprintf_r+0x170>
 8007652:	2340      	movs	r3, #64	; 0x40
 8007654:	1b40      	subs	r0, r0, r5
 8007656:	fa03 f000 	lsl.w	r0, r3, r0
 800765a:	9b04      	ldr	r3, [sp, #16]
 800765c:	4303      	orrs	r3, r0
 800765e:	f108 0801 	add.w	r8, r8, #1
 8007662:	9304      	str	r3, [sp, #16]
 8007664:	f898 1000 	ldrb.w	r1, [r8]
 8007668:	482a      	ldr	r0, [pc, #168]	; (8007714 <_vfiprintf_r+0x220>)
 800766a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800766e:	2206      	movs	r2, #6
 8007670:	f108 0701 	add.w	r7, r8, #1
 8007674:	f7f8 fdb4 	bl	80001e0 <memchr>
 8007678:	2800      	cmp	r0, #0
 800767a:	d037      	beq.n	80076ec <_vfiprintf_r+0x1f8>
 800767c:	4b26      	ldr	r3, [pc, #152]	; (8007718 <_vfiprintf_r+0x224>)
 800767e:	bb1b      	cbnz	r3, 80076c8 <_vfiprintf_r+0x1d4>
 8007680:	9b03      	ldr	r3, [sp, #12]
 8007682:	3307      	adds	r3, #7
 8007684:	f023 0307 	bic.w	r3, r3, #7
 8007688:	3308      	adds	r3, #8
 800768a:	9303      	str	r3, [sp, #12]
 800768c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800768e:	444b      	add	r3, r9
 8007690:	9309      	str	r3, [sp, #36]	; 0x24
 8007692:	e750      	b.n	8007536 <_vfiprintf_r+0x42>
 8007694:	fb05 3202 	mla	r2, r5, r2, r3
 8007698:	2001      	movs	r0, #1
 800769a:	4688      	mov	r8, r1
 800769c:	e78a      	b.n	80075b4 <_vfiprintf_r+0xc0>
 800769e:	2300      	movs	r3, #0
 80076a0:	f108 0801 	add.w	r8, r8, #1
 80076a4:	9305      	str	r3, [sp, #20]
 80076a6:	4619      	mov	r1, r3
 80076a8:	250a      	movs	r5, #10
 80076aa:	4640      	mov	r0, r8
 80076ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80076b0:	3a30      	subs	r2, #48	; 0x30
 80076b2:	2a09      	cmp	r2, #9
 80076b4:	d903      	bls.n	80076be <_vfiprintf_r+0x1ca>
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d0c3      	beq.n	8007642 <_vfiprintf_r+0x14e>
 80076ba:	9105      	str	r1, [sp, #20]
 80076bc:	e7c1      	b.n	8007642 <_vfiprintf_r+0x14e>
 80076be:	fb05 2101 	mla	r1, r5, r1, r2
 80076c2:	2301      	movs	r3, #1
 80076c4:	4680      	mov	r8, r0
 80076c6:	e7f0      	b.n	80076aa <_vfiprintf_r+0x1b6>
 80076c8:	ab03      	add	r3, sp, #12
 80076ca:	9300      	str	r3, [sp, #0]
 80076cc:	4622      	mov	r2, r4
 80076ce:	4b13      	ldr	r3, [pc, #76]	; (800771c <_vfiprintf_r+0x228>)
 80076d0:	a904      	add	r1, sp, #16
 80076d2:	4630      	mov	r0, r6
 80076d4:	f7fd fe0c 	bl	80052f0 <_printf_float>
 80076d8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80076dc:	4681      	mov	r9, r0
 80076de:	d1d5      	bne.n	800768c <_vfiprintf_r+0x198>
 80076e0:	89a3      	ldrh	r3, [r4, #12]
 80076e2:	065b      	lsls	r3, r3, #25
 80076e4:	f53f af7e 	bmi.w	80075e4 <_vfiprintf_r+0xf0>
 80076e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80076ea:	e77d      	b.n	80075e8 <_vfiprintf_r+0xf4>
 80076ec:	ab03      	add	r3, sp, #12
 80076ee:	9300      	str	r3, [sp, #0]
 80076f0:	4622      	mov	r2, r4
 80076f2:	4b0a      	ldr	r3, [pc, #40]	; (800771c <_vfiprintf_r+0x228>)
 80076f4:	a904      	add	r1, sp, #16
 80076f6:	4630      	mov	r0, r6
 80076f8:	f7fe f8b0 	bl	800585c <_printf_i>
 80076fc:	e7ec      	b.n	80076d8 <_vfiprintf_r+0x1e4>
 80076fe:	bf00      	nop
 8007700:	08007a1c 	.word	0x08007a1c
 8007704:	08007b5c 	.word	0x08007b5c
 8007708:	08007a3c 	.word	0x08007a3c
 800770c:	080079fc 	.word	0x080079fc
 8007710:	08007b62 	.word	0x08007b62
 8007714:	08007b66 	.word	0x08007b66
 8007718:	080052f1 	.word	0x080052f1
 800771c:	080074cf 	.word	0x080074cf

08007720 <_sbrk_r>:
 8007720:	b538      	push	{r3, r4, r5, lr}
 8007722:	4c06      	ldr	r4, [pc, #24]	; (800773c <_sbrk_r+0x1c>)
 8007724:	2300      	movs	r3, #0
 8007726:	4605      	mov	r5, r0
 8007728:	4608      	mov	r0, r1
 800772a:	6023      	str	r3, [r4, #0]
 800772c:	f7fd fbaa 	bl	8004e84 <_sbrk>
 8007730:	1c43      	adds	r3, r0, #1
 8007732:	d102      	bne.n	800773a <_sbrk_r+0x1a>
 8007734:	6823      	ldr	r3, [r4, #0]
 8007736:	b103      	cbz	r3, 800773a <_sbrk_r+0x1a>
 8007738:	602b      	str	r3, [r5, #0]
 800773a:	bd38      	pop	{r3, r4, r5, pc}
 800773c:	200003c0 	.word	0x200003c0

08007740 <__sread>:
 8007740:	b510      	push	{r4, lr}
 8007742:	460c      	mov	r4, r1
 8007744:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007748:	f000 f8a8 	bl	800789c <_read_r>
 800774c:	2800      	cmp	r0, #0
 800774e:	bfab      	itete	ge
 8007750:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007752:	89a3      	ldrhlt	r3, [r4, #12]
 8007754:	181b      	addge	r3, r3, r0
 8007756:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800775a:	bfac      	ite	ge
 800775c:	6563      	strge	r3, [r4, #84]	; 0x54
 800775e:	81a3      	strhlt	r3, [r4, #12]
 8007760:	bd10      	pop	{r4, pc}

08007762 <__swrite>:
 8007762:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007766:	461f      	mov	r7, r3
 8007768:	898b      	ldrh	r3, [r1, #12]
 800776a:	05db      	lsls	r3, r3, #23
 800776c:	4605      	mov	r5, r0
 800776e:	460c      	mov	r4, r1
 8007770:	4616      	mov	r6, r2
 8007772:	d505      	bpl.n	8007780 <__swrite+0x1e>
 8007774:	2302      	movs	r3, #2
 8007776:	2200      	movs	r2, #0
 8007778:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800777c:	f000 f868 	bl	8007850 <_lseek_r>
 8007780:	89a3      	ldrh	r3, [r4, #12]
 8007782:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007786:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800778a:	81a3      	strh	r3, [r4, #12]
 800778c:	4632      	mov	r2, r6
 800778e:	463b      	mov	r3, r7
 8007790:	4628      	mov	r0, r5
 8007792:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007796:	f000 b817 	b.w	80077c8 <_write_r>

0800779a <__sseek>:
 800779a:	b510      	push	{r4, lr}
 800779c:	460c      	mov	r4, r1
 800779e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077a2:	f000 f855 	bl	8007850 <_lseek_r>
 80077a6:	1c43      	adds	r3, r0, #1
 80077a8:	89a3      	ldrh	r3, [r4, #12]
 80077aa:	bf15      	itete	ne
 80077ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80077ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80077b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80077b6:	81a3      	strheq	r3, [r4, #12]
 80077b8:	bf18      	it	ne
 80077ba:	81a3      	strhne	r3, [r4, #12]
 80077bc:	bd10      	pop	{r4, pc}

080077be <__sclose>:
 80077be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077c2:	f000 b813 	b.w	80077ec <_close_r>
	...

080077c8 <_write_r>:
 80077c8:	b538      	push	{r3, r4, r5, lr}
 80077ca:	4c07      	ldr	r4, [pc, #28]	; (80077e8 <_write_r+0x20>)
 80077cc:	4605      	mov	r5, r0
 80077ce:	4608      	mov	r0, r1
 80077d0:	4611      	mov	r1, r2
 80077d2:	2200      	movs	r2, #0
 80077d4:	6022      	str	r2, [r4, #0]
 80077d6:	461a      	mov	r2, r3
 80077d8:	f7fd fb03 	bl	8004de2 <_write>
 80077dc:	1c43      	adds	r3, r0, #1
 80077de:	d102      	bne.n	80077e6 <_write_r+0x1e>
 80077e0:	6823      	ldr	r3, [r4, #0]
 80077e2:	b103      	cbz	r3, 80077e6 <_write_r+0x1e>
 80077e4:	602b      	str	r3, [r5, #0]
 80077e6:	bd38      	pop	{r3, r4, r5, pc}
 80077e8:	200003c0 	.word	0x200003c0

080077ec <_close_r>:
 80077ec:	b538      	push	{r3, r4, r5, lr}
 80077ee:	4c06      	ldr	r4, [pc, #24]	; (8007808 <_close_r+0x1c>)
 80077f0:	2300      	movs	r3, #0
 80077f2:	4605      	mov	r5, r0
 80077f4:	4608      	mov	r0, r1
 80077f6:	6023      	str	r3, [r4, #0]
 80077f8:	f7fd fb0f 	bl	8004e1a <_close>
 80077fc:	1c43      	adds	r3, r0, #1
 80077fe:	d102      	bne.n	8007806 <_close_r+0x1a>
 8007800:	6823      	ldr	r3, [r4, #0]
 8007802:	b103      	cbz	r3, 8007806 <_close_r+0x1a>
 8007804:	602b      	str	r3, [r5, #0]
 8007806:	bd38      	pop	{r3, r4, r5, pc}
 8007808:	200003c0 	.word	0x200003c0

0800780c <_fstat_r>:
 800780c:	b538      	push	{r3, r4, r5, lr}
 800780e:	4c07      	ldr	r4, [pc, #28]	; (800782c <_fstat_r+0x20>)
 8007810:	2300      	movs	r3, #0
 8007812:	4605      	mov	r5, r0
 8007814:	4608      	mov	r0, r1
 8007816:	4611      	mov	r1, r2
 8007818:	6023      	str	r3, [r4, #0]
 800781a:	f7fd fb0a 	bl	8004e32 <_fstat>
 800781e:	1c43      	adds	r3, r0, #1
 8007820:	d102      	bne.n	8007828 <_fstat_r+0x1c>
 8007822:	6823      	ldr	r3, [r4, #0]
 8007824:	b103      	cbz	r3, 8007828 <_fstat_r+0x1c>
 8007826:	602b      	str	r3, [r5, #0]
 8007828:	bd38      	pop	{r3, r4, r5, pc}
 800782a:	bf00      	nop
 800782c:	200003c0 	.word	0x200003c0

08007830 <_isatty_r>:
 8007830:	b538      	push	{r3, r4, r5, lr}
 8007832:	4c06      	ldr	r4, [pc, #24]	; (800784c <_isatty_r+0x1c>)
 8007834:	2300      	movs	r3, #0
 8007836:	4605      	mov	r5, r0
 8007838:	4608      	mov	r0, r1
 800783a:	6023      	str	r3, [r4, #0]
 800783c:	f7fd fb09 	bl	8004e52 <_isatty>
 8007840:	1c43      	adds	r3, r0, #1
 8007842:	d102      	bne.n	800784a <_isatty_r+0x1a>
 8007844:	6823      	ldr	r3, [r4, #0]
 8007846:	b103      	cbz	r3, 800784a <_isatty_r+0x1a>
 8007848:	602b      	str	r3, [r5, #0]
 800784a:	bd38      	pop	{r3, r4, r5, pc}
 800784c:	200003c0 	.word	0x200003c0

08007850 <_lseek_r>:
 8007850:	b538      	push	{r3, r4, r5, lr}
 8007852:	4c07      	ldr	r4, [pc, #28]	; (8007870 <_lseek_r+0x20>)
 8007854:	4605      	mov	r5, r0
 8007856:	4608      	mov	r0, r1
 8007858:	4611      	mov	r1, r2
 800785a:	2200      	movs	r2, #0
 800785c:	6022      	str	r2, [r4, #0]
 800785e:	461a      	mov	r2, r3
 8007860:	f7fd fb02 	bl	8004e68 <_lseek>
 8007864:	1c43      	adds	r3, r0, #1
 8007866:	d102      	bne.n	800786e <_lseek_r+0x1e>
 8007868:	6823      	ldr	r3, [r4, #0]
 800786a:	b103      	cbz	r3, 800786e <_lseek_r+0x1e>
 800786c:	602b      	str	r3, [r5, #0]
 800786e:	bd38      	pop	{r3, r4, r5, pc}
 8007870:	200003c0 	.word	0x200003c0

08007874 <__ascii_mbtowc>:
 8007874:	b082      	sub	sp, #8
 8007876:	b901      	cbnz	r1, 800787a <__ascii_mbtowc+0x6>
 8007878:	a901      	add	r1, sp, #4
 800787a:	b142      	cbz	r2, 800788e <__ascii_mbtowc+0x1a>
 800787c:	b14b      	cbz	r3, 8007892 <__ascii_mbtowc+0x1e>
 800787e:	7813      	ldrb	r3, [r2, #0]
 8007880:	600b      	str	r3, [r1, #0]
 8007882:	7812      	ldrb	r2, [r2, #0]
 8007884:	1c10      	adds	r0, r2, #0
 8007886:	bf18      	it	ne
 8007888:	2001      	movne	r0, #1
 800788a:	b002      	add	sp, #8
 800788c:	4770      	bx	lr
 800788e:	4610      	mov	r0, r2
 8007890:	e7fb      	b.n	800788a <__ascii_mbtowc+0x16>
 8007892:	f06f 0001 	mvn.w	r0, #1
 8007896:	e7f8      	b.n	800788a <__ascii_mbtowc+0x16>

08007898 <__malloc_lock>:
 8007898:	4770      	bx	lr

0800789a <__malloc_unlock>:
 800789a:	4770      	bx	lr

0800789c <_read_r>:
 800789c:	b538      	push	{r3, r4, r5, lr}
 800789e:	4c07      	ldr	r4, [pc, #28]	; (80078bc <_read_r+0x20>)
 80078a0:	4605      	mov	r5, r0
 80078a2:	4608      	mov	r0, r1
 80078a4:	4611      	mov	r1, r2
 80078a6:	2200      	movs	r2, #0
 80078a8:	6022      	str	r2, [r4, #0]
 80078aa:	461a      	mov	r2, r3
 80078ac:	f7fd fa7c 	bl	8004da8 <_read>
 80078b0:	1c43      	adds	r3, r0, #1
 80078b2:	d102      	bne.n	80078ba <_read_r+0x1e>
 80078b4:	6823      	ldr	r3, [r4, #0]
 80078b6:	b103      	cbz	r3, 80078ba <_read_r+0x1e>
 80078b8:	602b      	str	r3, [r5, #0]
 80078ba:	bd38      	pop	{r3, r4, r5, pc}
 80078bc:	200003c0 	.word	0x200003c0

080078c0 <__ascii_wctomb>:
 80078c0:	b149      	cbz	r1, 80078d6 <__ascii_wctomb+0x16>
 80078c2:	2aff      	cmp	r2, #255	; 0xff
 80078c4:	bf85      	ittet	hi
 80078c6:	238a      	movhi	r3, #138	; 0x8a
 80078c8:	6003      	strhi	r3, [r0, #0]
 80078ca:	700a      	strbls	r2, [r1, #0]
 80078cc:	f04f 30ff 	movhi.w	r0, #4294967295
 80078d0:	bf98      	it	ls
 80078d2:	2001      	movls	r0, #1
 80078d4:	4770      	bx	lr
 80078d6:	4608      	mov	r0, r1
 80078d8:	4770      	bx	lr
	...

080078dc <_init>:
 80078dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078de:	bf00      	nop
 80078e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078e2:	bc08      	pop	{r3}
 80078e4:	469e      	mov	lr, r3
 80078e6:	4770      	bx	lr

080078e8 <_fini>:
 80078e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078ea:	bf00      	nop
 80078ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078ee:	bc08      	pop	{r3}
 80078f0:	469e      	mov	lr, r3
 80078f2:	4770      	bx	lr
