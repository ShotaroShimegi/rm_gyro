
rm_gyro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000070ec  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000378  08007280  08007280  00017280  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080075f8  080075f8  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  080075f8  080075f8  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080075f8  080075f8  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080075f8  080075f8  000175f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080075fc  080075fc  000175fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08007600  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c4  200001dc  080077dc  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003a0  080077dc  000203a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020a6f  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003bc6  00000000  00000000  00040c7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012d8  00000000  00000000  00044848  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001130  00000000  00000000  00045b20  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001c65d  00000000  00000000  00046c50  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000132de  00000000  00000000  000632ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008de52  00000000  00000000  0007658b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001043dd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005bfc  00000000  00000000  00104458  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007264 	.word	0x08007264

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08007264 	.word	0x08007264

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c4c:	4b08      	ldr	r3, [pc, #32]	; (8000c70 <HAL_Init+0x28>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a07      	ldr	r2, [pc, #28]	; (8000c70 <HAL_Init+0x28>)
 8000c52:	f043 0310 	orr.w	r3, r3, #16
 8000c56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c58:	2003      	movs	r0, #3
 8000c5a:	f000 fa45 	bl	80010e8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c5e:	2000      	movs	r0, #0
 8000c60:	f000 f808 	bl	8000c74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c64:	f003 fd08 	bl	8004678 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c68:	2300      	movs	r3, #0
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40022000 	.word	0x40022000

08000c74 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c7c:	4b12      	ldr	r3, [pc, #72]	; (8000cc8 <HAL_InitTick+0x54>)
 8000c7e:	681a      	ldr	r2, [r3, #0]
 8000c80:	4b12      	ldr	r3, [pc, #72]	; (8000ccc <HAL_InitTick+0x58>)
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	4619      	mov	r1, r3
 8000c86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c92:	4618      	mov	r0, r3
 8000c94:	f000 fa5d 	bl	8001152 <HAL_SYSTICK_Config>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	e00e      	b.n	8000cc0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	2b0f      	cmp	r3, #15
 8000ca6:	d80a      	bhi.n	8000cbe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ca8:	2200      	movs	r2, #0
 8000caa:	6879      	ldr	r1, [r7, #4]
 8000cac:	f04f 30ff 	mov.w	r0, #4294967295
 8000cb0:	f000 fa25 	bl	80010fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cb4:	4a06      	ldr	r2, [pc, #24]	; (8000cd0 <HAL_InitTick+0x5c>)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	e000      	b.n	8000cc0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cbe:	2301      	movs	r3, #1
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	3708      	adds	r7, #8
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	20000008 	.word	0x20000008
 8000ccc:	20000004 	.word	0x20000004
 8000cd0:	20000000 	.word	0x20000000

08000cd4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cd8:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <HAL_IncTick+0x20>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	461a      	mov	r2, r3
 8000cde:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <HAL_IncTick+0x24>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4413      	add	r3, r2
 8000ce4:	4a04      	ldr	r2, [pc, #16]	; (8000cf8 <HAL_IncTick+0x24>)
 8000ce6:	6013      	str	r3, [r2, #0]
}
 8000ce8:	bf00      	nop
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	20000004 	.word	0x20000004
 8000cf8:	20000204 	.word	0x20000204

08000cfc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  return uwTick;  
 8000d00:	4b03      	ldr	r3, [pc, #12]	; (8000d10 <HAL_GetTick+0x14>)
 8000d02:	681b      	ldr	r3, [r3, #0]
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	20000204 	.word	0x20000204

08000d14 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b084      	sub	sp, #16
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d1c:	f7ff ffee 	bl	8000cfc <HAL_GetTick>
 8000d20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d2c:	d005      	beq.n	8000d3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d2e:	4b09      	ldr	r3, [pc, #36]	; (8000d54 <HAL_Delay+0x40>)
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	461a      	mov	r2, r3
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	4413      	add	r3, r2
 8000d38:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000d3a:	bf00      	nop
 8000d3c:	f7ff ffde 	bl	8000cfc <HAL_GetTick>
 8000d40:	4602      	mov	r2, r0
 8000d42:	68bb      	ldr	r3, [r7, #8]
 8000d44:	1ad3      	subs	r3, r2, r3
 8000d46:	68fa      	ldr	r2, [r7, #12]
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	d8f7      	bhi.n	8000d3c <HAL_Delay+0x28>
  {
  }
}
 8000d4c:	bf00      	nop
 8000d4e:	3710      	adds	r7, #16
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	20000004 	.word	0x20000004

08000d58 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b084      	sub	sp, #16
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d101      	bne.n	8000d6a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000d66:	2301      	movs	r3, #1
 8000d68:	e0ed      	b.n	8000f46 <HAL_CAN_Init+0x1ee>
  assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

  if (hcan->State == HAL_CAN_STATE_RESET)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d102      	bne.n	8000d7c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000d76:	6878      	ldr	r0, [r7, #4]
 8000d78:	f003 f9fc 	bl	8004174 <HAL_CAN_MspInit>
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	681a      	ldr	r2, [r3, #0]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f022 0202 	bic.w	r2, r2, #2
 8000d8a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d8c:	f7ff ffb6 	bl	8000cfc <HAL_GetTick>
 8000d90:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000d92:	e012      	b.n	8000dba <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d94:	f7ff ffb2 	bl	8000cfc <HAL_GetTick>
 8000d98:	4602      	mov	r2, r0
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	1ad3      	subs	r3, r2, r3
 8000d9e:	2b0a      	cmp	r3, #10
 8000da0:	d90b      	bls.n	8000dba <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000da6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	2205      	movs	r2, #5
 8000db2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000db6:	2301      	movs	r3, #1
 8000db8:	e0c5      	b.n	8000f46 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	f003 0302 	and.w	r3, r3, #2
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d1e5      	bne.n	8000d94 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f042 0201 	orr.w	r2, r2, #1
 8000dd6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000dd8:	f7ff ff90 	bl	8000cfc <HAL_GetTick>
 8000ddc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000dde:	e012      	b.n	8000e06 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000de0:	f7ff ff8c 	bl	8000cfc <HAL_GetTick>
 8000de4:	4602      	mov	r2, r0
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	1ad3      	subs	r3, r2, r3
 8000dea:	2b0a      	cmp	r3, #10
 8000dec:	d90b      	bls.n	8000e06 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000df2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	2205      	movs	r2, #5
 8000dfe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000e02:	2301      	movs	r3, #1
 8000e04:	e09f      	b.n	8000f46 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	f003 0301 	and.w	r3, r3, #1
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d0e5      	beq.n	8000de0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	7e1b      	ldrb	r3, [r3, #24]
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d108      	bne.n	8000e2e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	e007      	b.n	8000e3e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e3c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	7e5b      	ldrb	r3, [r3, #25]
 8000e42:	2b01      	cmp	r3, #1
 8000e44:	d108      	bne.n	8000e58 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000e54:	601a      	str	r2, [r3, #0]
 8000e56:	e007      	b.n	8000e68 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000e66:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	7e9b      	ldrb	r3, [r3, #26]
 8000e6c:	2b01      	cmp	r3, #1
 8000e6e:	d108      	bne.n	8000e82 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f042 0220 	orr.w	r2, r2, #32
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	e007      	b.n	8000e92 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f022 0220 	bic.w	r2, r2, #32
 8000e90:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	7edb      	ldrb	r3, [r3, #27]
 8000e96:	2b01      	cmp	r3, #1
 8000e98:	d108      	bne.n	8000eac <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f022 0210 	bic.w	r2, r2, #16
 8000ea8:	601a      	str	r2, [r3, #0]
 8000eaa:	e007      	b.n	8000ebc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f042 0210 	orr.w	r2, r2, #16
 8000eba:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	7f1b      	ldrb	r3, [r3, #28]
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	d108      	bne.n	8000ed6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f042 0208 	orr.w	r2, r2, #8
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	e007      	b.n	8000ee6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f022 0208 	bic.w	r2, r2, #8
 8000ee4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	7f5b      	ldrb	r3, [r3, #29]
 8000eea:	2b01      	cmp	r3, #1
 8000eec:	d108      	bne.n	8000f00 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f042 0204 	orr.w	r2, r2, #4
 8000efc:	601a      	str	r2, [r3, #0]
 8000efe:	e007      	b.n	8000f10 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f022 0204 	bic.w	r2, r2, #4
 8000f0e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	689a      	ldr	r2, [r3, #8]
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	431a      	orrs	r2, r3
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	691b      	ldr	r3, [r3, #16]
 8000f1e:	431a      	orrs	r2, r3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	695b      	ldr	r3, [r3, #20]
 8000f24:	ea42 0103 	orr.w	r1, r2, r3
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	1e5a      	subs	r2, r3, #1
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	430a      	orrs	r2, r1
 8000f34:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2200      	movs	r2, #0
 8000f3a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2201      	movs	r2, #1
 8000f40:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000f44:	2300      	movs	r3, #0
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3710      	adds	r7, #16
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
	...

08000f50 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b085      	sub	sp, #20
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	f003 0307 	and.w	r3, r3, #7
 8000f5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f60:	4b0c      	ldr	r3, [pc, #48]	; (8000f94 <NVIC_SetPriorityGrouping+0x44>)
 8000f62:	68db      	ldr	r3, [r3, #12]
 8000f64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f66:	68ba      	ldr	r2, [r7, #8]
 8000f68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f82:	4a04      	ldr	r2, [pc, #16]	; (8000f94 <NVIC_SetPriorityGrouping+0x44>)
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	60d3      	str	r3, [r2, #12]
}
 8000f88:	bf00      	nop
 8000f8a:	3714      	adds	r7, #20
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr
 8000f94:	e000ed00 	.word	0xe000ed00

08000f98 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f9c:	4b04      	ldr	r3, [pc, #16]	; (8000fb0 <NVIC_GetPriorityGrouping+0x18>)
 8000f9e:	68db      	ldr	r3, [r3, #12]
 8000fa0:	0a1b      	lsrs	r3, r3, #8
 8000fa2:	f003 0307 	and.w	r3, r3, #7
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr
 8000fb0:	e000ed00 	.word	0xe000ed00

08000fb4 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	4603      	mov	r3, r0
 8000fbc:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000fbe:	79fb      	ldrb	r3, [r7, #7]
 8000fc0:	f003 021f 	and.w	r2, r3, #31
 8000fc4:	4907      	ldr	r1, [pc, #28]	; (8000fe4 <NVIC_EnableIRQ+0x30>)
 8000fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fca:	095b      	lsrs	r3, r3, #5
 8000fcc:	2001      	movs	r0, #1
 8000fce:	fa00 f202 	lsl.w	r2, r0, r2
 8000fd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000fd6:	bf00      	nop
 8000fd8:	370c      	adds	r7, #12
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	e000e100 	.word	0xe000e100

08000fe8 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	4603      	mov	r3, r0
 8000ff0:	6039      	str	r1, [r7, #0]
 8000ff2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000ff4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	da0b      	bge.n	8001014 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	b2da      	uxtb	r2, r3
 8001000:	490c      	ldr	r1, [pc, #48]	; (8001034 <NVIC_SetPriority+0x4c>)
 8001002:	79fb      	ldrb	r3, [r7, #7]
 8001004:	f003 030f 	and.w	r3, r3, #15
 8001008:	3b04      	subs	r3, #4
 800100a:	0112      	lsls	r2, r2, #4
 800100c:	b2d2      	uxtb	r2, r2
 800100e:	440b      	add	r3, r1
 8001010:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001012:	e009      	b.n	8001028 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	b2da      	uxtb	r2, r3
 8001018:	4907      	ldr	r1, [pc, #28]	; (8001038 <NVIC_SetPriority+0x50>)
 800101a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101e:	0112      	lsls	r2, r2, #4
 8001020:	b2d2      	uxtb	r2, r2
 8001022:	440b      	add	r3, r1
 8001024:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001028:	bf00      	nop
 800102a:	370c      	adds	r7, #12
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr
 8001034:	e000ed00 	.word	0xe000ed00
 8001038:	e000e100 	.word	0xe000e100

0800103c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800103c:	b480      	push	{r7}
 800103e:	b089      	sub	sp, #36	; 0x24
 8001040:	af00      	add	r7, sp, #0
 8001042:	60f8      	str	r0, [r7, #12]
 8001044:	60b9      	str	r1, [r7, #8]
 8001046:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	f003 0307 	and.w	r3, r3, #7
 800104e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001050:	69fb      	ldr	r3, [r7, #28]
 8001052:	f1c3 0307 	rsb	r3, r3, #7
 8001056:	2b04      	cmp	r3, #4
 8001058:	bf28      	it	cs
 800105a:	2304      	movcs	r3, #4
 800105c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	3304      	adds	r3, #4
 8001062:	2b06      	cmp	r3, #6
 8001064:	d902      	bls.n	800106c <NVIC_EncodePriority+0x30>
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	3b03      	subs	r3, #3
 800106a:	e000      	b.n	800106e <NVIC_EncodePriority+0x32>
 800106c:	2300      	movs	r3, #0
 800106e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001070:	f04f 32ff 	mov.w	r2, #4294967295
 8001074:	69bb      	ldr	r3, [r7, #24]
 8001076:	fa02 f303 	lsl.w	r3, r2, r3
 800107a:	43da      	mvns	r2, r3
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	401a      	ands	r2, r3
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001084:	f04f 31ff 	mov.w	r1, #4294967295
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	fa01 f303 	lsl.w	r3, r1, r3
 800108e:	43d9      	mvns	r1, r3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001094:	4313      	orrs	r3, r2
         );
}
 8001096:	4618      	mov	r0, r3
 8001098:	3724      	adds	r7, #36	; 0x24
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
	...

080010a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	3b01      	subs	r3, #1
 80010b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010b4:	d301      	bcc.n	80010ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010b6:	2301      	movs	r3, #1
 80010b8:	e00f      	b.n	80010da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ba:	4a0a      	ldr	r2, [pc, #40]	; (80010e4 <SysTick_Config+0x40>)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	3b01      	subs	r3, #1
 80010c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010c2:	210f      	movs	r1, #15
 80010c4:	f04f 30ff 	mov.w	r0, #4294967295
 80010c8:	f7ff ff8e 	bl	8000fe8 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010cc:	4b05      	ldr	r3, [pc, #20]	; (80010e4 <SysTick_Config+0x40>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010d2:	4b04      	ldr	r3, [pc, #16]	; (80010e4 <SysTick_Config+0x40>)
 80010d4:	2207      	movs	r2, #7
 80010d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010d8:	2300      	movs	r3, #0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	e000e010 	.word	0xe000e010

080010e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010f0:	6878      	ldr	r0, [r7, #4]
 80010f2:	f7ff ff2d 	bl	8000f50 <NVIC_SetPriorityGrouping>
}
 80010f6:	bf00      	nop
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}

080010fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010fe:	b580      	push	{r7, lr}
 8001100:	b086      	sub	sp, #24
 8001102:	af00      	add	r7, sp, #0
 8001104:	4603      	mov	r3, r0
 8001106:	60b9      	str	r1, [r7, #8]
 8001108:	607a      	str	r2, [r7, #4]
 800110a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800110c:	2300      	movs	r3, #0
 800110e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001110:	f7ff ff42 	bl	8000f98 <NVIC_GetPriorityGrouping>
 8001114:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001116:	687a      	ldr	r2, [r7, #4]
 8001118:	68b9      	ldr	r1, [r7, #8]
 800111a:	6978      	ldr	r0, [r7, #20]
 800111c:	f7ff ff8e 	bl	800103c <NVIC_EncodePriority>
 8001120:	4602      	mov	r2, r0
 8001122:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001126:	4611      	mov	r1, r2
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff ff5d 	bl	8000fe8 <NVIC_SetPriority>
}
 800112e:	bf00      	nop
 8001130:	3718      	adds	r7, #24
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b082      	sub	sp, #8
 800113a:	af00      	add	r7, sp, #0
 800113c:	4603      	mov	r3, r0
 800113e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff ff35 	bl	8000fb4 <NVIC_EnableIRQ>
}
 800114a:	bf00      	nop
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}

08001152 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001152:	b580      	push	{r7, lr}
 8001154:	b082      	sub	sp, #8
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f7ff ffa2 	bl	80010a4 <SysTick_Config>
 8001160:	4603      	mov	r3, r0
}
 8001162:	4618      	mov	r0, r3
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
	...

0800116c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800116c:	b480      	push	{r7}
 800116e:	b087      	sub	sp, #28
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001176:	2300      	movs	r3, #0
 8001178:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800117a:	2300      	movs	r3, #0
 800117c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800117e:	2300      	movs	r3, #0
 8001180:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001182:	e14e      	b.n	8001422 <HAL_GPIO_Init+0x2b6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	2101      	movs	r1, #1
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	fa01 f303 	lsl.w	r3, r1, r3
 8001190:	4013      	ands	r3, r2
 8001192:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	2b00      	cmp	r3, #0
 8001198:	f000 8140 	beq.w	800141c <HAL_GPIO_Init+0x2b0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	2b02      	cmp	r3, #2
 80011a2:	d003      	beq.n	80011ac <HAL_GPIO_Init+0x40>
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	2b12      	cmp	r3, #18
 80011aa:	d123      	bne.n	80011f4 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	08da      	lsrs	r2, r3, #3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	3208      	adds	r2, #8
 80011b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	f003 0307 	and.w	r3, r3, #7
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	220f      	movs	r2, #15
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	43db      	mvns	r3, r3
 80011ca:	693a      	ldr	r2, [r7, #16]
 80011cc:	4013      	ands	r3, r2
 80011ce:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	691a      	ldr	r2, [r3, #16]
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	f003 0307 	and.w	r3, r3, #7
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	693a      	ldr	r2, [r7, #16]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	08da      	lsrs	r2, r3, #3
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	3208      	adds	r2, #8
 80011ee:	6939      	ldr	r1, [r7, #16]
 80011f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	2203      	movs	r2, #3
 8001200:	fa02 f303 	lsl.w	r3, r2, r3
 8001204:	43db      	mvns	r3, r3
 8001206:	693a      	ldr	r2, [r7, #16]
 8001208:	4013      	ands	r3, r2
 800120a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f003 0203 	and.w	r2, r3, #3
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	693a      	ldr	r2, [r7, #16]
 800121e:	4313      	orrs	r3, r2
 8001220:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	693a      	ldr	r2, [r7, #16]
 8001226:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	2b01      	cmp	r3, #1
 800122e:	d00b      	beq.n	8001248 <HAL_GPIO_Init+0xdc>
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	2b02      	cmp	r3, #2
 8001236:	d007      	beq.n	8001248 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800123c:	2b11      	cmp	r3, #17
 800123e:	d003      	beq.n	8001248 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	2b12      	cmp	r3, #18
 8001246:	d130      	bne.n	80012aa <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	2203      	movs	r2, #3
 8001254:	fa02 f303 	lsl.w	r3, r2, r3
 8001258:	43db      	mvns	r3, r3
 800125a:	693a      	ldr	r2, [r7, #16]
 800125c:	4013      	ands	r3, r2
 800125e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	68da      	ldr	r2, [r3, #12]
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	693a      	ldr	r2, [r7, #16]
 800126e:	4313      	orrs	r3, r2
 8001270:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	693a      	ldr	r2, [r7, #16]
 8001276:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800127e:	2201      	movs	r2, #1
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	fa02 f303 	lsl.w	r3, r2, r3
 8001286:	43db      	mvns	r3, r3
 8001288:	693a      	ldr	r2, [r7, #16]
 800128a:	4013      	ands	r3, r2
 800128c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	091b      	lsrs	r3, r3, #4
 8001294:	f003 0201 	and.w	r2, r3, #1
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	fa02 f303 	lsl.w	r3, r2, r3
 800129e:	693a      	ldr	r2, [r7, #16]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	693a      	ldr	r2, [r7, #16]
 80012a8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	68db      	ldr	r3, [r3, #12]
 80012ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	005b      	lsls	r3, r3, #1
 80012b4:	2203      	movs	r2, #3
 80012b6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ba:	43db      	mvns	r3, r3
 80012bc:	693a      	ldr	r2, [r7, #16]
 80012be:	4013      	ands	r3, r2
 80012c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	689a      	ldr	r2, [r3, #8]
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	005b      	lsls	r3, r3, #1
 80012ca:	fa02 f303 	lsl.w	r3, r2, r3
 80012ce:	693a      	ldr	r2, [r7, #16]
 80012d0:	4313      	orrs	r3, r2
 80012d2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	693a      	ldr	r2, [r7, #16]
 80012d8:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	f000 809a 	beq.w	800141c <HAL_GPIO_Init+0x2b0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012e8:	4b55      	ldr	r3, [pc, #340]	; (8001440 <HAL_GPIO_Init+0x2d4>)
 80012ea:	699b      	ldr	r3, [r3, #24]
 80012ec:	4a54      	ldr	r2, [pc, #336]	; (8001440 <HAL_GPIO_Init+0x2d4>)
 80012ee:	f043 0301 	orr.w	r3, r3, #1
 80012f2:	6193      	str	r3, [r2, #24]
 80012f4:	4b52      	ldr	r3, [pc, #328]	; (8001440 <HAL_GPIO_Init+0x2d4>)
 80012f6:	699b      	ldr	r3, [r3, #24]
 80012f8:	f003 0301 	and.w	r3, r3, #1
 80012fc:	60bb      	str	r3, [r7, #8]
 80012fe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8001300:	4a50      	ldr	r2, [pc, #320]	; (8001444 <HAL_GPIO_Init+0x2d8>)
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	089b      	lsrs	r3, r3, #2
 8001306:	3302      	adds	r3, #2
 8001308:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800130c:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	f003 0303 	and.w	r3, r3, #3
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	220f      	movs	r2, #15
 8001318:	fa02 f303 	lsl.w	r3, r2, r3
 800131c:	43db      	mvns	r3, r3
 800131e:	693a      	ldr	r2, [r7, #16]
 8001320:	4013      	ands	r3, r2
 8001322:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800132a:	d013      	beq.n	8001354 <HAL_GPIO_Init+0x1e8>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	4a46      	ldr	r2, [pc, #280]	; (8001448 <HAL_GPIO_Init+0x2dc>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d00d      	beq.n	8001350 <HAL_GPIO_Init+0x1e4>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	4a45      	ldr	r2, [pc, #276]	; (800144c <HAL_GPIO_Init+0x2e0>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d007      	beq.n	800134c <HAL_GPIO_Init+0x1e0>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	4a44      	ldr	r2, [pc, #272]	; (8001450 <HAL_GPIO_Init+0x2e4>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d101      	bne.n	8001348 <HAL_GPIO_Init+0x1dc>
 8001344:	2303      	movs	r3, #3
 8001346:	e006      	b.n	8001356 <HAL_GPIO_Init+0x1ea>
 8001348:	2305      	movs	r3, #5
 800134a:	e004      	b.n	8001356 <HAL_GPIO_Init+0x1ea>
 800134c:	2302      	movs	r3, #2
 800134e:	e002      	b.n	8001356 <HAL_GPIO_Init+0x1ea>
 8001350:	2301      	movs	r3, #1
 8001352:	e000      	b.n	8001356 <HAL_GPIO_Init+0x1ea>
 8001354:	2300      	movs	r3, #0
 8001356:	697a      	ldr	r2, [r7, #20]
 8001358:	f002 0203 	and.w	r2, r2, #3
 800135c:	0092      	lsls	r2, r2, #2
 800135e:	4093      	lsls	r3, r2
 8001360:	693a      	ldr	r2, [r7, #16]
 8001362:	4313      	orrs	r3, r2
 8001364:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001366:	4937      	ldr	r1, [pc, #220]	; (8001444 <HAL_GPIO_Init+0x2d8>)
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	089b      	lsrs	r3, r3, #2
 800136c:	3302      	adds	r3, #2
 800136e:	693a      	ldr	r2, [r7, #16]
 8001370:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001374:	4b37      	ldr	r3, [pc, #220]	; (8001454 <HAL_GPIO_Init+0x2e8>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	43db      	mvns	r3, r3
 800137e:	693a      	ldr	r2, [r7, #16]
 8001380:	4013      	ands	r3, r2
 8001382:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800138c:	2b00      	cmp	r3, #0
 800138e:	d003      	beq.n	8001398 <HAL_GPIO_Init+0x22c>
        {
          temp |= iocurrent;
 8001390:	693a      	ldr	r2, [r7, #16]
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	4313      	orrs	r3, r2
 8001396:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001398:	4a2e      	ldr	r2, [pc, #184]	; (8001454 <HAL_GPIO_Init+0x2e8>)
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800139e:	4b2d      	ldr	r3, [pc, #180]	; (8001454 <HAL_GPIO_Init+0x2e8>)
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	43db      	mvns	r3, r3
 80013a8:	693a      	ldr	r2, [r7, #16]
 80013aa:	4013      	ands	r3, r2
 80013ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d003      	beq.n	80013c2 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 80013ba:	693a      	ldr	r2, [r7, #16]
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	4313      	orrs	r3, r2
 80013c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80013c2:	4a24      	ldr	r2, [pc, #144]	; (8001454 <HAL_GPIO_Init+0x2e8>)
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013c8:	4b22      	ldr	r3, [pc, #136]	; (8001454 <HAL_GPIO_Init+0x2e8>)
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	43db      	mvns	r3, r3
 80013d2:	693a      	ldr	r2, [r7, #16]
 80013d4:	4013      	ands	r3, r2
 80013d6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d003      	beq.n	80013ec <HAL_GPIO_Init+0x280>
        {
          temp |= iocurrent;
 80013e4:	693a      	ldr	r2, [r7, #16]
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80013ec:	4a19      	ldr	r2, [pc, #100]	; (8001454 <HAL_GPIO_Init+0x2e8>)
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013f2:	4b18      	ldr	r3, [pc, #96]	; (8001454 <HAL_GPIO_Init+0x2e8>)
 80013f4:	68db      	ldr	r3, [r3, #12]
 80013f6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	43db      	mvns	r3, r3
 80013fc:	693a      	ldr	r2, [r7, #16]
 80013fe:	4013      	ands	r3, r2
 8001400:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800140a:	2b00      	cmp	r3, #0
 800140c:	d003      	beq.n	8001416 <HAL_GPIO_Init+0x2aa>
        {
          temp |= iocurrent;
 800140e:	693a      	ldr	r2, [r7, #16]
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	4313      	orrs	r3, r2
 8001414:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001416:	4a0f      	ldr	r2, [pc, #60]	; (8001454 <HAL_GPIO_Init+0x2e8>)
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	3301      	adds	r3, #1
 8001420:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	fa22 f303 	lsr.w	r3, r2, r3
 800142c:	2b00      	cmp	r3, #0
 800142e:	f47f aea9 	bne.w	8001184 <HAL_GPIO_Init+0x18>
  }
}
 8001432:	bf00      	nop
 8001434:	371c      	adds	r7, #28
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	40021000 	.word	0x40021000
 8001444:	40010000 	.word	0x40010000
 8001448:	48000400 	.word	0x48000400
 800144c:	48000800 	.word	0x48000800
 8001450:	48000c00 	.word	0x48000c00
 8001454:	40010400 	.word	0x40010400

08001458 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	460b      	mov	r3, r1
 8001462:	807b      	strh	r3, [r7, #2]
 8001464:	4613      	mov	r3, r2
 8001466:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001468:	787b      	ldrb	r3, [r7, #1]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d003      	beq.n	8001476 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800146e:	887a      	ldrh	r2, [r7, #2]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001474:	e002      	b.n	800147c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001476:	887a      	ldrh	r2, [r7, #2]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800147c:	bf00      	nop
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d101      	bne.n	800149a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e081      	b.n	800159e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d106      	bne.n	80014b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2200      	movs	r2, #0
 80014aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	f002 ff44 	bl	800433c <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2224      	movs	r2, #36	; 0x24
 80014b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f022 0201 	bic.w	r2, r2, #1
 80014ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	685a      	ldr	r2, [r3, #4]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80014d8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	689a      	ldr	r2, [r3, #8]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80014e8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	68db      	ldr	r3, [r3, #12]
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d107      	bne.n	8001502 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	689a      	ldr	r2, [r3, #8]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80014fe:	609a      	str	r2, [r3, #8]
 8001500:	e006      	b.n	8001510 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	689a      	ldr	r2, [r3, #8]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800150e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	2b02      	cmp	r3, #2
 8001516:	d104      	bne.n	8001522 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001520:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	687a      	ldr	r2, [r7, #4]
 800152a:	6812      	ldr	r2, [r2, #0]
 800152c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001530:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001534:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	68da      	ldr	r2, [r3, #12]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001544:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	691a      	ldr	r2, [r3, #16]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	695b      	ldr	r3, [r3, #20]
 800154e:	ea42 0103 	orr.w	r1, r2, r3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	699b      	ldr	r3, [r3, #24]
 8001556:	021a      	lsls	r2, r3, #8
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	430a      	orrs	r2, r1
 800155e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	69d9      	ldr	r1, [r3, #28]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6a1a      	ldr	r2, [r3, #32]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	430a      	orrs	r2, r1
 800156e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f042 0201 	orr.w	r2, r2, #1
 800157e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2200      	movs	r2, #0
 8001584:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2220      	movs	r2, #32
 800158a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2200      	movs	r2, #0
 8001592:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2200      	movs	r2, #0
 8001598:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800159c:	2300      	movs	r3, #0
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}

080015a6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80015a6:	b480      	push	{r7}
 80015a8:	b083      	sub	sp, #12
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
 80015ae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	2b20      	cmp	r3, #32
 80015ba:	d138      	bne.n	800162e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d101      	bne.n	80015ca <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80015c6:	2302      	movs	r3, #2
 80015c8:	e032      	b.n	8001630 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2201      	movs	r2, #1
 80015ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2224      	movs	r2, #36	; 0x24
 80015d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f022 0201 	bic.w	r2, r2, #1
 80015e8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80015f8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	6819      	ldr	r1, [r3, #0]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	683a      	ldr	r2, [r7, #0]
 8001606:	430a      	orrs	r2, r1
 8001608:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f042 0201 	orr.w	r2, r2, #1
 8001618:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2220      	movs	r2, #32
 800161e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2200      	movs	r2, #0
 8001626:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800162a:	2300      	movs	r3, #0
 800162c:	e000      	b.n	8001630 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800162e:	2302      	movs	r3, #2
  }
}
 8001630:	4618      	mov	r0, r3
 8001632:	370c      	adds	r7, #12
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800163c:	b480      	push	{r7}
 800163e:	b085      	sub	sp, #20
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8001646:	2300      	movs	r3, #0
 8001648:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001650:	b2db      	uxtb	r3, r3
 8001652:	2b20      	cmp	r3, #32
 8001654:	d139      	bne.n	80016ca <HAL_I2CEx_ConfigDigitalFilter+0x8e>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800165c:	2b01      	cmp	r3, #1
 800165e:	d101      	bne.n	8001664 <HAL_I2CEx_ConfigDigitalFilter+0x28>
 8001660:	2302      	movs	r3, #2
 8001662:	e033      	b.n	80016cc <HAL_I2CEx_ConfigDigitalFilter+0x90>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2201      	movs	r2, #1
 8001668:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2224      	movs	r2, #36	; 0x24
 8001670:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f022 0201 	bic.w	r2, r2, #1
 8001682:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001692:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	021b      	lsls	r3, r3, #8
 8001698:	68fa      	ldr	r2, [r7, #12]
 800169a:	4313      	orrs	r3, r2
 800169c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	68fa      	ldr	r2, [r7, #12]
 80016a4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f042 0201 	orr.w	r2, r2, #1
 80016b4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2220      	movs	r2, #32
 80016ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2200      	movs	r2, #0
 80016c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80016c6:	2300      	movs	r3, #0
 80016c8:	e000      	b.n	80016cc <HAL_I2CEx_ConfigDigitalFilter+0x90>
  }
  else
  {
    return HAL_BUSY;
 80016ca:	2302      	movs	r3, #2
  }
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3714      	adds	r7, #20
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr

080016d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80016de:	af00      	add	r7, sp, #0
 80016e0:	1d3b      	adds	r3, r7, #4
 80016e2:	6018      	str	r0, [r3, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016e4:	1d3b      	adds	r3, r7, #4
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d102      	bne.n	80016f2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	f000 beda 	b.w	80024a6 <HAL_RCC_OscConfig+0xdce>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016f2:	1d3b      	adds	r3, r7, #4
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f003 0301 	and.w	r3, r3, #1
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	f000 816e 	beq.w	80019de <HAL_RCC_OscConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001702:	4bb5      	ldr	r3, [pc, #724]	; (80019d8 <HAL_RCC_OscConfig+0x300>)
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	f003 030c 	and.w	r3, r3, #12
 800170a:	2b04      	cmp	r3, #4
 800170c:	d00c      	beq.n	8001728 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800170e:	4bb2      	ldr	r3, [pc, #712]	; (80019d8 <HAL_RCC_OscConfig+0x300>)
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	f003 030c 	and.w	r3, r3, #12
 8001716:	2b08      	cmp	r3, #8
 8001718:	d15a      	bne.n	80017d0 <HAL_RCC_OscConfig+0xf8>
 800171a:	4baf      	ldr	r3, [pc, #700]	; (80019d8 <HAL_RCC_OscConfig+0x300>)
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001722:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001726:	d153      	bne.n	80017d0 <HAL_RCC_OscConfig+0xf8>
 8001728:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800172c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001730:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001734:	fa93 f3a3 	rbit	r3, r3
 8001738:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800173c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001740:	fab3 f383 	clz	r3, r3
 8001744:	b2db      	uxtb	r3, r3
 8001746:	095b      	lsrs	r3, r3, #5
 8001748:	b2db      	uxtb	r3, r3
 800174a:	f043 0301 	orr.w	r3, r3, #1
 800174e:	b2db      	uxtb	r3, r3
 8001750:	2b01      	cmp	r3, #1
 8001752:	d102      	bne.n	800175a <HAL_RCC_OscConfig+0x82>
 8001754:	4ba0      	ldr	r3, [pc, #640]	; (80019d8 <HAL_RCC_OscConfig+0x300>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	e015      	b.n	8001786 <HAL_RCC_OscConfig+0xae>
 800175a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800175e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001762:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001766:	fa93 f3a3 	rbit	r3, r3
 800176a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800176e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001772:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001776:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800177a:	fa93 f3a3 	rbit	r3, r3
 800177e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001782:	4b95      	ldr	r3, [pc, #596]	; (80019d8 <HAL_RCC_OscConfig+0x300>)
 8001784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001786:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800178a:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800178e:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001792:	fa92 f2a2 	rbit	r2, r2
 8001796:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return(result);
 800179a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800179e:	fab2 f282 	clz	r2, r2
 80017a2:	b252      	sxtb	r2, r2
 80017a4:	f042 0220 	orr.w	r2, r2, #32
 80017a8:	b252      	sxtb	r2, r2
 80017aa:	b2d2      	uxtb	r2, r2
 80017ac:	f002 021f 	and.w	r2, r2, #31
 80017b0:	2101      	movs	r1, #1
 80017b2:	fa01 f202 	lsl.w	r2, r1, r2
 80017b6:	4013      	ands	r3, r2
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	f000 810f 	beq.w	80019dc <HAL_RCC_OscConfig+0x304>
 80017be:	1d3b      	adds	r3, r7, #4
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	f040 8109 	bne.w	80019dc <HAL_RCC_OscConfig+0x304>
      {
        return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	f000 be6b 	b.w	80024a6 <HAL_RCC_OscConfig+0xdce>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017d0:	1d3b      	adds	r3, r7, #4
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017da:	d106      	bne.n	80017ea <HAL_RCC_OscConfig+0x112>
 80017dc:	4b7e      	ldr	r3, [pc, #504]	; (80019d8 <HAL_RCC_OscConfig+0x300>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a7d      	ldr	r2, [pc, #500]	; (80019d8 <HAL_RCC_OscConfig+0x300>)
 80017e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017e6:	6013      	str	r3, [r2, #0]
 80017e8:	e030      	b.n	800184c <HAL_RCC_OscConfig+0x174>
 80017ea:	1d3b      	adds	r3, r7, #4
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d10c      	bne.n	800180e <HAL_RCC_OscConfig+0x136>
 80017f4:	4b78      	ldr	r3, [pc, #480]	; (80019d8 <HAL_RCC_OscConfig+0x300>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a77      	ldr	r2, [pc, #476]	; (80019d8 <HAL_RCC_OscConfig+0x300>)
 80017fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017fe:	6013      	str	r3, [r2, #0]
 8001800:	4b75      	ldr	r3, [pc, #468]	; (80019d8 <HAL_RCC_OscConfig+0x300>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a74      	ldr	r2, [pc, #464]	; (80019d8 <HAL_RCC_OscConfig+0x300>)
 8001806:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800180a:	6013      	str	r3, [r2, #0]
 800180c:	e01e      	b.n	800184c <HAL_RCC_OscConfig+0x174>
 800180e:	1d3b      	adds	r3, r7, #4
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001818:	d10c      	bne.n	8001834 <HAL_RCC_OscConfig+0x15c>
 800181a:	4b6f      	ldr	r3, [pc, #444]	; (80019d8 <HAL_RCC_OscConfig+0x300>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a6e      	ldr	r2, [pc, #440]	; (80019d8 <HAL_RCC_OscConfig+0x300>)
 8001820:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001824:	6013      	str	r3, [r2, #0]
 8001826:	4b6c      	ldr	r3, [pc, #432]	; (80019d8 <HAL_RCC_OscConfig+0x300>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a6b      	ldr	r2, [pc, #428]	; (80019d8 <HAL_RCC_OscConfig+0x300>)
 800182c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001830:	6013      	str	r3, [r2, #0]
 8001832:	e00b      	b.n	800184c <HAL_RCC_OscConfig+0x174>
 8001834:	4b68      	ldr	r3, [pc, #416]	; (80019d8 <HAL_RCC_OscConfig+0x300>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a67      	ldr	r2, [pc, #412]	; (80019d8 <HAL_RCC_OscConfig+0x300>)
 800183a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800183e:	6013      	str	r3, [r2, #0]
 8001840:	4b65      	ldr	r3, [pc, #404]	; (80019d8 <HAL_RCC_OscConfig+0x300>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a64      	ldr	r2, [pc, #400]	; (80019d8 <HAL_RCC_OscConfig+0x300>)
 8001846:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800184a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800184c:	4b62      	ldr	r3, [pc, #392]	; (80019d8 <HAL_RCC_OscConfig+0x300>)
 800184e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001850:	f023 020f 	bic.w	r2, r3, #15
 8001854:	1d3b      	adds	r3, r7, #4
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	495f      	ldr	r1, [pc, #380]	; (80019d8 <HAL_RCC_OscConfig+0x300>)
 800185c:	4313      	orrs	r3, r2
 800185e:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001860:	1d3b      	adds	r3, r7, #4
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d05a      	beq.n	8001920 <HAL_RCC_OscConfig+0x248>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800186a:	f7ff fa47 	bl	8000cfc <HAL_GetTick>
 800186e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001872:	e00a      	b.n	800188a <HAL_RCC_OscConfig+0x1b2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001874:	f7ff fa42 	bl	8000cfc <HAL_GetTick>
 8001878:	4602      	mov	r2, r0
 800187a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800187e:	1ad3      	subs	r3, r2, r3
 8001880:	2b64      	cmp	r3, #100	; 0x64
 8001882:	d902      	bls.n	800188a <HAL_RCC_OscConfig+0x1b2>
          {
            return HAL_TIMEOUT;
 8001884:	2303      	movs	r3, #3
 8001886:	f000 be0e 	b.w	80024a6 <HAL_RCC_OscConfig+0xdce>
 800188a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800188e:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001892:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001896:	fa93 f3a3 	rbit	r3, r3
 800189a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return(result);
 800189e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018a2:	fab3 f383 	clz	r3, r3
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	095b      	lsrs	r3, r3, #5
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	f043 0301 	orr.w	r3, r3, #1
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d102      	bne.n	80018bc <HAL_RCC_OscConfig+0x1e4>
 80018b6:	4b48      	ldr	r3, [pc, #288]	; (80019d8 <HAL_RCC_OscConfig+0x300>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	e015      	b.n	80018e8 <HAL_RCC_OscConfig+0x210>
 80018bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018c0:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018c4:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80018c8:	fa93 f3a3 	rbit	r3, r3
 80018cc:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80018d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018d4:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80018d8:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80018dc:	fa93 f3a3 	rbit	r3, r3
 80018e0:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80018e4:	4b3c      	ldr	r3, [pc, #240]	; (80019d8 <HAL_RCC_OscConfig+0x300>)
 80018e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80018ec:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80018f0:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80018f4:	fa92 f2a2 	rbit	r2, r2
 80018f8:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return(result);
 80018fc:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001900:	fab2 f282 	clz	r2, r2
 8001904:	b252      	sxtb	r2, r2
 8001906:	f042 0220 	orr.w	r2, r2, #32
 800190a:	b252      	sxtb	r2, r2
 800190c:	b2d2      	uxtb	r2, r2
 800190e:	f002 021f 	and.w	r2, r2, #31
 8001912:	2101      	movs	r1, #1
 8001914:	fa01 f202 	lsl.w	r2, r1, r2
 8001918:	4013      	ands	r3, r2
 800191a:	2b00      	cmp	r3, #0
 800191c:	d0aa      	beq.n	8001874 <HAL_RCC_OscConfig+0x19c>
 800191e:	e05e      	b.n	80019de <HAL_RCC_OscConfig+0x306>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001920:	f7ff f9ec 	bl	8000cfc <HAL_GetTick>
 8001924:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001928:	e00a      	b.n	8001940 <HAL_RCC_OscConfig+0x268>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800192a:	f7ff f9e7 	bl	8000cfc <HAL_GetTick>
 800192e:	4602      	mov	r2, r0
 8001930:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	2b64      	cmp	r3, #100	; 0x64
 8001938:	d902      	bls.n	8001940 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	f000 bdb3 	b.w	80024a6 <HAL_RCC_OscConfig+0xdce>
 8001940:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001944:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001948:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800194c:	fa93 f3a3 	rbit	r3, r3
 8001950:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return(result);
 8001954:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001958:	fab3 f383 	clz	r3, r3
 800195c:	b2db      	uxtb	r3, r3
 800195e:	095b      	lsrs	r3, r3, #5
 8001960:	b2db      	uxtb	r3, r3
 8001962:	f043 0301 	orr.w	r3, r3, #1
 8001966:	b2db      	uxtb	r3, r3
 8001968:	2b01      	cmp	r3, #1
 800196a:	d102      	bne.n	8001972 <HAL_RCC_OscConfig+0x29a>
 800196c:	4b1a      	ldr	r3, [pc, #104]	; (80019d8 <HAL_RCC_OscConfig+0x300>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	e015      	b.n	800199e <HAL_RCC_OscConfig+0x2c6>
 8001972:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001976:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800197a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800197e:	fa93 f3a3 	rbit	r3, r3
 8001982:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001986:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800198a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800198e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001992:	fa93 f3a3 	rbit	r3, r3
 8001996:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800199a:	4b0f      	ldr	r3, [pc, #60]	; (80019d8 <HAL_RCC_OscConfig+0x300>)
 800199c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800199e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80019a2:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80019a6:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80019aa:	fa92 f2a2 	rbit	r2, r2
 80019ae:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return(result);
 80019b2:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80019b6:	fab2 f282 	clz	r2, r2
 80019ba:	b252      	sxtb	r2, r2
 80019bc:	f042 0220 	orr.w	r2, r2, #32
 80019c0:	b252      	sxtb	r2, r2
 80019c2:	b2d2      	uxtb	r2, r2
 80019c4:	f002 021f 	and.w	r2, r2, #31
 80019c8:	2101      	movs	r1, #1
 80019ca:	fa01 f202 	lsl.w	r2, r1, r2
 80019ce:	4013      	ands	r3, r2
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d1aa      	bne.n	800192a <HAL_RCC_OscConfig+0x252>
 80019d4:	e003      	b.n	80019de <HAL_RCC_OscConfig+0x306>
 80019d6:	bf00      	nop
 80019d8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019de:	1d3b      	adds	r3, r7, #4
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 0302 	and.w	r3, r3, #2
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	f000 8170 	beq.w	8001cce <HAL_RCC_OscConfig+0x5f6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80019ee:	4bd0      	ldr	r3, [pc, #832]	; (8001d30 <HAL_RCC_OscConfig+0x658>)
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f003 030c 	and.w	r3, r3, #12
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d00b      	beq.n	8001a12 <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80019fa:	4bcd      	ldr	r3, [pc, #820]	; (8001d30 <HAL_RCC_OscConfig+0x658>)
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f003 030c 	and.w	r3, r3, #12
 8001a02:	2b08      	cmp	r3, #8
 8001a04:	d16d      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x40a>
 8001a06:	4bca      	ldr	r3, [pc, #808]	; (8001d30 <HAL_RCC_OscConfig+0x658>)
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d167      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x40a>
 8001a12:	2302      	movs	r3, #2
 8001a14:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a18:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001a1c:	fa93 f3a3 	rbit	r3, r3
 8001a20:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return(result);
 8001a24:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a28:	fab3 f383 	clz	r3, r3
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	095b      	lsrs	r3, r3, #5
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	f043 0301 	orr.w	r3, r3, #1
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d102      	bne.n	8001a42 <HAL_RCC_OscConfig+0x36a>
 8001a3c:	4bbc      	ldr	r3, [pc, #752]	; (8001d30 <HAL_RCC_OscConfig+0x658>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	e013      	b.n	8001a6a <HAL_RCC_OscConfig+0x392>
 8001a42:	2302      	movs	r3, #2
 8001a44:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a48:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001a4c:	fa93 f3a3 	rbit	r3, r3
 8001a50:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001a54:	2302      	movs	r3, #2
 8001a56:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001a5a:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001a5e:	fa93 f3a3 	rbit	r3, r3
 8001a62:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001a66:	4bb2      	ldr	r3, [pc, #712]	; (8001d30 <HAL_RCC_OscConfig+0x658>)
 8001a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a6a:	2202      	movs	r2, #2
 8001a6c:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001a70:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001a74:	fa92 f2a2 	rbit	r2, r2
 8001a78:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return(result);
 8001a7c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001a80:	fab2 f282 	clz	r2, r2
 8001a84:	b252      	sxtb	r2, r2
 8001a86:	f042 0220 	orr.w	r2, r2, #32
 8001a8a:	b252      	sxtb	r2, r2
 8001a8c:	b2d2      	uxtb	r2, r2
 8001a8e:	f002 021f 	and.w	r2, r2, #31
 8001a92:	2101      	movs	r1, #1
 8001a94:	fa01 f202 	lsl.w	r2, r1, r2
 8001a98:	4013      	ands	r3, r2
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d007      	beq.n	8001aae <HAL_RCC_OscConfig+0x3d6>
 8001a9e:	1d3b      	adds	r3, r7, #4
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	691b      	ldr	r3, [r3, #16]
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d002      	beq.n	8001aae <HAL_RCC_OscConfig+0x3d6>
      {
        return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	f000 bcfc 	b.w	80024a6 <HAL_RCC_OscConfig+0xdce>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aae:	4ba0      	ldr	r3, [pc, #640]	; (8001d30 <HAL_RCC_OscConfig+0x658>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ab6:	1d3b      	adds	r3, r7, #4
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	6959      	ldr	r1, [r3, #20]
 8001abc:	23f8      	movs	r3, #248	; 0xf8
 8001abe:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ac2:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8001ac6:	fa93 f3a3 	rbit	r3, r3
 8001aca:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
  return(result);
 8001ace:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001ad2:	fab3 f383 	clz	r3, r3
 8001ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8001ada:	4995      	ldr	r1, [pc, #596]	; (8001d30 <HAL_RCC_OscConfig+0x658>)
 8001adc:	4313      	orrs	r3, r2
 8001ade:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ae0:	e0f5      	b.n	8001cce <HAL_RCC_OscConfig+0x5f6>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ae2:	1d3b      	adds	r3, r7, #4
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	691b      	ldr	r3, [r3, #16]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	f000 8085 	beq.w	8001bf8 <HAL_RCC_OscConfig+0x520>
 8001aee:	2301      	movs	r3, #1
 8001af0:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af4:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001af8:	fa93 f3a3 	rbit	r3, r3
 8001afc:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return(result);
 8001b00:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b04:	fab3 f383 	clz	r3, r3
 8001b08:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b0c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	461a      	mov	r2, r3
 8001b14:	2301      	movs	r3, #1
 8001b16:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b18:	f7ff f8f0 	bl	8000cfc <HAL_GetTick>
 8001b1c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b20:	e00a      	b.n	8001b38 <HAL_RCC_OscConfig+0x460>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b22:	f7ff f8eb 	bl	8000cfc <HAL_GetTick>
 8001b26:	4602      	mov	r2, r0
 8001b28:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d902      	bls.n	8001b38 <HAL_RCC_OscConfig+0x460>
          {
            return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	f000 bcb7 	b.w	80024a6 <HAL_RCC_OscConfig+0xdce>
 8001b38:	2302      	movs	r3, #2
 8001b3a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b3e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001b42:	fa93 f3a3 	rbit	r3, r3
 8001b46:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return(result);
 8001b4a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b4e:	fab3 f383 	clz	r3, r3
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	095b      	lsrs	r3, r3, #5
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	f043 0301 	orr.w	r3, r3, #1
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d102      	bne.n	8001b68 <HAL_RCC_OscConfig+0x490>
 8001b62:	4b73      	ldr	r3, [pc, #460]	; (8001d30 <HAL_RCC_OscConfig+0x658>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	e013      	b.n	8001b90 <HAL_RCC_OscConfig+0x4b8>
 8001b68:	2302      	movs	r3, #2
 8001b6a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b6e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001b72:	fa93 f3a3 	rbit	r3, r3
 8001b76:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001b7a:	2302      	movs	r3, #2
 8001b7c:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001b80:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001b84:	fa93 f3a3 	rbit	r3, r3
 8001b88:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001b8c:	4b68      	ldr	r3, [pc, #416]	; (8001d30 <HAL_RCC_OscConfig+0x658>)
 8001b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b90:	2202      	movs	r2, #2
 8001b92:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001b96:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001b9a:	fa92 f2a2 	rbit	r2, r2
 8001b9e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return(result);
 8001ba2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001ba6:	fab2 f282 	clz	r2, r2
 8001baa:	b252      	sxtb	r2, r2
 8001bac:	f042 0220 	orr.w	r2, r2, #32
 8001bb0:	b252      	sxtb	r2, r2
 8001bb2:	b2d2      	uxtb	r2, r2
 8001bb4:	f002 021f 	and.w	r2, r2, #31
 8001bb8:	2101      	movs	r1, #1
 8001bba:	fa01 f202 	lsl.w	r2, r1, r2
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d0ae      	beq.n	8001b22 <HAL_RCC_OscConfig+0x44a>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bc4:	4b5a      	ldr	r3, [pc, #360]	; (8001d30 <HAL_RCC_OscConfig+0x658>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bcc:	1d3b      	adds	r3, r7, #4
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	6959      	ldr	r1, [r3, #20]
 8001bd2:	23f8      	movs	r3, #248	; 0xf8
 8001bd4:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd8:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8001bdc:	fa93 f3a3 	rbit	r3, r3
 8001be0:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  return(result);
 8001be4:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8001be8:	fab3 f383 	clz	r3, r3
 8001bec:	fa01 f303 	lsl.w	r3, r1, r3
 8001bf0:	494f      	ldr	r1, [pc, #316]	; (8001d30 <HAL_RCC_OscConfig+0x658>)
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	600b      	str	r3, [r1, #0]
 8001bf6:	e06a      	b.n	8001cce <HAL_RCC_OscConfig+0x5f6>
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bfe:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001c02:	fa93 f3a3 	rbit	r3, r3
 8001c06:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return(result);
 8001c0a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c0e:	fab3 f383 	clz	r3, r3
 8001c12:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c16:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	2300      	movs	r3, #0
 8001c20:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c22:	f7ff f86b 	bl	8000cfc <HAL_GetTick>
 8001c26:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c2a:	e00a      	b.n	8001c42 <HAL_RCC_OscConfig+0x56a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c2c:	f7ff f866 	bl	8000cfc <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d902      	bls.n	8001c42 <HAL_RCC_OscConfig+0x56a>
          {
            return HAL_TIMEOUT;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	f000 bc32 	b.w	80024a6 <HAL_RCC_OscConfig+0xdce>
 8001c42:	2302      	movs	r3, #2
 8001c44:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c48:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001c4c:	fa93 f3a3 	rbit	r3, r3
 8001c50:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return(result);
 8001c54:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c58:	fab3 f383 	clz	r3, r3
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	095b      	lsrs	r3, r3, #5
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	f043 0301 	orr.w	r3, r3, #1
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d102      	bne.n	8001c72 <HAL_RCC_OscConfig+0x59a>
 8001c6c:	4b30      	ldr	r3, [pc, #192]	; (8001d30 <HAL_RCC_OscConfig+0x658>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	e013      	b.n	8001c9a <HAL_RCC_OscConfig+0x5c2>
 8001c72:	2302      	movs	r3, #2
 8001c74:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001c7c:	fa93 f3a3 	rbit	r3, r3
 8001c80:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001c84:	2302      	movs	r3, #2
 8001c86:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001c8a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001c8e:	fa93 f3a3 	rbit	r3, r3
 8001c92:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001c96:	4b26      	ldr	r3, [pc, #152]	; (8001d30 <HAL_RCC_OscConfig+0x658>)
 8001c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c9a:	2202      	movs	r2, #2
 8001c9c:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001ca0:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001ca4:	fa92 f2a2 	rbit	r2, r2
 8001ca8:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return(result);
 8001cac:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001cb0:	fab2 f282 	clz	r2, r2
 8001cb4:	b252      	sxtb	r2, r2
 8001cb6:	f042 0220 	orr.w	r2, r2, #32
 8001cba:	b252      	sxtb	r2, r2
 8001cbc:	b2d2      	uxtb	r2, r2
 8001cbe:	f002 021f 	and.w	r2, r2, #31
 8001cc2:	2101      	movs	r1, #1
 8001cc4:	fa01 f202 	lsl.w	r2, r1, r2
 8001cc8:	4013      	ands	r3, r2
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d1ae      	bne.n	8001c2c <HAL_RCC_OscConfig+0x554>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cce:	1d3b      	adds	r3, r7, #4
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 0308 	and.w	r3, r3, #8
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	f000 80d8 	beq.w	8001e8e <HAL_RCC_OscConfig+0x7b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cde:	1d3b      	adds	r3, r7, #4
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	699b      	ldr	r3, [r3, #24]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d067      	beq.n	8001db8 <HAL_RCC_OscConfig+0x6e0>
 8001ce8:	2301      	movs	r3, #1
 8001cea:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001cf2:	fa93 f3a3 	rbit	r3, r3
 8001cf6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return(result);
 8001cfa:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cfe:	fab3 f383 	clz	r3, r3
 8001d02:	461a      	mov	r2, r3
 8001d04:	4b0b      	ldr	r3, [pc, #44]	; (8001d34 <HAL_RCC_OscConfig+0x65c>)
 8001d06:	4413      	add	r3, r2
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d10:	f7fe fff4 	bl	8000cfc <HAL_GetTick>
 8001d14:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d18:	e00e      	b.n	8001d38 <HAL_RCC_OscConfig+0x660>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d1a:	f7fe ffef 	bl	8000cfc <HAL_GetTick>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d906      	bls.n	8001d38 <HAL_RCC_OscConfig+0x660>
        {
          return HAL_TIMEOUT;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e3bb      	b.n	80024a6 <HAL_RCC_OscConfig+0xdce>
 8001d2e:	bf00      	nop
 8001d30:	40021000 	.word	0x40021000
 8001d34:	10908120 	.word	0x10908120
 8001d38:	2302      	movs	r3, #2
 8001d3a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001d42:	fa93 f3a3 	rbit	r3, r3
 8001d46:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001d50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001d54:	fa93 f2a3 	rbit	r2, r3
 8001d58:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001d5c:	601a      	str	r2, [r3, #0]
 8001d5e:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001d62:	2202      	movs	r2, #2
 8001d64:	601a      	str	r2, [r3, #0]
 8001d66:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	fa93 f2a3 	rbit	r2, r3
 8001d70:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001d74:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d76:	4ba5      	ldr	r3, [pc, #660]	; (800200c <HAL_RCC_OscConfig+0x934>)
 8001d78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d7a:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001d7e:	2102      	movs	r1, #2
 8001d80:	6019      	str	r1, [r3, #0]
 8001d82:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	fa93 f1a3 	rbit	r1, r3
 8001d8c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001d90:	6019      	str	r1, [r3, #0]
  return(result);
 8001d92:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	fab3 f383 	clz	r3, r3
 8001d9c:	b25b      	sxtb	r3, r3
 8001d9e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001da2:	b25b      	sxtb	r3, r3
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	f003 031f 	and.w	r3, r3, #31
 8001daa:	2101      	movs	r1, #1
 8001dac:	fa01 f303 	lsl.w	r3, r1, r3
 8001db0:	4013      	ands	r3, r2
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d0b1      	beq.n	8001d1a <HAL_RCC_OscConfig+0x642>
 8001db6:	e06a      	b.n	8001e8e <HAL_RCC_OscConfig+0x7b6>
 8001db8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	fa93 f2a3 	rbit	r2, r3
 8001dca:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001dce:	601a      	str	r2, [r3, #0]
  return(result);
 8001dd0:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001dd4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dd6:	fab3 f383 	clz	r3, r3
 8001dda:	461a      	mov	r2, r3
 8001ddc:	4b8c      	ldr	r3, [pc, #560]	; (8002010 <HAL_RCC_OscConfig+0x938>)
 8001dde:	4413      	add	r3, r2
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	461a      	mov	r2, r3
 8001de4:	2300      	movs	r3, #0
 8001de6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001de8:	f7fe ff88 	bl	8000cfc <HAL_GetTick>
 8001dec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001df0:	e009      	b.n	8001e06 <HAL_RCC_OscConfig+0x72e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001df2:	f7fe ff83 	bl	8000cfc <HAL_GetTick>
 8001df6:	4602      	mov	r2, r0
 8001df8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d901      	bls.n	8001e06 <HAL_RCC_OscConfig+0x72e>
        {
          return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	e34f      	b.n	80024a6 <HAL_RCC_OscConfig+0xdce>
 8001e06:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001e0a:	2202      	movs	r2, #2
 8001e0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e0e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	fa93 f2a3 	rbit	r2, r3
 8001e18:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001e1c:	601a      	str	r2, [r3, #0]
 8001e1e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001e22:	2202      	movs	r2, #2
 8001e24:	601a      	str	r2, [r3, #0]
 8001e26:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	fa93 f2a3 	rbit	r2, r3
 8001e30:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001e34:	601a      	str	r2, [r3, #0]
 8001e36:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001e3a:	2202      	movs	r2, #2
 8001e3c:	601a      	str	r2, [r3, #0]
 8001e3e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	fa93 f2a3 	rbit	r2, r3
 8001e48:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001e4c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e4e:	4b6f      	ldr	r3, [pc, #444]	; (800200c <HAL_RCC_OscConfig+0x934>)
 8001e50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e52:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001e56:	2102      	movs	r1, #2
 8001e58:	6019      	str	r1, [r3, #0]
 8001e5a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	fa93 f1a3 	rbit	r1, r3
 8001e64:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001e68:	6019      	str	r1, [r3, #0]
  return(result);
 8001e6a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	fab3 f383 	clz	r3, r3
 8001e74:	b25b      	sxtb	r3, r3
 8001e76:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001e7a:	b25b      	sxtb	r3, r3
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	f003 031f 	and.w	r3, r3, #31
 8001e82:	2101      	movs	r1, #1
 8001e84:	fa01 f303 	lsl.w	r3, r1, r3
 8001e88:	4013      	ands	r3, r2
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d1b1      	bne.n	8001df2 <HAL_RCC_OscConfig+0x71a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e8e:	1d3b      	adds	r3, r7, #4
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 0304 	and.w	r3, r3, #4
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	f000 8159 	beq.w	8002150 <HAL_RCC_OscConfig+0xa78>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ea4:	4b59      	ldr	r3, [pc, #356]	; (800200c <HAL_RCC_OscConfig+0x934>)
 8001ea6:	69db      	ldr	r3, [r3, #28]
 8001ea8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d112      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x7fe>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eb0:	4b56      	ldr	r3, [pc, #344]	; (800200c <HAL_RCC_OscConfig+0x934>)
 8001eb2:	69db      	ldr	r3, [r3, #28]
 8001eb4:	4a55      	ldr	r2, [pc, #340]	; (800200c <HAL_RCC_OscConfig+0x934>)
 8001eb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eba:	61d3      	str	r3, [r2, #28]
 8001ebc:	4b53      	ldr	r3, [pc, #332]	; (800200c <HAL_RCC_OscConfig+0x934>)
 8001ebe:	69db      	ldr	r3, [r3, #28]
 8001ec0:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001ec4:	f107 030c 	add.w	r3, r7, #12
 8001ec8:	601a      	str	r2, [r3, #0]
 8001eca:	f107 030c 	add.w	r3, r7, #12
 8001ece:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ed6:	4b4f      	ldr	r3, [pc, #316]	; (8002014 <HAL_RCC_OscConfig+0x93c>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d11a      	bne.n	8001f18 <HAL_RCC_OscConfig+0x840>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ee2:	4b4c      	ldr	r3, [pc, #304]	; (8002014 <HAL_RCC_OscConfig+0x93c>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a4b      	ldr	r2, [pc, #300]	; (8002014 <HAL_RCC_OscConfig+0x93c>)
 8001ee8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eec:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001eee:	f7fe ff05 	bl	8000cfc <HAL_GetTick>
 8001ef2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ef6:	e009      	b.n	8001f0c <HAL_RCC_OscConfig+0x834>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ef8:	f7fe ff00 	bl	8000cfc <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f02:	1ad3      	subs	r3, r2, r3
 8001f04:	2b64      	cmp	r3, #100	; 0x64
 8001f06:	d901      	bls.n	8001f0c <HAL_RCC_OscConfig+0x834>
        {
          return HAL_TIMEOUT;
 8001f08:	2303      	movs	r3, #3
 8001f0a:	e2cc      	b.n	80024a6 <HAL_RCC_OscConfig+0xdce>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f0c:	4b41      	ldr	r3, [pc, #260]	; (8002014 <HAL_RCC_OscConfig+0x93c>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d0ef      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x820>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f18:	1d3b      	adds	r3, r7, #4
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	68db      	ldr	r3, [r3, #12]
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d106      	bne.n	8001f30 <HAL_RCC_OscConfig+0x858>
 8001f22:	4b3a      	ldr	r3, [pc, #232]	; (800200c <HAL_RCC_OscConfig+0x934>)
 8001f24:	6a1b      	ldr	r3, [r3, #32]
 8001f26:	4a39      	ldr	r2, [pc, #228]	; (800200c <HAL_RCC_OscConfig+0x934>)
 8001f28:	f043 0301 	orr.w	r3, r3, #1
 8001f2c:	6213      	str	r3, [r2, #32]
 8001f2e:	e02f      	b.n	8001f90 <HAL_RCC_OscConfig+0x8b8>
 8001f30:	1d3b      	adds	r3, r7, #4
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d10c      	bne.n	8001f54 <HAL_RCC_OscConfig+0x87c>
 8001f3a:	4b34      	ldr	r3, [pc, #208]	; (800200c <HAL_RCC_OscConfig+0x934>)
 8001f3c:	6a1b      	ldr	r3, [r3, #32]
 8001f3e:	4a33      	ldr	r2, [pc, #204]	; (800200c <HAL_RCC_OscConfig+0x934>)
 8001f40:	f023 0301 	bic.w	r3, r3, #1
 8001f44:	6213      	str	r3, [r2, #32]
 8001f46:	4b31      	ldr	r3, [pc, #196]	; (800200c <HAL_RCC_OscConfig+0x934>)
 8001f48:	6a1b      	ldr	r3, [r3, #32]
 8001f4a:	4a30      	ldr	r2, [pc, #192]	; (800200c <HAL_RCC_OscConfig+0x934>)
 8001f4c:	f023 0304 	bic.w	r3, r3, #4
 8001f50:	6213      	str	r3, [r2, #32]
 8001f52:	e01d      	b.n	8001f90 <HAL_RCC_OscConfig+0x8b8>
 8001f54:	1d3b      	adds	r3, r7, #4
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	68db      	ldr	r3, [r3, #12]
 8001f5a:	2b05      	cmp	r3, #5
 8001f5c:	d10c      	bne.n	8001f78 <HAL_RCC_OscConfig+0x8a0>
 8001f5e:	4b2b      	ldr	r3, [pc, #172]	; (800200c <HAL_RCC_OscConfig+0x934>)
 8001f60:	6a1b      	ldr	r3, [r3, #32]
 8001f62:	4a2a      	ldr	r2, [pc, #168]	; (800200c <HAL_RCC_OscConfig+0x934>)
 8001f64:	f043 0304 	orr.w	r3, r3, #4
 8001f68:	6213      	str	r3, [r2, #32]
 8001f6a:	4b28      	ldr	r3, [pc, #160]	; (800200c <HAL_RCC_OscConfig+0x934>)
 8001f6c:	6a1b      	ldr	r3, [r3, #32]
 8001f6e:	4a27      	ldr	r2, [pc, #156]	; (800200c <HAL_RCC_OscConfig+0x934>)
 8001f70:	f043 0301 	orr.w	r3, r3, #1
 8001f74:	6213      	str	r3, [r2, #32]
 8001f76:	e00b      	b.n	8001f90 <HAL_RCC_OscConfig+0x8b8>
 8001f78:	4b24      	ldr	r3, [pc, #144]	; (800200c <HAL_RCC_OscConfig+0x934>)
 8001f7a:	6a1b      	ldr	r3, [r3, #32]
 8001f7c:	4a23      	ldr	r2, [pc, #140]	; (800200c <HAL_RCC_OscConfig+0x934>)
 8001f7e:	f023 0301 	bic.w	r3, r3, #1
 8001f82:	6213      	str	r3, [r2, #32]
 8001f84:	4b21      	ldr	r3, [pc, #132]	; (800200c <HAL_RCC_OscConfig+0x934>)
 8001f86:	6a1b      	ldr	r3, [r3, #32]
 8001f88:	4a20      	ldr	r2, [pc, #128]	; (800200c <HAL_RCC_OscConfig+0x934>)
 8001f8a:	f023 0304 	bic.w	r3, r3, #4
 8001f8e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f90:	1d3b      	adds	r3, r7, #4
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	68db      	ldr	r3, [r3, #12]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d06b      	beq.n	8002072 <HAL_RCC_OscConfig+0x99a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f9a:	f7fe feaf 	bl	8000cfc <HAL_GetTick>
 8001f9e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fa2:	e00b      	b.n	8001fbc <HAL_RCC_OscConfig+0x8e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fa4:	f7fe feaa 	bl	8000cfc <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d901      	bls.n	8001fbc <HAL_RCC_OscConfig+0x8e4>
        {
          return HAL_TIMEOUT;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	e274      	b.n	80024a6 <HAL_RCC_OscConfig+0xdce>
 8001fbc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001fc0:	2202      	movs	r2, #2
 8001fc2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	fa93 f2a3 	rbit	r2, r3
 8001fce:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001fd2:	601a      	str	r2, [r3, #0]
 8001fd4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001fd8:	2202      	movs	r2, #2
 8001fda:	601a      	str	r2, [r3, #0]
 8001fdc:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	fa93 f2a3 	rbit	r2, r3
 8001fe6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001fea:	601a      	str	r2, [r3, #0]
  return(result);
 8001fec:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001ff0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ff2:	fab3 f383 	clz	r3, r3
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	095b      	lsrs	r3, r3, #5
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	f043 0302 	orr.w	r3, r3, #2
 8002000:	b2db      	uxtb	r3, r3
 8002002:	2b02      	cmp	r3, #2
 8002004:	d108      	bne.n	8002018 <HAL_RCC_OscConfig+0x940>
 8002006:	4b01      	ldr	r3, [pc, #4]	; (800200c <HAL_RCC_OscConfig+0x934>)
 8002008:	6a1b      	ldr	r3, [r3, #32]
 800200a:	e013      	b.n	8002034 <HAL_RCC_OscConfig+0x95c>
 800200c:	40021000 	.word	0x40021000
 8002010:	10908120 	.word	0x10908120
 8002014:	40007000 	.word	0x40007000
 8002018:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800201c:	2202      	movs	r2, #2
 800201e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002020:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	fa93 f2a3 	rbit	r2, r3
 800202a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800202e:	601a      	str	r2, [r3, #0]
 8002030:	4bbb      	ldr	r3, [pc, #748]	; (8002320 <HAL_RCC_OscConfig+0xc48>)
 8002032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002034:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002038:	2102      	movs	r1, #2
 800203a:	6011      	str	r1, [r2, #0]
 800203c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002040:	6812      	ldr	r2, [r2, #0]
 8002042:	fa92 f1a2 	rbit	r1, r2
 8002046:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800204a:	6011      	str	r1, [r2, #0]
  return(result);
 800204c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002050:	6812      	ldr	r2, [r2, #0]
 8002052:	fab2 f282 	clz	r2, r2
 8002056:	b252      	sxtb	r2, r2
 8002058:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800205c:	b252      	sxtb	r2, r2
 800205e:	b2d2      	uxtb	r2, r2
 8002060:	f002 021f 	and.w	r2, r2, #31
 8002064:	2101      	movs	r1, #1
 8002066:	fa01 f202 	lsl.w	r2, r1, r2
 800206a:	4013      	ands	r3, r2
 800206c:	2b00      	cmp	r3, #0
 800206e:	d099      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x8cc>
 8002070:	e064      	b.n	800213c <HAL_RCC_OscConfig+0xa64>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002072:	f7fe fe43 	bl	8000cfc <HAL_GetTick>
 8002076:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800207a:	e00b      	b.n	8002094 <HAL_RCC_OscConfig+0x9bc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800207c:	f7fe fe3e 	bl	8000cfc <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	f241 3288 	movw	r2, #5000	; 0x1388
 800208c:	4293      	cmp	r3, r2
 800208e:	d901      	bls.n	8002094 <HAL_RCC_OscConfig+0x9bc>
        {
          return HAL_TIMEOUT;
 8002090:	2303      	movs	r3, #3
 8002092:	e208      	b.n	80024a6 <HAL_RCC_OscConfig+0xdce>
 8002094:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002098:	2202      	movs	r2, #2
 800209a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800209c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	fa93 f2a3 	rbit	r2, r3
 80020a6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80020aa:	601a      	str	r2, [r3, #0]
 80020ac:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80020b0:	2202      	movs	r2, #2
 80020b2:	601a      	str	r2, [r3, #0]
 80020b4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	fa93 f2a3 	rbit	r2, r3
 80020be:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80020c2:	601a      	str	r2, [r3, #0]
  return(result);
 80020c4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80020c8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020ca:	fab3 f383 	clz	r3, r3
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	095b      	lsrs	r3, r3, #5
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	f043 0302 	orr.w	r3, r3, #2
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d102      	bne.n	80020e4 <HAL_RCC_OscConfig+0xa0c>
 80020de:	4b90      	ldr	r3, [pc, #576]	; (8002320 <HAL_RCC_OscConfig+0xc48>)
 80020e0:	6a1b      	ldr	r3, [r3, #32]
 80020e2:	e00d      	b.n	8002100 <HAL_RCC_OscConfig+0xa28>
 80020e4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80020e8:	2202      	movs	r2, #2
 80020ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ec:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	fa93 f2a3 	rbit	r2, r3
 80020f6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80020fa:	601a      	str	r2, [r3, #0]
 80020fc:	4b88      	ldr	r3, [pc, #544]	; (8002320 <HAL_RCC_OscConfig+0xc48>)
 80020fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002100:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002104:	2102      	movs	r1, #2
 8002106:	6011      	str	r1, [r2, #0]
 8002108:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800210c:	6812      	ldr	r2, [r2, #0]
 800210e:	fa92 f1a2 	rbit	r1, r2
 8002112:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002116:	6011      	str	r1, [r2, #0]
  return(result);
 8002118:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800211c:	6812      	ldr	r2, [r2, #0]
 800211e:	fab2 f282 	clz	r2, r2
 8002122:	b252      	sxtb	r2, r2
 8002124:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002128:	b252      	sxtb	r2, r2
 800212a:	b2d2      	uxtb	r2, r2
 800212c:	f002 021f 	and.w	r2, r2, #31
 8002130:	2101      	movs	r1, #1
 8002132:	fa01 f202 	lsl.w	r2, r1, r2
 8002136:	4013      	ands	r3, r2
 8002138:	2b00      	cmp	r3, #0
 800213a:	d19f      	bne.n	800207c <HAL_RCC_OscConfig+0x9a4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800213c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002140:	2b01      	cmp	r3, #1
 8002142:	d105      	bne.n	8002150 <HAL_RCC_OscConfig+0xa78>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002144:	4b76      	ldr	r3, [pc, #472]	; (8002320 <HAL_RCC_OscConfig+0xc48>)
 8002146:	69db      	ldr	r3, [r3, #28]
 8002148:	4a75      	ldr	r2, [pc, #468]	; (8002320 <HAL_RCC_OscConfig+0xc48>)
 800214a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800214e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002150:	1d3b      	adds	r3, r7, #4
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	69db      	ldr	r3, [r3, #28]
 8002156:	2b00      	cmp	r3, #0
 8002158:	f000 81a4 	beq.w	80024a4 <HAL_RCC_OscConfig+0xdcc>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800215c:	4b70      	ldr	r3, [pc, #448]	; (8002320 <HAL_RCC_OscConfig+0xc48>)
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f003 030c 	and.w	r3, r3, #12
 8002164:	2b08      	cmp	r3, #8
 8002166:	f000 819b 	beq.w	80024a0 <HAL_RCC_OscConfig+0xdc8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800216a:	1d3b      	adds	r3, r7, #4
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	69db      	ldr	r3, [r3, #28]
 8002170:	2b02      	cmp	r3, #2
 8002172:	f040 8113 	bne.w	800239c <HAL_RCC_OscConfig+0xcc4>
 8002176:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800217a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800217e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002180:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	fa93 f2a3 	rbit	r2, r3
 800218a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800218e:	601a      	str	r2, [r3, #0]
  return(result);
 8002190:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002194:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002196:	fab3 f383 	clz	r3, r3
 800219a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800219e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	461a      	mov	r2, r3
 80021a6:	2300      	movs	r3, #0
 80021a8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021aa:	f7fe fda7 	bl	8000cfc <HAL_GetTick>
 80021ae:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021b2:	e009      	b.n	80021c8 <HAL_RCC_OscConfig+0xaf0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021b4:	f7fe fda2 	bl	8000cfc <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d901      	bls.n	80021c8 <HAL_RCC_OscConfig+0xaf0>
          {
            return HAL_TIMEOUT;
 80021c4:	2303      	movs	r3, #3
 80021c6:	e16e      	b.n	80024a6 <HAL_RCC_OscConfig+0xdce>
 80021c8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80021cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	fa93 f2a3 	rbit	r2, r3
 80021dc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80021e0:	601a      	str	r2, [r3, #0]
  return(result);
 80021e2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80021e6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021e8:	fab3 f383 	clz	r3, r3
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	095b      	lsrs	r3, r3, #5
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	f043 0301 	orr.w	r3, r3, #1
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d102      	bne.n	8002202 <HAL_RCC_OscConfig+0xb2a>
 80021fc:	4b48      	ldr	r3, [pc, #288]	; (8002320 <HAL_RCC_OscConfig+0xc48>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	e01b      	b.n	800223a <HAL_RCC_OscConfig+0xb62>
 8002202:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002206:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800220a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800220c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	fa93 f2a3 	rbit	r2, r3
 8002216:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800221a:	601a      	str	r2, [r3, #0]
 800221c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002220:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002224:	601a      	str	r2, [r3, #0]
 8002226:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	fa93 f2a3 	rbit	r2, r3
 8002230:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002234:	601a      	str	r2, [r3, #0]
 8002236:	4b3a      	ldr	r3, [pc, #232]	; (8002320 <HAL_RCC_OscConfig+0xc48>)
 8002238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800223e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002242:	6011      	str	r1, [r2, #0]
 8002244:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002248:	6812      	ldr	r2, [r2, #0]
 800224a:	fa92 f1a2 	rbit	r1, r2
 800224e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002252:	6011      	str	r1, [r2, #0]
  return(result);
 8002254:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002258:	6812      	ldr	r2, [r2, #0]
 800225a:	fab2 f282 	clz	r2, r2
 800225e:	b252      	sxtb	r2, r2
 8002260:	f042 0220 	orr.w	r2, r2, #32
 8002264:	b252      	sxtb	r2, r2
 8002266:	b2d2      	uxtb	r2, r2
 8002268:	f002 021f 	and.w	r2, r2, #31
 800226c:	2101      	movs	r1, #1
 800226e:	fa01 f202 	lsl.w	r2, r1, r2
 8002272:	4013      	ands	r3, r2
 8002274:	2b00      	cmp	r3, #0
 8002276:	d19d      	bne.n	80021b4 <HAL_RCC_OscConfig+0xadc>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002278:	4b29      	ldr	r3, [pc, #164]	; (8002320 <HAL_RCC_OscConfig+0xc48>)
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002280:	1d3b      	adds	r3, r7, #4
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002286:	1d3b      	adds	r3, r7, #4
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	6a1b      	ldr	r3, [r3, #32]
 800228c:	430b      	orrs	r3, r1
 800228e:	4924      	ldr	r1, [pc, #144]	; (8002320 <HAL_RCC_OscConfig+0xc48>)
 8002290:	4313      	orrs	r3, r2
 8002292:	604b      	str	r3, [r1, #4]
 8002294:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002298:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800229c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800229e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	fa93 f2a3 	rbit	r2, r3
 80022a8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80022ac:	601a      	str	r2, [r3, #0]
  return(result);
 80022ae:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80022b2:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022b4:	fab3 f383 	clz	r3, r3
 80022b8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80022bc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	461a      	mov	r2, r3
 80022c4:	2301      	movs	r3, #1
 80022c6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c8:	f7fe fd18 	bl	8000cfc <HAL_GetTick>
 80022cc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022d0:	e009      	b.n	80022e6 <HAL_RCC_OscConfig+0xc0e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022d2:	f7fe fd13 	bl	8000cfc <HAL_GetTick>
 80022d6:	4602      	mov	r2, r0
 80022d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d901      	bls.n	80022e6 <HAL_RCC_OscConfig+0xc0e>
          {
            return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e0df      	b.n	80024a6 <HAL_RCC_OscConfig+0xdce>
 80022e6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80022ea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	fa93 f2a3 	rbit	r2, r3
 80022fa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80022fe:	601a      	str	r2, [r3, #0]
  return(result);
 8002300:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002304:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002306:	fab3 f383 	clz	r3, r3
 800230a:	b2db      	uxtb	r3, r3
 800230c:	095b      	lsrs	r3, r3, #5
 800230e:	b2db      	uxtb	r3, r3
 8002310:	f043 0301 	orr.w	r3, r3, #1
 8002314:	b2db      	uxtb	r3, r3
 8002316:	2b01      	cmp	r3, #1
 8002318:	d104      	bne.n	8002324 <HAL_RCC_OscConfig+0xc4c>
 800231a:	4b01      	ldr	r3, [pc, #4]	; (8002320 <HAL_RCC_OscConfig+0xc48>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	e01d      	b.n	800235c <HAL_RCC_OscConfig+0xc84>
 8002320:	40021000 	.word	0x40021000
 8002324:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002328:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800232c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800232e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	fa93 f2a3 	rbit	r2, r3
 8002338:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800233c:	601a      	str	r2, [r3, #0]
 800233e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002342:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002346:	601a      	str	r2, [r3, #0]
 8002348:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	fa93 f2a3 	rbit	r2, r3
 8002352:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002356:	601a      	str	r2, [r3, #0]
 8002358:	4b55      	ldr	r3, [pc, #340]	; (80024b0 <HAL_RCC_OscConfig+0xdd8>)
 800235a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002360:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002364:	6011      	str	r1, [r2, #0]
 8002366:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800236a:	6812      	ldr	r2, [r2, #0]
 800236c:	fa92 f1a2 	rbit	r1, r2
 8002370:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002374:	6011      	str	r1, [r2, #0]
  return(result);
 8002376:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800237a:	6812      	ldr	r2, [r2, #0]
 800237c:	fab2 f282 	clz	r2, r2
 8002380:	b252      	sxtb	r2, r2
 8002382:	f042 0220 	orr.w	r2, r2, #32
 8002386:	b252      	sxtb	r2, r2
 8002388:	b2d2      	uxtb	r2, r2
 800238a:	f002 021f 	and.w	r2, r2, #31
 800238e:	2101      	movs	r1, #1
 8002390:	fa01 f202 	lsl.w	r2, r1, r2
 8002394:	4013      	ands	r3, r2
 8002396:	2b00      	cmp	r3, #0
 8002398:	d09b      	beq.n	80022d2 <HAL_RCC_OscConfig+0xbfa>
 800239a:	e083      	b.n	80024a4 <HAL_RCC_OscConfig+0xdcc>
 800239c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80023a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80023a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	fa93 f2a3 	rbit	r2, r3
 80023b0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80023b4:	601a      	str	r2, [r3, #0]
  return(result);
 80023b6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80023ba:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023bc:	fab3 f383 	clz	r3, r3
 80023c0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80023c4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	461a      	mov	r2, r3
 80023cc:	2300      	movs	r3, #0
 80023ce:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d0:	f7fe fc94 	bl	8000cfc <HAL_GetTick>
 80023d4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023d8:	e009      	b.n	80023ee <HAL_RCC_OscConfig+0xd16>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023da:	f7fe fc8f 	bl	8000cfc <HAL_GetTick>
 80023de:	4602      	mov	r2, r0
 80023e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d901      	bls.n	80023ee <HAL_RCC_OscConfig+0xd16>
          {
            return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e05b      	b.n	80024a6 <HAL_RCC_OscConfig+0xdce>
 80023ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023f2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	fa93 f2a3 	rbit	r2, r3
 8002402:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002406:	601a      	str	r2, [r3, #0]
  return(result);
 8002408:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800240c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800240e:	fab3 f383 	clz	r3, r3
 8002412:	b2db      	uxtb	r3, r3
 8002414:	095b      	lsrs	r3, r3, #5
 8002416:	b2db      	uxtb	r3, r3
 8002418:	f043 0301 	orr.w	r3, r3, #1
 800241c:	b2db      	uxtb	r3, r3
 800241e:	2b01      	cmp	r3, #1
 8002420:	d102      	bne.n	8002428 <HAL_RCC_OscConfig+0xd50>
 8002422:	4b23      	ldr	r3, [pc, #140]	; (80024b0 <HAL_RCC_OscConfig+0xdd8>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	e01b      	b.n	8002460 <HAL_RCC_OscConfig+0xd88>
 8002428:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800242c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002430:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002432:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	fa93 f2a3 	rbit	r2, r3
 800243c:	f107 0320 	add.w	r3, r7, #32
 8002440:	601a      	str	r2, [r3, #0]
 8002442:	f107 031c 	add.w	r3, r7, #28
 8002446:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800244a:	601a      	str	r2, [r3, #0]
 800244c:	f107 031c 	add.w	r3, r7, #28
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	fa93 f2a3 	rbit	r2, r3
 8002456:	f107 0318 	add.w	r3, r7, #24
 800245a:	601a      	str	r2, [r3, #0]
 800245c:	4b14      	ldr	r3, [pc, #80]	; (80024b0 <HAL_RCC_OscConfig+0xdd8>)
 800245e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002460:	f107 0214 	add.w	r2, r7, #20
 8002464:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002468:	6011      	str	r1, [r2, #0]
 800246a:	f107 0214 	add.w	r2, r7, #20
 800246e:	6812      	ldr	r2, [r2, #0]
 8002470:	fa92 f1a2 	rbit	r1, r2
 8002474:	f107 0210 	add.w	r2, r7, #16
 8002478:	6011      	str	r1, [r2, #0]
  return(result);
 800247a:	f107 0210 	add.w	r2, r7, #16
 800247e:	6812      	ldr	r2, [r2, #0]
 8002480:	fab2 f282 	clz	r2, r2
 8002484:	b252      	sxtb	r2, r2
 8002486:	f042 0220 	orr.w	r2, r2, #32
 800248a:	b252      	sxtb	r2, r2
 800248c:	b2d2      	uxtb	r2, r2
 800248e:	f002 021f 	and.w	r2, r2, #31
 8002492:	2101      	movs	r1, #1
 8002494:	fa01 f202 	lsl.w	r2, r1, r2
 8002498:	4013      	ands	r3, r2
 800249a:	2b00      	cmp	r3, #0
 800249c:	d19d      	bne.n	80023da <HAL_RCC_OscConfig+0xd02>
 800249e:	e001      	b.n	80024a4 <HAL_RCC_OscConfig+0xdcc>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e000      	b.n	80024a6 <HAL_RCC_OscConfig+0xdce>
    }
  }
  
  return HAL_OK;
 80024a4:	2300      	movs	r3, #0
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	40021000 	.word	0x40021000

080024b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b09e      	sub	sp, #120	; 0x78
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80024be:	2300      	movs	r3, #0
 80024c0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d101      	bne.n	80024cc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e164      	b.n	8002796 <HAL_RCC_ClockConfig+0x2e2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024cc:	4b92      	ldr	r3, [pc, #584]	; (8002718 <HAL_RCC_ClockConfig+0x264>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0307 	and.w	r3, r3, #7
 80024d4:	683a      	ldr	r2, [r7, #0]
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d910      	bls.n	80024fc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024da:	4b8f      	ldr	r3, [pc, #572]	; (8002718 <HAL_RCC_ClockConfig+0x264>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f023 0207 	bic.w	r2, r3, #7
 80024e2:	498d      	ldr	r1, [pc, #564]	; (8002718 <HAL_RCC_ClockConfig+0x264>)
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	4313      	orrs	r3, r2
 80024e8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ea:	4b8b      	ldr	r3, [pc, #556]	; (8002718 <HAL_RCC_ClockConfig+0x264>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0307 	and.w	r3, r3, #7
 80024f2:	683a      	ldr	r2, [r7, #0]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d001      	beq.n	80024fc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e14c      	b.n	8002796 <HAL_RCC_ClockConfig+0x2e2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0302 	and.w	r3, r3, #2
 8002504:	2b00      	cmp	r3, #0
 8002506:	d008      	beq.n	800251a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002508:	4b84      	ldr	r3, [pc, #528]	; (800271c <HAL_RCC_ClockConfig+0x268>)
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	4981      	ldr	r1, [pc, #516]	; (800271c <HAL_RCC_ClockConfig+0x268>)
 8002516:	4313      	orrs	r3, r2
 8002518:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0301 	and.w	r3, r3, #1
 8002522:	2b00      	cmp	r3, #0
 8002524:	f000 80df 	beq.w	80026e6 <HAL_RCC_ClockConfig+0x232>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	2b01      	cmp	r3, #1
 800252e:	d13d      	bne.n	80025ac <HAL_RCC_ClockConfig+0xf8>
 8002530:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002534:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002536:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002538:	fa93 f3a3 	rbit	r3, r3
 800253c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return(result);
 800253e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002540:	fab3 f383 	clz	r3, r3
 8002544:	b2db      	uxtb	r3, r3
 8002546:	095b      	lsrs	r3, r3, #5
 8002548:	b2db      	uxtb	r3, r3
 800254a:	f043 0301 	orr.w	r3, r3, #1
 800254e:	b2db      	uxtb	r3, r3
 8002550:	2b01      	cmp	r3, #1
 8002552:	d102      	bne.n	800255a <HAL_RCC_ClockConfig+0xa6>
 8002554:	4b71      	ldr	r3, [pc, #452]	; (800271c <HAL_RCC_ClockConfig+0x268>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	e00f      	b.n	800257a <HAL_RCC_ClockConfig+0xc6>
 800255a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800255e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002560:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002562:	fa93 f3a3 	rbit	r3, r3
 8002566:	667b      	str	r3, [r7, #100]	; 0x64
 8002568:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800256c:	663b      	str	r3, [r7, #96]	; 0x60
 800256e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002570:	fa93 f3a3 	rbit	r3, r3
 8002574:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002576:	4b69      	ldr	r3, [pc, #420]	; (800271c <HAL_RCC_ClockConfig+0x268>)
 8002578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800257e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002580:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002582:	fa92 f2a2 	rbit	r2, r2
 8002586:	657a      	str	r2, [r7, #84]	; 0x54
  return(result);
 8002588:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800258a:	fab2 f282 	clz	r2, r2
 800258e:	b252      	sxtb	r2, r2
 8002590:	f042 0220 	orr.w	r2, r2, #32
 8002594:	b252      	sxtb	r2, r2
 8002596:	b2d2      	uxtb	r2, r2
 8002598:	f002 021f 	and.w	r2, r2, #31
 800259c:	2101      	movs	r1, #1
 800259e:	fa01 f202 	lsl.w	r2, r1, r2
 80025a2:	4013      	ands	r3, r2
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d17d      	bne.n	80026a4 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e0f4      	b.n	8002796 <HAL_RCC_ClockConfig+0x2e2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d13d      	bne.n	8002630 <HAL_RCC_ClockConfig+0x17c>
 80025b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025b8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025bc:	fa93 f3a3 	rbit	r3, r3
 80025c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  return(result);
 80025c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025c4:	fab3 f383 	clz	r3, r3
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	095b      	lsrs	r3, r3, #5
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	f043 0301 	orr.w	r3, r3, #1
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d102      	bne.n	80025de <HAL_RCC_ClockConfig+0x12a>
 80025d8:	4b50      	ldr	r3, [pc, #320]	; (800271c <HAL_RCC_ClockConfig+0x268>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	e00f      	b.n	80025fe <HAL_RCC_ClockConfig+0x14a>
 80025de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025e2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025e6:	fa93 f3a3 	rbit	r3, r3
 80025ea:	647b      	str	r3, [r7, #68]	; 0x44
 80025ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025f0:	643b      	str	r3, [r7, #64]	; 0x40
 80025f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025f4:	fa93 f3a3 	rbit	r3, r3
 80025f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025fa:	4b48      	ldr	r3, [pc, #288]	; (800271c <HAL_RCC_ClockConfig+0x268>)
 80025fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002602:	63ba      	str	r2, [r7, #56]	; 0x38
 8002604:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002606:	fa92 f2a2 	rbit	r2, r2
 800260a:	637a      	str	r2, [r7, #52]	; 0x34
  return(result);
 800260c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800260e:	fab2 f282 	clz	r2, r2
 8002612:	b252      	sxtb	r2, r2
 8002614:	f042 0220 	orr.w	r2, r2, #32
 8002618:	b252      	sxtb	r2, r2
 800261a:	b2d2      	uxtb	r2, r2
 800261c:	f002 021f 	and.w	r2, r2, #31
 8002620:	2101      	movs	r1, #1
 8002622:	fa01 f202 	lsl.w	r2, r1, r2
 8002626:	4013      	ands	r3, r2
 8002628:	2b00      	cmp	r3, #0
 800262a:	d13b      	bne.n	80026a4 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e0b2      	b.n	8002796 <HAL_RCC_ClockConfig+0x2e2>
 8002630:	2302      	movs	r3, #2
 8002632:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002636:	fa93 f3a3 	rbit	r3, r3
 800263a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 800263c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800263e:	fab3 f383 	clz	r3, r3
 8002642:	b2db      	uxtb	r3, r3
 8002644:	095b      	lsrs	r3, r3, #5
 8002646:	b2db      	uxtb	r3, r3
 8002648:	f043 0301 	orr.w	r3, r3, #1
 800264c:	b2db      	uxtb	r3, r3
 800264e:	2b01      	cmp	r3, #1
 8002650:	d102      	bne.n	8002658 <HAL_RCC_ClockConfig+0x1a4>
 8002652:	4b32      	ldr	r3, [pc, #200]	; (800271c <HAL_RCC_ClockConfig+0x268>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	e00d      	b.n	8002674 <HAL_RCC_ClockConfig+0x1c0>
 8002658:	2302      	movs	r3, #2
 800265a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800265c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800265e:	fa93 f3a3 	rbit	r3, r3
 8002662:	627b      	str	r3, [r7, #36]	; 0x24
 8002664:	2302      	movs	r3, #2
 8002666:	623b      	str	r3, [r7, #32]
 8002668:	6a3b      	ldr	r3, [r7, #32]
 800266a:	fa93 f3a3 	rbit	r3, r3
 800266e:	61fb      	str	r3, [r7, #28]
 8002670:	4b2a      	ldr	r3, [pc, #168]	; (800271c <HAL_RCC_ClockConfig+0x268>)
 8002672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002674:	2202      	movs	r2, #2
 8002676:	61ba      	str	r2, [r7, #24]
 8002678:	69ba      	ldr	r2, [r7, #24]
 800267a:	fa92 f2a2 	rbit	r2, r2
 800267e:	617a      	str	r2, [r7, #20]
  return(result);
 8002680:	697a      	ldr	r2, [r7, #20]
 8002682:	fab2 f282 	clz	r2, r2
 8002686:	b252      	sxtb	r2, r2
 8002688:	f042 0220 	orr.w	r2, r2, #32
 800268c:	b252      	sxtb	r2, r2
 800268e:	b2d2      	uxtb	r2, r2
 8002690:	f002 021f 	and.w	r2, r2, #31
 8002694:	2101      	movs	r1, #1
 8002696:	fa01 f202 	lsl.w	r2, r1, r2
 800269a:	4013      	ands	r3, r2
 800269c:	2b00      	cmp	r3, #0
 800269e:	d101      	bne.n	80026a4 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e078      	b.n	8002796 <HAL_RCC_ClockConfig+0x2e2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026a4:	4b1d      	ldr	r3, [pc, #116]	; (800271c <HAL_RCC_ClockConfig+0x268>)
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f023 0203 	bic.w	r2, r3, #3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	491a      	ldr	r1, [pc, #104]	; (800271c <HAL_RCC_ClockConfig+0x268>)
 80026b2:	4313      	orrs	r3, r2
 80026b4:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026b6:	f7fe fb21 	bl	8000cfc <HAL_GetTick>
 80026ba:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026bc:	e00a      	b.n	80026d4 <HAL_RCC_ClockConfig+0x220>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026be:	f7fe fb1d 	bl	8000cfc <HAL_GetTick>
 80026c2:	4602      	mov	r2, r0
 80026c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d901      	bls.n	80026d4 <HAL_RCC_ClockConfig+0x220>
      {
        return HAL_TIMEOUT;
 80026d0:	2303      	movs	r3, #3
 80026d2:	e060      	b.n	8002796 <HAL_RCC_ClockConfig+0x2e2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026d4:	4b11      	ldr	r3, [pc, #68]	; (800271c <HAL_RCC_ClockConfig+0x268>)
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f003 020c 	and.w	r2, r3, #12
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d1eb      	bne.n	80026be <HAL_RCC_ClockConfig+0x20a>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026e6:	4b0c      	ldr	r3, [pc, #48]	; (8002718 <HAL_RCC_ClockConfig+0x264>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0307 	and.w	r3, r3, #7
 80026ee:	683a      	ldr	r2, [r7, #0]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d215      	bcs.n	8002720 <HAL_RCC_ClockConfig+0x26c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026f4:	4b08      	ldr	r3, [pc, #32]	; (8002718 <HAL_RCC_ClockConfig+0x264>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f023 0207 	bic.w	r2, r3, #7
 80026fc:	4906      	ldr	r1, [pc, #24]	; (8002718 <HAL_RCC_ClockConfig+0x264>)
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	4313      	orrs	r3, r2
 8002702:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002704:	4b04      	ldr	r3, [pc, #16]	; (8002718 <HAL_RCC_ClockConfig+0x264>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0307 	and.w	r3, r3, #7
 800270c:	683a      	ldr	r2, [r7, #0]
 800270e:	429a      	cmp	r2, r3
 8002710:	d006      	beq.n	8002720 <HAL_RCC_ClockConfig+0x26c>
    {
      return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e03f      	b.n	8002796 <HAL_RCC_ClockConfig+0x2e2>
 8002716:	bf00      	nop
 8002718:	40022000 	.word	0x40022000
 800271c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0304 	and.w	r3, r3, #4
 8002728:	2b00      	cmp	r3, #0
 800272a:	d008      	beq.n	800273e <HAL_RCC_ClockConfig+0x28a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800272c:	4b1c      	ldr	r3, [pc, #112]	; (80027a0 <HAL_RCC_ClockConfig+0x2ec>)
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	4919      	ldr	r1, [pc, #100]	; (80027a0 <HAL_RCC_ClockConfig+0x2ec>)
 800273a:	4313      	orrs	r3, r2
 800273c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0308 	and.w	r3, r3, #8
 8002746:	2b00      	cmp	r3, #0
 8002748:	d009      	beq.n	800275e <HAL_RCC_ClockConfig+0x2aa>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800274a:	4b15      	ldr	r3, [pc, #84]	; (80027a0 <HAL_RCC_ClockConfig+0x2ec>)
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	691b      	ldr	r3, [r3, #16]
 8002756:	00db      	lsls	r3, r3, #3
 8002758:	4911      	ldr	r1, [pc, #68]	; (80027a0 <HAL_RCC_ClockConfig+0x2ec>)
 800275a:	4313      	orrs	r3, r2
 800275c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800275e:	f000 f825 	bl	80027ac <HAL_RCC_GetSysClockFreq>
 8002762:	4601      	mov	r1, r0
 8002764:	4b0e      	ldr	r3, [pc, #56]	; (80027a0 <HAL_RCC_ClockConfig+0x2ec>)
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800276c:	23f0      	movs	r3, #240	; 0xf0
 800276e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	fa93 f3a3 	rbit	r3, r3
 8002776:	60fb      	str	r3, [r7, #12]
  return(result);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	fab3 f383 	clz	r3, r3
 800277e:	fa22 f303 	lsr.w	r3, r2, r3
 8002782:	4a08      	ldr	r2, [pc, #32]	; (80027a4 <HAL_RCC_ClockConfig+0x2f0>)
 8002784:	5cd3      	ldrb	r3, [r2, r3]
 8002786:	fa21 f303 	lsr.w	r3, r1, r3
 800278a:	4a07      	ldr	r2, [pc, #28]	; (80027a8 <HAL_RCC_ClockConfig+0x2f4>)
 800278c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800278e:	2000      	movs	r0, #0
 8002790:	f7fe fa70 	bl	8000c74 <HAL_InitTick>
  
  return HAL_OK;
 8002794:	2300      	movs	r3, #0
}
 8002796:	4618      	mov	r0, r3
 8002798:	3778      	adds	r7, #120	; 0x78
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	40021000 	.word	0x40021000
 80027a4:	0800731c 	.word	0x0800731c
 80027a8:	20000008 	.word	0x20000008

080027ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b08b      	sub	sp, #44	; 0x2c
 80027b0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80027b2:	2300      	movs	r3, #0
 80027b4:	61fb      	str	r3, [r7, #28]
 80027b6:	2300      	movs	r3, #0
 80027b8:	61bb      	str	r3, [r7, #24]
 80027ba:	2300      	movs	r3, #0
 80027bc:	627b      	str	r3, [r7, #36]	; 0x24
 80027be:	2300      	movs	r3, #0
 80027c0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80027c2:	2300      	movs	r3, #0
 80027c4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80027c6:	4b29      	ldr	r3, [pc, #164]	; (800286c <HAL_RCC_GetSysClockFreq+0xc0>)
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	f003 030c 	and.w	r3, r3, #12
 80027d2:	2b04      	cmp	r3, #4
 80027d4:	d002      	beq.n	80027dc <HAL_RCC_GetSysClockFreq+0x30>
 80027d6:	2b08      	cmp	r3, #8
 80027d8:	d003      	beq.n	80027e2 <HAL_RCC_GetSysClockFreq+0x36>
 80027da:	e03c      	b.n	8002856 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80027dc:	4b24      	ldr	r3, [pc, #144]	; (8002870 <HAL_RCC_GetSysClockFreq+0xc4>)
 80027de:	623b      	str	r3, [r7, #32]
      break;
 80027e0:	e03c      	b.n	800285c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80027e8:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 80027ec:	60bb      	str	r3, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	fa93 f3a3 	rbit	r3, r3
 80027f4:	607b      	str	r3, [r7, #4]
  return(result);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	fab3 f383 	clz	r3, r3
 80027fc:	fa22 f303 	lsr.w	r3, r2, r3
 8002800:	4a1c      	ldr	r2, [pc, #112]	; (8002874 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002802:	5cd3      	ldrb	r3, [r2, r3]
 8002804:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002806:	4b19      	ldr	r3, [pc, #100]	; (800286c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800280a:	f003 020f 	and.w	r2, r3, #15
 800280e:	230f      	movs	r3, #15
 8002810:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	fa93 f3a3 	rbit	r3, r3
 8002818:	60fb      	str	r3, [r7, #12]
  return(result);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	fab3 f383 	clz	r3, r3
 8002820:	fa22 f303 	lsr.w	r3, r2, r3
 8002824:	4a14      	ldr	r2, [pc, #80]	; (8002878 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002826:	5cd3      	ldrb	r3, [r2, r3]
 8002828:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d008      	beq.n	8002846 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8002834:	4a0e      	ldr	r2, [pc, #56]	; (8002870 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002836:	69bb      	ldr	r3, [r7, #24]
 8002838:	fbb2 f2f3 	udiv	r2, r2, r3
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	fb02 f303 	mul.w	r3, r2, r3
 8002842:	627b      	str	r3, [r7, #36]	; 0x24
 8002844:	e004      	b.n	8002850 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	4a0c      	ldr	r2, [pc, #48]	; (800287c <HAL_RCC_GetSysClockFreq+0xd0>)
 800284a:	fb02 f303 	mul.w	r3, r2, r3
 800284e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002852:	623b      	str	r3, [r7, #32]
      break;
 8002854:	e002      	b.n	800285c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002856:	4b06      	ldr	r3, [pc, #24]	; (8002870 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002858:	623b      	str	r3, [r7, #32]
      break;
 800285a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800285c:	6a3b      	ldr	r3, [r7, #32]
}
 800285e:	4618      	mov	r0, r3
 8002860:	372c      	adds	r7, #44	; 0x2c
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop
 800286c:	40021000 	.word	0x40021000
 8002870:	007a1200 	.word	0x007a1200
 8002874:	080072fc 	.word	0x080072fc
 8002878:	0800730c 	.word	0x0800730c
 800287c:	003d0900 	.word	0x003d0900

08002880 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002880:	b480      	push	{r7}
 8002882:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002884:	4b03      	ldr	r3, [pc, #12]	; (8002894 <HAL_RCC_GetHCLKFreq+0x14>)
 8002886:	681b      	ldr	r3, [r3, #0]
}
 8002888:	4618      	mov	r0, r3
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop
 8002894:	20000008 	.word	0x20000008

08002898 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800289e:	f7ff ffef 	bl	8002880 <HAL_RCC_GetHCLKFreq>
 80028a2:	4601      	mov	r1, r0
 80028a4:	4b0b      	ldr	r3, [pc, #44]	; (80028d4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80028ac:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80028b0:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	fa93 f3a3 	rbit	r3, r3
 80028b8:	603b      	str	r3, [r7, #0]
  return(result);
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	fab3 f383 	clz	r3, r3
 80028c0:	fa22 f303 	lsr.w	r3, r2, r3
 80028c4:	4a04      	ldr	r2, [pc, #16]	; (80028d8 <HAL_RCC_GetPCLK1Freq+0x40>)
 80028c6:	5cd3      	ldrb	r3, [r2, r3]
 80028c8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80028cc:	4618      	mov	r0, r3
 80028ce:	3708      	adds	r7, #8
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	40021000 	.word	0x40021000
 80028d8:	0800732c 	.word	0x0800732c

080028dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80028e2:	f7ff ffcd 	bl	8002880 <HAL_RCC_GetHCLKFreq>
 80028e6:	4601      	mov	r1, r0
 80028e8:	4b0b      	ldr	r3, [pc, #44]	; (8002918 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 80028f0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80028f4:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	fa93 f3a3 	rbit	r3, r3
 80028fc:	603b      	str	r3, [r7, #0]
  return(result);
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	fab3 f383 	clz	r3, r3
 8002904:	fa22 f303 	lsr.w	r3, r2, r3
 8002908:	4a04      	ldr	r2, [pc, #16]	; (800291c <HAL_RCC_GetPCLK2Freq+0x40>)
 800290a:	5cd3      	ldrb	r3, [r2, r3]
 800290c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002910:	4618      	mov	r0, r3
 8002912:	3708      	adds	r7, #8
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}
 8002918:	40021000 	.word	0x40021000
 800291c:	0800732c 	.word	0x0800732c

08002920 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b092      	sub	sp, #72	; 0x48
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002928:	2300      	movs	r3, #0
 800292a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800292c:	2300      	movs	r3, #0
 800292e:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002938:	2b00      	cmp	r3, #0
 800293a:	f000 80cf 	beq.w	8002adc <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800293e:	2300      	movs	r3, #0
 8002940:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002944:	4b86      	ldr	r3, [pc, #536]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002946:	69db      	ldr	r3, [r3, #28]
 8002948:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800294c:	2b00      	cmp	r3, #0
 800294e:	d10e      	bne.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002950:	4b83      	ldr	r3, [pc, #524]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002952:	69db      	ldr	r3, [r3, #28]
 8002954:	4a82      	ldr	r2, [pc, #520]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002956:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800295a:	61d3      	str	r3, [r2, #28]
 800295c:	4b80      	ldr	r3, [pc, #512]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800295e:	69db      	ldr	r3, [r3, #28]
 8002960:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002964:	60bb      	str	r3, [r7, #8]
 8002966:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002968:	2301      	movs	r3, #1
 800296a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800296e:	4b7d      	ldr	r3, [pc, #500]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002976:	2b00      	cmp	r3, #0
 8002978:	d118      	bne.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800297a:	4b7a      	ldr	r3, [pc, #488]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a79      	ldr	r2, [pc, #484]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002980:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002984:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002986:	f7fe f9b9 	bl	8000cfc <HAL_GetTick>
 800298a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800298c:	e008      	b.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800298e:	f7fe f9b5 	bl	8000cfc <HAL_GetTick>
 8002992:	4602      	mov	r2, r0
 8002994:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	2b64      	cmp	r3, #100	; 0x64
 800299a:	d901      	bls.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800299c:	2303      	movs	r3, #3
 800299e:	e0da      	b.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x236>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029a0:	4b70      	ldr	r3, [pc, #448]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d0f0      	beq.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80029ac:	4b6c      	ldr	r3, [pc, #432]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80029ae:	6a1b      	ldr	r3, [r3, #32]
 80029b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029b4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80029b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d07c      	beq.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d075      	beq.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80029ca:	4b65      	ldr	r3, [pc, #404]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80029cc:	6a1b      	ldr	r3, [r3, #32]
 80029ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80029d8:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029dc:	fa93 f3a3 	rbit	r3, r3
 80029e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 80029e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80029e4:	fab3 f383 	clz	r3, r3
 80029e8:	461a      	mov	r2, r3
 80029ea:	4b5f      	ldr	r3, [pc, #380]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80029ec:	4413      	add	r3, r2
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	461a      	mov	r2, r3
 80029f2:	2301      	movs	r3, #1
 80029f4:	6013      	str	r3, [r2, #0]
 80029f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80029fa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029fe:	fa93 f3a3 	rbit	r3, r3
 8002a02:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002a04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a06:	fab3 f383 	clz	r3, r3
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	4b56      	ldr	r3, [pc, #344]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002a0e:	4413      	add	r3, r2
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	461a      	mov	r2, r3
 8002a14:	2300      	movs	r3, #0
 8002a16:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002a18:	4a51      	ldr	r2, [pc, #324]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002a1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a1c:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002a1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a20:	f003 0301 	and.w	r3, r3, #1
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d046      	beq.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a28:	f7fe f968 	bl	8000cfc <HAL_GetTick>
 8002a2c:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a2e:	e00a      	b.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x126>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a30:	f7fe f964 	bl	8000cfc <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d901      	bls.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x126>
          {
            return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e087      	b.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x236>
 8002a46:	2302      	movs	r3, #2
 8002a48:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a4c:	fa93 f3a3 	rbit	r3, r3
 8002a50:	627b      	str	r3, [r7, #36]	; 0x24
 8002a52:	2302      	movs	r3, #2
 8002a54:	623b      	str	r3, [r7, #32]
 8002a56:	6a3b      	ldr	r3, [r7, #32]
 8002a58:	fa93 f3a3 	rbit	r3, r3
 8002a5c:	61fb      	str	r3, [r7, #28]
  return(result);
 8002a5e:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a60:	fab3 f383 	clz	r3, r3
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	095b      	lsrs	r3, r3, #5
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	f043 0302 	orr.w	r3, r3, #2
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d102      	bne.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8002a74:	4b3a      	ldr	r3, [pc, #232]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002a76:	6a1b      	ldr	r3, [r3, #32]
 8002a78:	e007      	b.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x16a>
 8002a7a:	2302      	movs	r3, #2
 8002a7c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	fa93 f3a3 	rbit	r3, r3
 8002a84:	617b      	str	r3, [r7, #20]
 8002a86:	4b36      	ldr	r3, [pc, #216]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8a:	2202      	movs	r2, #2
 8002a8c:	613a      	str	r2, [r7, #16]
 8002a8e:	693a      	ldr	r2, [r7, #16]
 8002a90:	fa92 f2a2 	rbit	r2, r2
 8002a94:	60fa      	str	r2, [r7, #12]
  return(result);
 8002a96:	68fa      	ldr	r2, [r7, #12]
 8002a98:	fab2 f282 	clz	r2, r2
 8002a9c:	b252      	sxtb	r2, r2
 8002a9e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002aa2:	b252      	sxtb	r2, r2
 8002aa4:	b2d2      	uxtb	r2, r2
 8002aa6:	f002 021f 	and.w	r2, r2, #31
 8002aaa:	2101      	movs	r1, #1
 8002aac:	fa01 f202 	lsl.w	r2, r1, r2
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d0bc      	beq.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x110>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002ab6:	4b2a      	ldr	r3, [pc, #168]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ab8:	6a1b      	ldr	r3, [r3, #32]
 8002aba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	4927      	ldr	r1, [pc, #156]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002ac8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d105      	bne.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ad0:	4b23      	ldr	r3, [pc, #140]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ad2:	69db      	ldr	r3, [r3, #28]
 8002ad4:	4a22      	ldr	r2, [pc, #136]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ad6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ada:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0301 	and.w	r3, r3, #1
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d008      	beq.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x1da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ae8:	4b1d      	ldr	r3, [pc, #116]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aec:	f023 0203 	bic.w	r2, r3, #3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	491a      	ldr	r1, [pc, #104]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002af6:	4313      	orrs	r3, r2
 8002af8:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0320 	and.w	r3, r3, #32
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d008      	beq.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b06:	4b16      	ldr	r3, [pc, #88]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0a:	f023 0210 	bic.w	r2, r3, #16
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	4913      	ldr	r1, [pc, #76]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b14:	4313      	orrs	r3, r2
 8002b16:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d008      	beq.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002b24:	4b0e      	ldr	r3, [pc, #56]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b28:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	691b      	ldr	r3, [r3, #16]
 8002b30:	490b      	ldr	r1, [pc, #44]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b32:	4313      	orrs	r3, r2
 8002b34:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d008      	beq.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002b42:	4b07      	ldr	r3, [pc, #28]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b46:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	695b      	ldr	r3, [r3, #20]
 8002b4e:	4904      	ldr	r1, [pc, #16]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b50:	4313      	orrs	r3, r2
 8002b52:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3748      	adds	r7, #72	; 0x48
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	40021000 	.word	0x40021000
 8002b64:	40007000 	.word	0x40007000
 8002b68:	10908100 	.word	0x10908100

08002b6c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b084      	sub	sp, #16
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d101      	bne.n	8002b7e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e07c      	b.n	8002c78 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2200      	movs	r2, #0
 8002b82:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d106      	bne.n	8002b9e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2200      	movs	r2, #0
 8002b94:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f001 fd2b 	bl	80045f4 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2202      	movs	r2, #2
 8002ba2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bb4:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002bbe:	d902      	bls.n	8002bc6 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	60fb      	str	r3, [r7, #12]
 8002bc4:	e002      	b.n	8002bcc <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002bc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bca:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002bd4:	d007      	beq.n	8002be6 <HAL_SPI_Init+0x7a>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002bde:	d002      	beq.n	8002be6 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2200      	movs	r2, #0
 8002be4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d10b      	bne.n	8002c06 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002bf6:	d903      	bls.n	8002c00 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2202      	movs	r2, #2
 8002bfc:	631a      	str	r2, [r3, #48]	; 0x30
 8002bfe:	e002      	b.n	8002c06 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2201      	movs	r2, #1
 8002c04:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	685a      	ldr	r2, [r3, #4]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	431a      	orrs	r2, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	691b      	ldr	r3, [r3, #16]
 8002c14:	431a      	orrs	r2, r3
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	695b      	ldr	r3, [r3, #20]
 8002c1a:	431a      	orrs	r2, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	699b      	ldr	r3, [r3, #24]
 8002c20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c24:	431a      	orrs	r2, r3
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	69db      	ldr	r3, [r3, #28]
 8002c2a:	431a      	orrs	r2, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6a1b      	ldr	r3, [r3, #32]
 8002c30:	ea42 0103 	orr.w	r1, r2, r3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	430a      	orrs	r2, r1
 8002c3e:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo Threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	699b      	ldr	r3, [r3, #24]
 8002c44:	0c1b      	lsrs	r3, r3, #16
 8002c46:	f003 0204 	and.w	r2, r3, #4
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4e:	431a      	orrs	r2, r3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c54:	431a      	orrs	r2, r3
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	ea42 0103 	orr.w	r1, r2, r3
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	68fa      	ldr	r2, [r7, #12]
 8002c64:	430a      	orrs	r2, r1
 8002c66:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2201      	movs	r2, #1
 8002c72:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002c76:	2300      	movs	r3, #0
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3710      	adds	r7, #16
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b08a      	sub	sp, #40	; 0x28
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	60f8      	str	r0, [r7, #12]
 8002c88:	60b9      	str	r1, [r7, #8]
 8002c8a:	607a      	str	r2, [r7, #4]
 8002c8c:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0U, tmp1 = 0U;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	61fb      	str	r3, [r7, #28]
 8002c92:	2300      	movs	r3, #0
 8002c94:	61bb      	str	r3, [r7, #24]
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
 8002c96:	2300      	movs	r3, #0
 8002c98:	617b      	str	r3, [r7, #20]
  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t txallowed = 1U;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d101      	bne.n	8002cb2 <HAL_SPI_TransmitReceive+0x32>
 8002cae:	2302      	movs	r3, #2
 8002cb0:	e1e2      	b.n	8003078 <HAL_SPI_TransmitReceive+0x3f8>
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002cba:	f7fe f81f 	bl	8000cfc <HAL_GetTick>
 8002cbe:	6178      	str	r0, [r7, #20]

  tmp  = hspi->State;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	61fb      	str	r3, [r7, #28]
  tmp1 = hspi->Init.Mode;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	61bb      	str	r3, [r7, #24]

  if (!((tmp == HAL_SPI_STATE_READY) || \
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d00e      	beq.n	8002cf4 <HAL_SPI_TransmitReceive+0x74>
 8002cd6:	69bb      	ldr	r3, [r7, #24]
 8002cd8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002cdc:	d106      	bne.n	8002cec <HAL_SPI_TransmitReceive+0x6c>
        ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d102      	bne.n	8002cec <HAL_SPI_TransmitReceive+0x6c>
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	2b04      	cmp	r3, #4
 8002cea:	d003      	beq.n	8002cf4 <HAL_SPI_TransmitReceive+0x74>
  {
    errorcode = HAL_BUSY;
 8002cec:	2302      	movs	r3, #2
 8002cee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002cf2:	e1b7      	b.n	8003064 <HAL_SPI_TransmitReceive+0x3e4>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d005      	beq.n	8002d06 <HAL_SPI_TransmitReceive+0x86>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d002      	beq.n	8002d06 <HAL_SPI_TransmitReceive+0x86>
 8002d00:	887b      	ldrh	r3, [r7, #2]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d103      	bne.n	8002d0e <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002d0c:	e1aa      	b.n	8003064 <HAL_SPI_TransmitReceive+0x3e4>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	2b04      	cmp	r3, #4
 8002d18:	d003      	beq.n	8002d22 <HAL_SPI_TransmitReceive+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2205      	movs	r2, #5
 8002d1e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2200      	movs	r2, #0
 8002d26:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	887a      	ldrh	r2, [r7, #2]
 8002d32:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	887a      	ldrh	r2, [r7, #2]
 8002d3a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	68ba      	ldr	r2, [r7, #8]
 8002d42:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	887a      	ldrh	r2, [r7, #2]
 8002d48:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	887a      	ldrh	r2, [r7, #2]
 8002d4e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2200      	movs	r2, #0
 8002d54:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1U))
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002d64:	d805      	bhi.n	8002d72 <HAL_SPI_TransmitReceive+0xf2>
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d908      	bls.n	8002d84 <HAL_SPI_TransmitReceive+0x104>
  {
    /* set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	685a      	ldr	r2, [r3, #4]
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002d80:	605a      	str	r2, [r3, #4]
 8002d82:	e007      	b.n	8002d94 <HAL_SPI_TransmitReceive+0x114>
  }
  else
  {
    /* set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	685a      	ldr	r2, [r3, #4]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002d92:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d9e:	2b40      	cmp	r3, #64	; 0x40
 8002da0:	d007      	beq.n	8002db2 <HAL_SPI_TransmitReceive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002db0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002dba:	d975      	bls.n	8002ea8 <HAL_SPI_TransmitReceive+0x228>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d004      	beq.n	8002dce <HAL_SPI_TransmitReceive+0x14e>
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d160      	bne.n	8002e90 <HAL_SPI_TransmitReceive+0x210>
    {
      hspi->Instance->DR = *((uint16_t *)pTxData);
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	881a      	ldrh	r2, [r3, #0]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	60da      	str	r2, [r3, #12]
      pTxData += sizeof(uint16_t);
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	3302      	adds	r3, #2
 8002ddc:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	3b01      	subs	r3, #1
 8002de6:	b29a      	uxth	r2, r3
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002dec:	e050      	b.n	8002e90 <HAL_SPI_TransmitReceive+0x210>
    {
      /* Check TXE flag */
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8002dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d01c      	beq.n	8002e2e <HAL_SPI_TransmitReceive+0x1ae>
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d017      	beq.n	8002e2e <HAL_SPI_TransmitReceive+0x1ae>
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	f003 0302 	and.w	r3, r3, #2
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d110      	bne.n	8002e2e <HAL_SPI_TransmitReceive+0x1ae>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	881a      	ldrh	r2, [r3, #0]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	3302      	adds	r3, #2
 8002e1a:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	3b01      	subs	r3, #1
 8002e24:	b29a      	uxth	r2, r3
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d01a      	beq.n	8002e70 <HAL_SPI_TransmitReceive+0x1f0>
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	f003 0301 	and.w	r3, r3, #1
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d113      	bne.n	8002e70 <HAL_SPI_TransmitReceive+0x1f0>
      {
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	68db      	ldr	r3, [r3, #12]
 8002e4e:	b29a      	uxth	r2, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	801a      	strh	r2, [r3, #0]
        pRxData += sizeof(uint16_t);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	3302      	adds	r3, #2
 8002e58:	607b      	str	r3, [r7, #4]
        hspi->RxXferCount--;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002e60:	b29b      	uxth	r3, r3
 8002e62:	3b01      	subs	r3, #1
 8002e64:	b29a      	uxth	r2, r3
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 8002e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e76:	d00b      	beq.n	8002e90 <HAL_SPI_TransmitReceive+0x210>
 8002e78:	f7fd ff40 	bl	8000cfc <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d803      	bhi.n	8002e90 <HAL_SPI_TransmitReceive+0x210>
      {
        errorcode = HAL_TIMEOUT;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002e8e:	e0e9      	b.n	8003064 <HAL_SPI_TransmitReceive+0x3e4>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d1a9      	bne.n	8002dee <HAL_SPI_TransmitReceive+0x16e>
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d1a3      	bne.n	8002dee <HAL_SPI_TransmitReceive+0x16e>
 8002ea6:	e0c9      	b.n	800303c <HAL_SPI_TransmitReceive+0x3bc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d005      	beq.n	8002ebc <HAL_SPI_TransmitReceive+0x23c>
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002eb4:	b29b      	uxth	r3, r3
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	f040 80b3 	bne.w	8003022 <HAL_SPI_TransmitReceive+0x3a2>
    {
      if (hspi->TxXferCount > 1U)
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d90f      	bls.n	8002ee6 <HAL_SPI_TransmitReceive+0x266>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	881a      	ldrh	r2, [r3, #0]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	3302      	adds	r3, #2
 8002ed4:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount -= 2U;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	3b02      	subs	r3, #2
 8002ede:	b29a      	uxth	r2, r3
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002ee4:	e09d      	b.n	8003022 <HAL_SPI_TransmitReceive+0x3a2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	1c5a      	adds	r2, r3, #1
 8002eea:	60ba      	str	r2, [r7, #8]
 8002eec:	68fa      	ldr	r2, [r7, #12]
 8002eee:	6812      	ldr	r2, [r2, #0]
 8002ef0:	320c      	adds	r2, #12
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	3b01      	subs	r3, #1
 8002efe:	b29a      	uxth	r2, r3
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f04:	e08d      	b.n	8003022 <HAL_SPI_TransmitReceive+0x3a2>
    {
      /* check TXE flag */
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8002f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d031      	beq.n	8002f70 <HAL_SPI_TransmitReceive+0x2f0>
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f10:	b29b      	uxth	r3, r3
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d02c      	beq.n	8002f70 <HAL_SPI_TransmitReceive+0x2f0>
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	f003 0302 	and.w	r3, r3, #2
 8002f20:	2b02      	cmp	r3, #2
 8002f22:	d125      	bne.n	8002f70 <HAL_SPI_TransmitReceive+0x2f0>
      {
        if (hspi->TxXferCount > 1U)
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d90f      	bls.n	8002f4e <HAL_SPI_TransmitReceive+0x2ce>
        {
          hspi->Instance->DR = *((uint16_t *)pTxData);
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	881a      	ldrh	r2, [r3, #0]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	60da      	str	r2, [r3, #12]
          pTxData += sizeof(uint16_t);
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	3302      	adds	r3, #2
 8002f3c:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount -= 2U;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f42:	b29b      	uxth	r3, r3
 8002f44:	3b02      	subs	r3, #2
 8002f46:	b29a      	uxth	r2, r3
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002f4c:	e00e      	b.n	8002f6c <HAL_SPI_TransmitReceive+0x2ec>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	1c5a      	adds	r2, r3, #1
 8002f52:	60ba      	str	r2, [r7, #8]
 8002f54:	68fa      	ldr	r2, [r7, #12]
 8002f56:	6812      	ldr	r2, [r2, #0]
 8002f58:	320c      	adds	r2, #12
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	7013      	strb	r3, [r2, #0]
          hspi->TxXferCount--;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	3b01      	subs	r3, #1
 8002f66:	b29a      	uxth	r2, r3
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d042      	beq.n	8003002 <HAL_SPI_TransmitReceive+0x382>
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	f003 0301 	and.w	r3, r3, #1
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d13b      	bne.n	8003002 <HAL_SPI_TransmitReceive+0x382>
      {
        if (hspi->RxXferCount > 1U)
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d920      	bls.n	8002fd8 <HAL_SPI_TransmitReceive+0x358>
        {
          *((uint16_t *)pRxData) = hspi->Instance->DR;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	b29a      	uxth	r2, r3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	801a      	strh	r2, [r3, #0]
          pRxData += sizeof(uint16_t);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	3302      	adds	r3, #2
 8002fa6:	607b      	str	r3, [r7, #4]
          hspi->RxXferCount -= 2U;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	3b02      	subs	r3, #2
 8002fb2:	b29a      	uxth	r2, r3
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d81b      	bhi.n	8002ffe <HAL_SPI_TransmitReceive+0x37e>
          {
            /* set fiforxthresold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	685a      	ldr	r2, [r3, #4]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002fd4:	605a      	str	r2, [r3, #4]
 8002fd6:	e012      	b.n	8002ffe <HAL_SPI_TransmitReceive+0x37e>
          }
        }
        else
        {
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f103 020c 	add.w	r2, r3, #12
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	1c59      	adds	r1, r3, #1
 8002fe4:	6079      	str	r1, [r7, #4]
 8002fe6:	7812      	ldrb	r2, [r2, #0]
 8002fe8:	b2d2      	uxtb	r2, r2
 8002fea:	701a      	strb	r2, [r3, #0]
          hspi->RxXferCount--;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	3b01      	subs	r3, #1
 8002ff6:	b29a      	uxth	r2, r3
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002ffe:	2301      	movs	r3, #1
 8003000:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 8003002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003008:	d00b      	beq.n	8003022 <HAL_SPI_TransmitReceive+0x3a2>
 800300a:	f7fd fe77 	bl	8000cfc <HAL_GetTick>
 800300e:	4602      	mov	r2, r0
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	1ad3      	subs	r3, r2, r3
 8003014:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003016:	429a      	cmp	r2, r3
 8003018:	d803      	bhi.n	8003022 <HAL_SPI_TransmitReceive+0x3a2>
      {
        errorcode = HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003020:	e020      	b.n	8003064 <HAL_SPI_TransmitReceive+0x3e4>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003026:	b29b      	uxth	r3, r3
 8003028:	2b00      	cmp	r3, #0
 800302a:	f47f af6c 	bne.w	8002f06 <HAL_SPI_TransmitReceive+0x286>
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003034:	b29b      	uxth	r3, r3
 8003036:	2b00      	cmp	r3, #0
 8003038:	f47f af65 	bne.w	8002f06 <HAL_SPI_TransmitReceive+0x286>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800303c:	697a      	ldr	r2, [r7, #20]
 800303e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003040:	68f8      	ldr	r0, [r7, #12]
 8003042:	f000 f8f5 	bl	8003230 <SPI_EndRxTxTransaction>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d002      	beq.n	8003052 <HAL_SPI_TransmitReceive+0x3d2>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2220      	movs	r2, #32
 8003050:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003056:	2b00      	cmp	r3, #0
 8003058:	d003      	beq.n	8003062 <HAL_SPI_TransmitReceive+0x3e2>
  {
    errorcode = HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003060:	e000      	b.n	8003064 <HAL_SPI_TransmitReceive+0x3e4>
  }

error :
 8003062:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2200      	movs	r2, #0
 8003070:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003074:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003078:	4618      	mov	r0, r3
 800307a:	3728      	adds	r7, #40	; 0x28
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}

08003080 <SPI_WaitFlagStateUntilTimeout>:
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b084      	sub	sp, #16
 8003084:	af00      	add	r7, sp, #0
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	60b9      	str	r1, [r7, #8]
 800308a:	607a      	str	r2, [r7, #4]
 800308c:	603b      	str	r3, [r7, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800308e:	e04c      	b.n	800312a <SPI_WaitFlagStateUntilTimeout+0xaa>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003096:	d048      	beq.n	800312a <SPI_WaitFlagStateUntilTimeout+0xaa>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d007      	beq.n	80030ae <SPI_WaitFlagStateUntilTimeout+0x2e>
 800309e:	f7fd fe2d 	bl	8000cfc <HAL_GetTick>
 80030a2:	4602      	mov	r2, r0
 80030a4:	69bb      	ldr	r3, [r7, #24]
 80030a6:	1ad3      	subs	r3, r2, r3
 80030a8:	683a      	ldr	r2, [r7, #0]
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d83d      	bhi.n	800312a <SPI_WaitFlagStateUntilTimeout+0xaa>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	685a      	ldr	r2, [r3, #4]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80030bc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030c6:	d111      	bne.n	80030ec <SPI_WaitFlagStateUntilTimeout+0x6c>
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030d0:	d004      	beq.n	80030dc <SPI_WaitFlagStateUntilTimeout+0x5c>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030da:	d107      	bne.n	80030ec <SPI_WaitFlagStateUntilTimeout+0x6c>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030ea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030f4:	d10f      	bne.n	8003116 <SPI_WaitFlagStateUntilTimeout+0x96>
        {
          SPI_RESET_CRC(hspi);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003104:	601a      	str	r2, [r3, #0]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003114:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2201      	movs	r2, #1
 800311a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2200      	movs	r2, #0
 8003122:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e00e      	b.n	8003148 <SPI_WaitFlagStateUntilTimeout+0xc8>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	689a      	ldr	r2, [r3, #8]
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	4013      	ands	r3, r2
 8003134:	68ba      	ldr	r2, [r7, #8]
 8003136:	429a      	cmp	r2, r3
 8003138:	d101      	bne.n	800313e <SPI_WaitFlagStateUntilTimeout+0xbe>
 800313a:	2201      	movs	r2, #1
 800313c:	e000      	b.n	8003140 <SPI_WaitFlagStateUntilTimeout+0xc0>
 800313e:	2200      	movs	r2, #0
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	429a      	cmp	r2, r3
 8003144:	d1a4      	bne.n	8003090 <SPI_WaitFlagStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8003146:	2300      	movs	r3, #0
}
 8003148:	4618      	mov	r0, r3
 800314a:	3710      	adds	r7, #16
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}

08003150 <SPI_WaitFifoStateUntilTimeout>:
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b086      	sub	sp, #24
 8003154:	af00      	add	r7, sp, #0
 8003156:	60f8      	str	r0, [r7, #12]
 8003158:	60b9      	str	r1, [r7, #8]
 800315a:	607a      	str	r2, [r7, #4]
 800315c:	603b      	str	r3, [r7, #0]
  __IO uint8_t tmpreg;

  while ((hspi->Instance->SR & Fifo) != State)
 800315e:	e05a      	b.n	8003216 <SPI_WaitFifoStateUntilTimeout+0xc6>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003166:	d109      	bne.n	800317c <SPI_WaitFifoStateUntilTimeout+0x2c>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d106      	bne.n	800317c <SPI_WaitFifoStateUntilTimeout+0x2c>
    {
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	330c      	adds	r3, #12
 8003174:	781b      	ldrb	r3, [r3, #0]
 8003176:	b2db      	uxtb	r3, r3
 8003178:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 800317a:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003182:	d048      	beq.n	8003216 <SPI_WaitFifoStateUntilTimeout+0xc6>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d007      	beq.n	800319a <SPI_WaitFifoStateUntilTimeout+0x4a>
 800318a:	f7fd fdb7 	bl	8000cfc <HAL_GetTick>
 800318e:	4602      	mov	r2, r0
 8003190:	6a3b      	ldr	r3, [r7, #32]
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	683a      	ldr	r2, [r7, #0]
 8003196:	429a      	cmp	r2, r3
 8003198:	d83d      	bhi.n	8003216 <SPI_WaitFifoStateUntilTimeout+0xc6>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	685a      	ldr	r2, [r3, #4]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80031a8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031b2:	d111      	bne.n	80031d8 <SPI_WaitFifoStateUntilTimeout+0x88>
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031bc:	d004      	beq.n	80031c8 <SPI_WaitFifoStateUntilTimeout+0x78>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031c6:	d107      	bne.n	80031d8 <SPI_WaitFifoStateUntilTimeout+0x88>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031d6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031e0:	d10f      	bne.n	8003202 <SPI_WaitFifoStateUntilTimeout+0xb2>
        {
          SPI_RESET_CRC(hspi);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031f0:	601a      	str	r2, [r3, #0]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003200:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2201      	movs	r2, #1
 8003206:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2200      	movs	r2, #0
 800320e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	e008      	b.n	8003228 <SPI_WaitFifoStateUntilTimeout+0xd8>
  while ((hspi->Instance->SR & Fifo) != State)
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	689a      	ldr	r2, [r3, #8]
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	4013      	ands	r3, r2
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	429a      	cmp	r2, r3
 8003224:	d19c      	bne.n	8003160 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8003226:	2300      	movs	r3, #0
}
 8003228:	4618      	mov	r0, r3
 800322a:	3718      	adds	r7, #24
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}

08003230 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b086      	sub	sp, #24
 8003234:	af02      	add	r7, sp, #8
 8003236:	60f8      	str	r0, [r7, #12]
 8003238:	60b9      	str	r1, [r7, #8]
 800323a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	9300      	str	r3, [sp, #0]
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	2200      	movs	r2, #0
 8003244:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003248:	68f8      	ldr	r0, [r7, #12]
 800324a:	f7ff ff81 	bl	8003150 <SPI_WaitFifoStateUntilTimeout>
 800324e:	4603      	mov	r3, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d007      	beq.n	8003264 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003258:	f043 0220 	orr.w	r2, r3, #32
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003260:	2303      	movs	r3, #3
 8003262:	e027      	b.n	80032b4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	9300      	str	r3, [sp, #0]
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	2200      	movs	r2, #0
 800326c:	2180      	movs	r1, #128	; 0x80
 800326e:	68f8      	ldr	r0, [r7, #12]
 8003270:	f7ff ff06 	bl	8003080 <SPI_WaitFlagStateUntilTimeout>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d007      	beq.n	800328a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800327e:	f043 0220 	orr.w	r2, r3, #32
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003286:	2303      	movs	r3, #3
 8003288:	e014      	b.n	80032b4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	9300      	str	r3, [sp, #0]
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	2200      	movs	r2, #0
 8003292:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003296:	68f8      	ldr	r0, [r7, #12]
 8003298:	f7ff ff5a 	bl	8003150 <SPI_WaitFifoStateUntilTimeout>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d007      	beq.n	80032b2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032a6:	f043 0220 	orr.w	r2, r3, #32
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e000      	b.n	80032b4 <SPI_EndRxTxTransaction+0x84>
  }
  return HAL_OK;
 80032b2:	2300      	movs	r3, #0
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3710      	adds	r7, #16
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}

080032bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 80032bc:	b580      	push	{r7, lr}
 80032be:	b082      	sub	sp, #8
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d101      	bne.n	80032ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e01d      	b.n	800330a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d106      	bne.n	80032e8 <HAL_TIM_Base_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f001 fb3e 	bl	8004964 <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2202      	movs	r2, #2
 80032ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	3304      	adds	r3, #4
 80032f8:	4619      	mov	r1, r3
 80032fa:	4610      	mov	r0, r2
 80032fc:	f000 f96c 	bl	80035d8 <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2201      	movs	r2, #1
 8003304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  return HAL_OK;
 8003308:	2300      	movs	r3, #0
}
 800330a:	4618      	mov	r0, r3
 800330c:	3708      	adds	r7, #8
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}

08003312 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003312:	b480      	push	{r7}
 8003314:	b083      	sub	sp, #12
 8003316:	af00      	add	r7, sp, #0
 8003318:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	68da      	ldr	r2, [r3, #12]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f042 0201 	orr.w	r2, r2, #1
 8003328:	60da      	str	r2, [r3, #12]
      
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f042 0201 	orr.w	r2, r2, #1
 8003338:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
 800333a:	2300      	movs	r3, #0
}
 800333c:	4618      	mov	r0, r3
 800333e:	370c      	adds	r7, #12
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr

08003348 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b082      	sub	sp, #8
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	691b      	ldr	r3, [r3, #16]
 8003356:	f003 0302 	and.w	r3, r3, #2
 800335a:	2b02      	cmp	r3, #2
 800335c:	d122      	bne.n	80033a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	f003 0302 	and.w	r3, r3, #2
 8003368:	2b02      	cmp	r3, #2
 800336a:	d11b      	bne.n	80033a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f06f 0202 	mvn.w	r2, #2
 8003374:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2201      	movs	r2, #1
 800337a:	771a      	strb	r2, [r3, #28]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	f003 0303 	and.w	r3, r3, #3
 8003386:	2b00      	cmp	r3, #0
 8003388:	d003      	beq.n	8003392 <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f000 f905 	bl	800359a <HAL_TIM_IC_CaptureCallback>
 8003390:	e005      	b.n	800339e <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f000 f8f7 	bl	8003586 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f000 f908 	bl	80035ae <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	691b      	ldr	r3, [r3, #16]
 80033aa:	f003 0304 	and.w	r3, r3, #4
 80033ae:	2b04      	cmp	r3, #4
 80033b0:	d122      	bne.n	80033f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	f003 0304 	and.w	r3, r3, #4
 80033bc:	2b04      	cmp	r3, #4
 80033be:	d11b      	bne.n	80033f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f06f 0204 	mvn.w	r2, #4
 80033c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2202      	movs	r2, #2
 80033ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	699b      	ldr	r3, [r3, #24]
 80033d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d003      	beq.n	80033e6 <HAL_TIM_IRQHandler+0x9e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f000 f8db 	bl	800359a <HAL_TIM_IC_CaptureCallback>
 80033e4:	e005      	b.n	80033f2 <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f000 f8cd 	bl	8003586 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f000 f8de 	bl	80035ae <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	771a      	strb	r2, [r3, #28]
    } 
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	691b      	ldr	r3, [r3, #16]
 80033fe:	f003 0308 	and.w	r3, r3, #8
 8003402:	2b08      	cmp	r3, #8
 8003404:	d122      	bne.n	800344c <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	f003 0308 	and.w	r3, r3, #8
 8003410:	2b08      	cmp	r3, #8
 8003412:	d11b      	bne.n	800344c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f06f 0208 	mvn.w	r2, #8
 800341c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2204      	movs	r2, #4
 8003422:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	69db      	ldr	r3, [r3, #28]
 800342a:	f003 0303 	and.w	r3, r3, #3
 800342e:	2b00      	cmp	r3, #0
 8003430:	d003      	beq.n	800343a <HAL_TIM_IRQHandler+0xf2>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f000 f8b1 	bl	800359a <HAL_TIM_IC_CaptureCallback>
 8003438:	e005      	b.n	8003446 <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f000 f8a3 	bl	8003586 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f000 f8b4 	bl	80035ae <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	691b      	ldr	r3, [r3, #16]
 8003452:	f003 0310 	and.w	r3, r3, #16
 8003456:	2b10      	cmp	r3, #16
 8003458:	d122      	bne.n	80034a0 <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	f003 0310 	and.w	r3, r3, #16
 8003464:	2b10      	cmp	r3, #16
 8003466:	d11b      	bne.n	80034a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f06f 0210 	mvn.w	r2, #16
 8003470:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2208      	movs	r2, #8
 8003476:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	69db      	ldr	r3, [r3, #28]
 800347e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003482:	2b00      	cmp	r3, #0
 8003484:	d003      	beq.n	800348e <HAL_TIM_IRQHandler+0x146>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f000 f887 	bl	800359a <HAL_TIM_IC_CaptureCallback>
 800348c:	e005      	b.n	800349a <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f000 f879 	bl	8003586 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f000 f88a 	bl	80035ae <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	771a      	strb	r2, [r3, #28]
    } 
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	691b      	ldr	r3, [r3, #16]
 80034a6:	f003 0301 	and.w	r3, r3, #1
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d10e      	bne.n	80034cc <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	f003 0301 	and.w	r3, r3, #1
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d107      	bne.n	80034cc <HAL_TIM_IRQHandler+0x184>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f06f 0201 	mvn.w	r2, #1
 80034c4:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f000 ff9a 	bl	8004400 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	691b      	ldr	r3, [r3, #16]
 80034d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034d6:	2b80      	cmp	r3, #128	; 0x80
 80034d8:	d10e      	bne.n	80034f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034e4:	2b80      	cmp	r3, #128	; 0x80
 80034e6:	d107      	bne.n	80034f8 <HAL_TIM_IRQHandler+0x1b0>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80034f0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f000 f942 	bl	800377c <HAL_TIMEx_BreakCallback>
    }
  }

#if defined(TIM_FLAG_BREAK2)
  /* TIM Break input 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	691b      	ldr	r3, [r3, #16]
 80034fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003502:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003506:	d10e      	bne.n	8003526 <HAL_TIM_IRQHandler+0x1de>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	68db      	ldr	r3, [r3, #12]
 800350e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003512:	2b80      	cmp	r3, #128	; 0x80
 8003514:	d107      	bne.n	8003526 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800351e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f000 f935 	bl	8003790 <HAL_TIMEx_Break2Callback>
    }
  }
#endif

  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	691b      	ldr	r3, [r3, #16]
 800352c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003530:	2b40      	cmp	r3, #64	; 0x40
 8003532:	d10e      	bne.n	8003552 <HAL_TIM_IRQHandler+0x20a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	68db      	ldr	r3, [r3, #12]
 800353a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800353e:	2b40      	cmp	r3, #64	; 0x40
 8003540:	d107      	bne.n	8003552 <HAL_TIM_IRQHandler+0x20a>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800354a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f000 f838 	bl	80035c2 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	691b      	ldr	r3, [r3, #16]
 8003558:	f003 0320 	and.w	r3, r3, #32
 800355c:	2b20      	cmp	r3, #32
 800355e:	d10e      	bne.n	800357e <HAL_TIM_IRQHandler+0x236>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	f003 0320 	and.w	r3, r3, #32
 800356a:	2b20      	cmp	r3, #32
 800356c:	d107      	bne.n	800357e <HAL_TIM_IRQHandler+0x236>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f06f 0220 	mvn.w	r2, #32
 8003576:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	f000 f8f5 	bl	8003768 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 800357e:	bf00      	nop
 8003580:	3708      	adds	r7, #8
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}

08003586 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003586:	b480      	push	{r7}
 8003588:	b083      	sub	sp, #12
 800358a:	af00      	add	r7, sp, #0
 800358c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800358e:	bf00      	nop
 8003590:	370c      	adds	r7, #12
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr

0800359a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800359a:	b480      	push	{r7}
 800359c:	b083      	sub	sp, #12
 800359e:	af00      	add	r7, sp, #0
 80035a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80035a2:	bf00      	nop
 80035a4:	370c      	adds	r7, #12
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr

080035ae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80035ae:	b480      	push	{r7}
 80035b0:	b083      	sub	sp, #12
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80035b6:	bf00      	nop
 80035b8:	370c      	adds	r7, #12
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr

080035c2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80035c2:	b480      	push	{r7}
 80035c4:	b083      	sub	sp, #12
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80035ca:	bf00      	nop
 80035cc:	370c      	adds	r7, #12
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr
	...

080035d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM periheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80035d8:	b480      	push	{r7}
 80035da:	b085      	sub	sp, #20
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 80035e2:	2300      	movs	r3, #0
 80035e4:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	4a32      	ldr	r2, [pc, #200]	; (80036b8 <TIM_Base_SetConfig+0xe0>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d007      	beq.n	8003604 <TIM_Base_SetConfig+0x2c>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035fa:	d003      	beq.n	8003604 <TIM_Base_SetConfig+0x2c>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	4a2f      	ldr	r2, [pc, #188]	; (80036bc <TIM_Base_SetConfig+0xe4>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d108      	bne.n	8003616 <TIM_Base_SetConfig+0x3e>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800360a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	68fa      	ldr	r2, [r7, #12]
 8003612:	4313      	orrs	r3, r2
 8003614:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4a27      	ldr	r2, [pc, #156]	; (80036b8 <TIM_Base_SetConfig+0xe0>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d013      	beq.n	8003646 <TIM_Base_SetConfig+0x6e>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003624:	d00f      	beq.n	8003646 <TIM_Base_SetConfig+0x6e>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a24      	ldr	r2, [pc, #144]	; (80036bc <TIM_Base_SetConfig+0xe4>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d00b      	beq.n	8003646 <TIM_Base_SetConfig+0x6e>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4a23      	ldr	r2, [pc, #140]	; (80036c0 <TIM_Base_SetConfig+0xe8>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d007      	beq.n	8003646 <TIM_Base_SetConfig+0x6e>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4a22      	ldr	r2, [pc, #136]	; (80036c4 <TIM_Base_SetConfig+0xec>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d003      	beq.n	8003646 <TIM_Base_SetConfig+0x6e>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4a21      	ldr	r2, [pc, #132]	; (80036c8 <TIM_Base_SetConfig+0xf0>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d108      	bne.n	8003658 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800364c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	68db      	ldr	r3, [r3, #12]
 8003652:	68fa      	ldr	r2, [r7, #12]
 8003654:	4313      	orrs	r3, r2
 8003656:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	695b      	ldr	r3, [r3, #20]
 8003662:	4313      	orrs	r3, r2
 8003664:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	68fa      	ldr	r2, [r7, #12]
 800366a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	689a      	ldr	r2, [r3, #8]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	629a      	str	r2, [r3, #40]	; 0x28
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	4a0e      	ldr	r2, [pc, #56]	; (80036b8 <TIM_Base_SetConfig+0xe0>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d00b      	beq.n	800369c <TIM_Base_SetConfig+0xc4>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	4a0e      	ldr	r2, [pc, #56]	; (80036c0 <TIM_Base_SetConfig+0xe8>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d007      	beq.n	800369c <TIM_Base_SetConfig+0xc4>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	4a0d      	ldr	r2, [pc, #52]	; (80036c4 <TIM_Base_SetConfig+0xec>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d003      	beq.n	800369c <TIM_Base_SetConfig+0xc4>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	4a0c      	ldr	r2, [pc, #48]	; (80036c8 <TIM_Base_SetConfig+0xf0>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d103      	bne.n	80036a4 <TIM_Base_SetConfig+0xcc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	691a      	ldr	r2, [r3, #16]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	615a      	str	r2, [r3, #20]
}
 80036aa:	bf00      	nop
 80036ac:	3714      	adds	r7, #20
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr
 80036b6:	bf00      	nop
 80036b8:	40012c00 	.word	0x40012c00
 80036bc:	40000400 	.word	0x40000400
 80036c0:	40014000 	.word	0x40014000
 80036c4:	40014400 	.word	0x40014400
 80036c8:	40014800 	.word	0x40014800

080036cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, 
                                                      TIM_MasterConfigTypeDef * sMasterConfig)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b085      	sub	sp, #20
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d101      	bne.n	80036e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80036e0:	2302      	movs	r3, #2
 80036e2:	e038      	b.n	8003756 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2U */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a18      	ldr	r2, [pc, #96]	; (8003764 <HAL_TIMEx_MasterConfigSynchronization+0x98>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d108      	bne.n	8003718 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
    
    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800370c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	68fa      	ldr	r2, [r7, #12]
 8003714:	4313      	orrs	r3, r2
 8003716:	60fb      	str	r3, [r7, #12]
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800371e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	68fa      	ldr	r2, [r7, #12]
 8003726:	4313      	orrs	r3, r2
 8003728:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003730:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	68ba      	ldr	r2, [r7, #8]
 8003738:	4313      	orrs	r3, r2
 800373a:	60bb      	str	r3, [r7, #8]
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	68fa      	ldr	r2, [r7, #12]
 8003742:	605a      	str	r2, [r3, #4]
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	68ba      	ldr	r2, [r7, #8]
 800374a:	609a      	str	r2, [r3, #8]

  __HAL_UNLOCK(htim);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2200      	movs	r2, #0
 8003750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  return HAL_OK;
 8003754:	2300      	movs	r3, #0
} 
 8003756:	4618      	mov	r0, r3
 8003758:	3714      	adds	r7, #20
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr
 8003762:	bf00      	nop
 8003764:	40012c00 	.word	0x40012c00

08003768 <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8003768:	b480      	push	{r7}
 800376a:	b083      	sub	sp, #12
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8003770:	bf00      	nop
 8003772:	370c      	adds	r7, #12
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr

0800377c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800377c:	b480      	push	{r7}
 800377e:	b083      	sub	sp, #12
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003784:	bf00      	nop
 8003786:	370c      	adds	r7, #12
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr

08003790 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003798:	bf00      	nop
 800379a:	370c      	adds	r7, #12
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr

080037a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b082      	sub	sp, #8
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d101      	bne.n	80037b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e043      	b.n	800383e <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d106      	bne.n	80037d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f001 f920 	bl	8004a10 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2224      	movs	r2, #36	; 0x24
 80037d4:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f022 0201 	bic.w	r2, r2, #1
 80037e6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f000 f8b9 	bl	8003960 <UART_SetConfig>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d101      	bne.n	80037f8 <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e022      	b.n	800383e <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d002      	beq.n	8003806 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f000 fa13 	bl	8003c2c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	685a      	ldr	r2, [r3, #4]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003814:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	689a      	ldr	r2, [r3, #8]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003824:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f042 0201 	orr.w	r2, r2, #1
 8003834:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f000 fa9a 	bl	8003d70 <UART_CheckIdleState>
 800383c:	4603      	mov	r3, r0
}
 800383e:	4618      	mov	r0, r3
 8003840:	3708      	adds	r7, #8
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}

08003846 <HAL_UART_Transmit>:
  * @param Size Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003846:	b580      	push	{r7, lr}
 8003848:	b088      	sub	sp, #32
 800384a:	af02      	add	r7, sp, #8
 800384c:	60f8      	str	r0, [r7, #12]
 800384e:	60b9      	str	r1, [r7, #8]
 8003850:	603b      	str	r3, [r7, #0]
 8003852:	4613      	mov	r3, r2
 8003854:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8003856:	2300      	movs	r3, #0
 8003858:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8003860:	b2db      	uxtb	r3, r3
 8003862:	2b20      	cmp	r3, #32
 8003864:	d177      	bne.n	8003956 <HAL_UART_Transmit+0x110>
  {
    if((pData == NULL ) || (Size == 0U))
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d002      	beq.n	8003872 <HAL_UART_Transmit+0x2c>
 800386c:	88fb      	ldrh	r3, [r7, #6]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d101      	bne.n	8003876 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e070      	b.n	8003958 <HAL_UART_Transmit+0x112>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800387c:	2b01      	cmp	r3, #1
 800387e:	d101      	bne.n	8003884 <HAL_UART_Transmit+0x3e>
 8003880:	2302      	movs	r3, #2
 8003882:	e069      	b.n	8003958 <HAL_UART_Transmit+0x112>
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2201      	movs	r2, #1
 8003888:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2200      	movs	r2, #0
 8003890:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2221      	movs	r2, #33	; 0x21
 8003896:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800389a:	f7fd fa2f 	bl	8000cfc <HAL_GetTick>
 800389e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	88fa      	ldrh	r2, [r7, #6]
 80038a4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	88fa      	ldrh	r2, [r7, #6]
 80038ac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 80038b0:	e034      	b.n	800391c <HAL_UART_Transmit+0xd6>
    {
      huart->TxXferCount--;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	3b01      	subs	r3, #1
 80038bc:	b29a      	uxth	r2, r3
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	9300      	str	r3, [sp, #0]
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	2200      	movs	r2, #0
 80038cc:	2180      	movs	r1, #128	; 0x80
 80038ce:	68f8      	ldr	r0, [r7, #12]
 80038d0:	f000 fa97 	bl	8003e02 <UART_WaitOnFlagUntilTimeout>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d001      	beq.n	80038de <HAL_UART_Transmit+0x98>
      {
        return HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	e03c      	b.n	8003958 <HAL_UART_Transmit+0x112>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038e6:	d111      	bne.n	800390c <HAL_UART_Transmit+0xc6>
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	691b      	ldr	r3, [r3, #16]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d10d      	bne.n	800390c <HAL_UART_Transmit+0xc6>
      {
        tmp = (uint16_t*) pData;
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	613b      	str	r3, [r7, #16]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	881a      	ldrh	r2, [r3, #0]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003900:	b292      	uxth	r2, r2
 8003902:	851a      	strh	r2, [r3, #40]	; 0x28
        pData += 2U;
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	3302      	adds	r3, #2
 8003908:	60bb      	str	r3, [r7, #8]
 800390a:	e007      	b.n	800391c <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	1c5a      	adds	r2, r3, #1
 8003910:	60ba      	str	r2, [r7, #8]
 8003912:	781a      	ldrb	r2, [r3, #0]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	b292      	uxth	r2, r2
 800391a:	851a      	strh	r2, [r3, #40]	; 0x28
    while(huart->TxXferCount > 0U)
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003922:	b29b      	uxth	r3, r3
 8003924:	2b00      	cmp	r3, #0
 8003926:	d1c4      	bne.n	80038b2 <HAL_UART_Transmit+0x6c>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	9300      	str	r3, [sp, #0]
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	2200      	movs	r2, #0
 8003930:	2140      	movs	r1, #64	; 0x40
 8003932:	68f8      	ldr	r0, [r7, #12]
 8003934:	f000 fa65 	bl	8003e02 <UART_WaitOnFlagUntilTimeout>
 8003938:	4603      	mov	r3, r0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d001      	beq.n	8003942 <HAL_UART_Transmit+0xfc>
    {
      return HAL_TIMEOUT;
 800393e:	2303      	movs	r3, #3
 8003940:	e00a      	b.n	8003958 <HAL_UART_Transmit+0x112>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2220      	movs	r2, #32
 8003946:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2200      	movs	r2, #0
 800394e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    return HAL_OK;
 8003952:	2300      	movs	r3, #0
 8003954:	e000      	b.n	8003958 <HAL_UART_Transmit+0x112>
  }
  else
  {
    return HAL_BUSY;
 8003956:	2302      	movs	r3, #2
  }
}
 8003958:	4618      	mov	r0, r3
 800395a:	3718      	adds	r7, #24
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}

08003960 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b086      	sub	sp, #24
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8003968:	2300      	movs	r3, #0
 800396a:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 800396c:	2310      	movs	r3, #16
 800396e:	75fb      	strb	r3, [r7, #23]
  uint16_t brrtemp                    = 0x0000U;
 8003970:	2300      	movs	r3, #0
 8003972:	817b      	strh	r3, [r7, #10]
  uint16_t usartdiv                   = 0x0000U;
 8003974:	2300      	movs	r3, #0
 8003976:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003978:	2300      	movs	r3, #0
 800397a:	74fb      	strb	r3, [r7, #19]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	689a      	ldr	r2, [r3, #8]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	691b      	ldr	r3, [r3, #16]
 8003984:	431a      	orrs	r2, r3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	695b      	ldr	r3, [r3, #20]
 800398a:	431a      	orrs	r2, r3
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	69db      	ldr	r3, [r3, #28]
 8003990:	4313      	orrs	r3, r2
 8003992:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	4b9f      	ldr	r3, [pc, #636]	; (8003c18 <UART_SetConfig+0x2b8>)
 800399c:	4013      	ands	r3, r2
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	6812      	ldr	r2, [r2, #0]
 80039a2:	68f9      	ldr	r1, [r7, #12]
 80039a4:	430b      	orrs	r3, r1
 80039a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	68da      	ldr	r2, [r3, #12]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	430a      	orrs	r2, r1
 80039bc:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	699a      	ldr	r2, [r3, #24]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a1b      	ldr	r3, [r3, #32]
 80039c6:	4313      	orrs	r3, r2
 80039c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	68fa      	ldr	r2, [r7, #12]
 80039da:	430a      	orrs	r2, r1
 80039dc:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a8e      	ldr	r2, [pc, #568]	; (8003c1c <UART_SetConfig+0x2bc>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d121      	bne.n	8003a2c <UART_SetConfig+0xcc>
 80039e8:	4b8d      	ldr	r3, [pc, #564]	; (8003c20 <UART_SetConfig+0x2c0>)
 80039ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ec:	f003 0303 	and.w	r3, r3, #3
 80039f0:	2b03      	cmp	r3, #3
 80039f2:	d817      	bhi.n	8003a24 <UART_SetConfig+0xc4>
 80039f4:	a201      	add	r2, pc, #4	; (adr r2, 80039fc <UART_SetConfig+0x9c>)
 80039f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039fa:	bf00      	nop
 80039fc:	08003a0d 	.word	0x08003a0d
 8003a00:	08003a19 	.word	0x08003a19
 8003a04:	08003a1f 	.word	0x08003a1f
 8003a08:	08003a13 	.word	0x08003a13
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	75fb      	strb	r3, [r7, #23]
 8003a10:	e01e      	b.n	8003a50 <UART_SetConfig+0xf0>
 8003a12:	2302      	movs	r3, #2
 8003a14:	75fb      	strb	r3, [r7, #23]
 8003a16:	e01b      	b.n	8003a50 <UART_SetConfig+0xf0>
 8003a18:	2304      	movs	r3, #4
 8003a1a:	75fb      	strb	r3, [r7, #23]
 8003a1c:	e018      	b.n	8003a50 <UART_SetConfig+0xf0>
 8003a1e:	2308      	movs	r3, #8
 8003a20:	75fb      	strb	r3, [r7, #23]
 8003a22:	e015      	b.n	8003a50 <UART_SetConfig+0xf0>
 8003a24:	2310      	movs	r3, #16
 8003a26:	75fb      	strb	r3, [r7, #23]
 8003a28:	bf00      	nop
 8003a2a:	e011      	b.n	8003a50 <UART_SetConfig+0xf0>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a7c      	ldr	r2, [pc, #496]	; (8003c24 <UART_SetConfig+0x2c4>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d102      	bne.n	8003a3c <UART_SetConfig+0xdc>
 8003a36:	2300      	movs	r3, #0
 8003a38:	75fb      	strb	r3, [r7, #23]
 8003a3a:	e009      	b.n	8003a50 <UART_SetConfig+0xf0>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a79      	ldr	r2, [pc, #484]	; (8003c28 <UART_SetConfig+0x2c8>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d102      	bne.n	8003a4c <UART_SetConfig+0xec>
 8003a46:	2300      	movs	r3, #0
 8003a48:	75fb      	strb	r3, [r7, #23]
 8003a4a:	e001      	b.n	8003a50 <UART_SetConfig+0xf0>
 8003a4c:	2310      	movs	r3, #16
 8003a4e:	75fb      	strb	r3, [r7, #23]

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	69db      	ldr	r3, [r3, #28]
 8003a54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a58:	d16f      	bne.n	8003b3a <UART_SetConfig+0x1da>
  {
    switch (clocksource)
 8003a5a:	7dfb      	ldrb	r3, [r7, #23]
 8003a5c:	2b08      	cmp	r3, #8
 8003a5e:	d857      	bhi.n	8003b10 <UART_SetConfig+0x1b0>
 8003a60:	a201      	add	r2, pc, #4	; (adr r2, 8003a68 <UART_SetConfig+0x108>)
 8003a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a66:	bf00      	nop
 8003a68:	08003a8d 	.word	0x08003a8d
 8003a6c:	08003aa9 	.word	0x08003aa9
 8003a70:	08003ac5 	.word	0x08003ac5
 8003a74:	08003b11 	.word	0x08003b11
 8003a78:	08003adf 	.word	0x08003adf
 8003a7c:	08003b11 	.word	0x08003b11
 8003a80:	08003b11 	.word	0x08003b11
 8003a84:	08003b11 	.word	0x08003b11
 8003a88:	08003afb 	.word	0x08003afb
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003a8c:	f7fe ff04 	bl	8002898 <HAL_RCC_GetPCLK1Freq>
 8003a90:	4603      	mov	r3, r0
 8003a92:	005a      	lsls	r2, r3, #1
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	085b      	lsrs	r3, r3, #1
 8003a9a:	441a      	add	r2, r3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aa4:	82bb      	strh	r3, [r7, #20]
        break;
 8003aa6:	e036      	b.n	8003b16 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003aa8:	f7fe ff18 	bl	80028dc <HAL_RCC_GetPCLK2Freq>
 8003aac:	4603      	mov	r3, r0
 8003aae:	005a      	lsls	r2, r3, #1
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	085b      	lsrs	r3, r3, #1
 8003ab6:	441a      	add	r2, r3
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ac0:	82bb      	strh	r3, [r7, #20]
        break;
 8003ac2:	e028      	b.n	8003b16 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	085b      	lsrs	r3, r3, #1
 8003aca:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8003ace:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	6852      	ldr	r2, [r2, #4]
 8003ad6:	fbb3 f3f2 	udiv	r3, r3, r2
 8003ada:	82bb      	strh	r3, [r7, #20]
        break;
 8003adc:	e01b      	b.n	8003b16 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003ade:	f7fe fe65 	bl	80027ac <HAL_RCC_GetSysClockFreq>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	005a      	lsls	r2, r3, #1
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	085b      	lsrs	r3, r3, #1
 8003aec:	441a      	add	r2, r3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003af6:	82bb      	strh	r3, [r7, #20]
        break;
 8003af8:	e00d      	b.n	8003b16 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	085b      	lsrs	r3, r3, #1
 8003b00:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b0c:	82bb      	strh	r3, [r7, #20]
        break;
 8003b0e:	e002      	b.n	8003b16 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	74fb      	strb	r3, [r7, #19]
        break;
 8003b14:	bf00      	nop
    }

    brrtemp = usartdiv & 0xFFF0U;
 8003b16:	8abb      	ldrh	r3, [r7, #20]
 8003b18:	f023 030f 	bic.w	r3, r3, #15
 8003b1c:	817b      	strh	r3, [r7, #10]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003b1e:	8abb      	ldrh	r3, [r7, #20]
 8003b20:	105b      	asrs	r3, r3, #1
 8003b22:	b29b      	uxth	r3, r3
 8003b24:	f003 0307 	and.w	r3, r3, #7
 8003b28:	b29a      	uxth	r2, r3
 8003b2a:	897b      	ldrh	r3, [r7, #10]
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	817b      	strh	r3, [r7, #10]
    huart->Instance->BRR = brrtemp;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	897a      	ldrh	r2, [r7, #10]
 8003b36:	60da      	str	r2, [r3, #12]
 8003b38:	e069      	b.n	8003c0e <UART_SetConfig+0x2ae>
  }
  else
  {
    switch (clocksource)
 8003b3a:	7dfb      	ldrb	r3, [r7, #23]
 8003b3c:	2b08      	cmp	r3, #8
 8003b3e:	d863      	bhi.n	8003c08 <UART_SetConfig+0x2a8>
 8003b40:	a201      	add	r2, pc, #4	; (adr r2, 8003b48 <UART_SetConfig+0x1e8>)
 8003b42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b46:	bf00      	nop
 8003b48:	08003b6d 	.word	0x08003b6d
 8003b4c:	08003b8d 	.word	0x08003b8d
 8003b50:	08003bad 	.word	0x08003bad
 8003b54:	08003c09 	.word	0x08003c09
 8003b58:	08003bcd 	.word	0x08003bcd
 8003b5c:	08003c09 	.word	0x08003c09
 8003b60:	08003c09 	.word	0x08003c09
 8003b64:	08003c09 	.word	0x08003c09
 8003b68:	08003bed 	.word	0x08003bed
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003b6c:	f7fe fe94 	bl	8002898 <HAL_RCC_GetPCLK1Freq>
 8003b70:	4602      	mov	r2, r0
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	085b      	lsrs	r3, r3, #1
 8003b78:	441a      	add	r2, r3
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b82:	b29a      	uxth	r2, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	60da      	str	r2, [r3, #12]
        break;
 8003b8a:	e040      	b.n	8003c0e <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003b8c:	f7fe fea6 	bl	80028dc <HAL_RCC_GetPCLK2Freq>
 8003b90:	4602      	mov	r2, r0
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	085b      	lsrs	r3, r3, #1
 8003b98:	441a      	add	r2, r3
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ba2:	b29a      	uxth	r2, r3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	60da      	str	r2, [r3, #12]
        break;
 8003baa:	e030      	b.n	8003c0e <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	085b      	lsrs	r3, r3, #1
 8003bb2:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8003bb6:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	6852      	ldr	r2, [r2, #4]
 8003bbe:	fbb3 f3f2 	udiv	r3, r3, r2
 8003bc2:	b29a      	uxth	r2, r3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	60da      	str	r2, [r3, #12]
        break;
 8003bca:	e020      	b.n	8003c0e <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003bcc:	f7fe fdee 	bl	80027ac <HAL_RCC_GetSysClockFreq>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	085b      	lsrs	r3, r3, #1
 8003bd8:	441a      	add	r2, r3
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8003be2:	b29a      	uxth	r2, r3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	60da      	str	r2, [r3, #12]
        break;
 8003bea:	e010      	b.n	8003c0e <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	085b      	lsrs	r3, r3, #1
 8003bf2:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bfe:	b29a      	uxth	r2, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	60da      	str	r2, [r3, #12]
        break;
 8003c06:	e002      	b.n	8003c0e <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	74fb      	strb	r3, [r7, #19]
        break;
 8003c0c:	bf00      	nop
    }
  }

  return ret;
 8003c0e:	7cfb      	ldrb	r3, [r7, #19]

}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3718      	adds	r7, #24
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	efff69f3 	.word	0xefff69f3
 8003c1c:	40013800 	.word	0x40013800
 8003c20:	40021000 	.word	0x40021000
 8003c24:	40004400 	.word	0x40004400
 8003c28:	40004800 	.word	0x40004800

08003c2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b083      	sub	sp, #12
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c38:	f003 0301 	and.w	r3, r3, #1
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d00a      	beq.n	8003c56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	430a      	orrs	r2, r1
 8003c54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5a:	f003 0302 	and.w	r3, r3, #2
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d00a      	beq.n	8003c78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	430a      	orrs	r2, r1
 8003c76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c7c:	f003 0304 	and.w	r3, r3, #4
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d00a      	beq.n	8003c9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	430a      	orrs	r2, r1
 8003c98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c9e:	f003 0308 	and.w	r3, r3, #8
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d00a      	beq.n	8003cbc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	430a      	orrs	r2, r1
 8003cba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc0:	f003 0310 	and.w	r3, r3, #16
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d00a      	beq.n	8003cde <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	430a      	orrs	r2, r1
 8003cdc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce2:	f003 0320 	and.w	r3, r3, #32
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d00a      	beq.n	8003d00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	430a      	orrs	r2, r1
 8003cfe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d01a      	beq.n	8003d42 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	430a      	orrs	r2, r1
 8003d20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d2a:	d10a      	bne.n	8003d42 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	430a      	orrs	r2, r1
 8003d40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d00a      	beq.n	8003d64 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	430a      	orrs	r2, r1
 8003d62:	605a      	str	r2, [r3, #4]
  }
}
 8003d64:	bf00      	nop
 8003d66:	370c      	adds	r7, #12
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr

08003d70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b086      	sub	sp, #24
 8003d74:	af02      	add	r7, sp, #8
 8003d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003d82:	f7fc ffbb 	bl	8000cfc <HAL_GetTick>
 8003d86:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0308 	and.w	r3, r3, #8
 8003d92:	2b08      	cmp	r3, #8
 8003d94:	d10e      	bne.n	8003db4 <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d96:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003d9a:	9300      	str	r3, [sp, #0]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f000 f82c 	bl	8003e02 <UART_WaitOnFlagUntilTimeout>
 8003daa:	4603      	mov	r3, r0
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d001      	beq.n	8003db4 <UART_CheckIdleState+0x44>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 8003db0:	2303      	movs	r3, #3
 8003db2:	e022      	b.n	8003dfa <UART_CheckIdleState+0x8a>
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0304 	and.w	r3, r3, #4
 8003dbe:	2b04      	cmp	r3, #4
 8003dc0:	d10e      	bne.n	8003de0 <UART_CheckIdleState+0x70>
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003dc2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003dc6:	9300      	str	r3, [sp, #0]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f000 f816 	bl	8003e02 <UART_WaitOnFlagUntilTimeout>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d001      	beq.n	8003de0 <UART_CheckIdleState+0x70>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 8003ddc:	2303      	movs	r3, #3
 8003dde:	e00c      	b.n	8003dfa <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2220      	movs	r2, #32
 8003de4:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  huart->RxState = HAL_UART_STATE_READY;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2220      	movs	r2, #32
 8003dec:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

  return HAL_OK;
 8003df8:	2300      	movs	r3, #0
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3710      	adds	r7, #16
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}

08003e02 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003e02:	b580      	push	{r7, lr}
 8003e04:	b084      	sub	sp, #16
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	60f8      	str	r0, [r7, #12]
 8003e0a:	60b9      	str	r1, [r7, #8]
 8003e0c:	603b      	str	r3, [r7, #0]
 8003e0e:	4613      	mov	r3, r2
 8003e10:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e12:	e02c      	b.n	8003e6e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8003e14:	69bb      	ldr	r3, [r7, #24]
 8003e16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e1a:	d028      	beq.n	8003e6e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8003e1c:	69bb      	ldr	r3, [r7, #24]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d007      	beq.n	8003e32 <UART_WaitOnFlagUntilTimeout+0x30>
 8003e22:	f7fc ff6b 	bl	8000cfc <HAL_GetTick>
 8003e26:	4602      	mov	r2, r0
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	69ba      	ldr	r2, [r7, #24]
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d21d      	bcs.n	8003e6e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003e40:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	689a      	ldr	r2, [r3, #8]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f022 0201 	bic.w	r2, r2, #1
 8003e50:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2220      	movs	r2, #32
 8003e56:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2220      	movs	r2, #32
 8003e5e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2200      	movs	r2, #0
 8003e66:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        return HAL_TIMEOUT;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	e00f      	b.n	8003e8e <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	69da      	ldr	r2, [r3, #28]
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	4013      	ands	r3, r2
 8003e78:	68ba      	ldr	r2, [r7, #8]
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	bf0c      	ite	eq
 8003e7e:	2301      	moveq	r3, #1
 8003e80:	2300      	movne	r3, #0
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	461a      	mov	r2, r3
 8003e86:	79fb      	ldrb	r3, [r7, #7]
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d0c3      	beq.n	8003e14 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e8c:	2300      	movs	r3, #0
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3710      	adds	r7, #16
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
	...

08003e98 <ReadByte>:
#include "spi.h"
#include "tim.h"
#include "System/mainsystem.h"

uint8_t ReadByte(uint8_t addres)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b086      	sub	sp, #24
 8003e9c:	af02      	add	r7, sp, #8
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	71fb      	strb	r3, [r7, #7]
	uint8_t trans_addres[2];
	uint8_t receive_data[2];

	trans_addres[0] = addres | 0x80;
 8003ea2:	79fb      	ldrb	r3, [r7, #7]
 8003ea4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	733b      	strb	r3, [r7, #12]
	trans_addres[1] = 0x00;
 8003eac:	2300      	movs	r3, #0
 8003eae:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(CS_GPIO_Port,CS_Pin,RESET);
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	2110      	movs	r1, #16
 8003eb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003eb8:	f7fd face 	bl	8001458 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1,trans_addres,receive_data,2,1);
 8003ebc:	f107 0208 	add.w	r2, r7, #8
 8003ec0:	f107 010c 	add.w	r1, r7, #12
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	9300      	str	r3, [sp, #0]
 8003ec8:	2302      	movs	r3, #2
 8003eca:	4807      	ldr	r0, [pc, #28]	; (8003ee8 <ReadByte+0x50>)
 8003ecc:	f7fe fed8 	bl	8002c80 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(CS_GPIO_Port,CS_Pin,SET);
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	2110      	movs	r1, #16
 8003ed4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ed8:	f7fd fabe 	bl	8001458 <HAL_GPIO_WritePin>

	return receive_data[1];
 8003edc:	7a7b      	ldrb	r3, [r7, #9]
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3710      	adds	r7, #16
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	20000288 	.word	0x20000288

08003eec <WriteByte>:

void WriteByte(uint8_t addres,uint8_t data)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b086      	sub	sp, #24
 8003ef0:	af02      	add	r7, sp, #8
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	460a      	mov	r2, r1
 8003ef6:	71fb      	strb	r3, [r7, #7]
 8003ef8:	4613      	mov	r3, r2
 8003efa:	71bb      	strb	r3, [r7, #6]

	uint8_t trans_data[2];
	uint8_t receive_data[2];

	trans_data[0] = addres & 0x7f;
 8003efc:	79fb      	ldrb	r3, [r7, #7]
 8003efe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	733b      	strb	r3, [r7, #12]
	trans_data[1] = data;
 8003f06:	79bb      	ldrb	r3, [r7, #6]
 8003f08:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(CS_GPIO_Port,CS_Pin,RESET);
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	2110      	movs	r1, #16
 8003f0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f12:	f7fd faa1 	bl	8001458 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1,trans_data,receive_data,2,1);
 8003f16:	f107 0208 	add.w	r2, r7, #8
 8003f1a:	f107 010c 	add.w	r1, r7, #12
 8003f1e:	2301      	movs	r3, #1
 8003f20:	9300      	str	r3, [sp, #0]
 8003f22:	2302      	movs	r3, #2
 8003f24:	4806      	ldr	r0, [pc, #24]	; (8003f40 <WriteByte+0x54>)
 8003f26:	f7fe feab 	bl	8002c80 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(CS_GPIO_Port,CS_Pin,SET);
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	2110      	movs	r1, #16
 8003f2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f32:	f7fd fa91 	bl	8001458 <HAL_GPIO_WritePin>

}
 8003f36:	bf00      	nop
 8003f38:	3710      	adds	r7, #16
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}
 8003f3e:	bf00      	nop
 8003f40:	20000288 	.word	0x20000288

08003f44 <InitGyro>:

void InitGyro(void)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b082      	sub	sp, #8
 8003f48:	af00      	add	r7, sp, #0
	uint8_t who_am_i = ReadByte(WHO_AM_I);
 8003f4a:	2075      	movs	r0, #117	; 0x75
 8003f4c:	f7ff ffa4 	bl	8003e98 <ReadByte>
 8003f50:	4603      	mov	r3, r0
 8003f52:	71fb      	strb	r3, [r7, #7]
	printf("Who am I ? -> 0x%x\n", who_am_i);
 8003f54:	79fb      	ldrb	r3, [r7, #7]
 8003f56:	4619      	mov	r1, r3
 8003f58:	4822      	ldr	r0, [pc, #136]	; (8003fe4 <InitGyro+0xa0>)
 8003f5a:	f001 fa55 	bl	8005408 <iprintf>

	if(who_am_i != GYRO_CORREST_REACTION){
 8003f5e:	79fb      	ldrb	r3, [r7, #7]
 8003f60:	2b71      	cmp	r3, #113	; 0x71
 8003f62:	d022      	beq.n	8003faa <InitGyro+0x66>
		who_am_i = ReadByte(WHO_AM_I);
 8003f64:	2075      	movs	r0, #117	; 0x75
 8003f66:	f7ff ff97 	bl	8003e98 <ReadByte>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	71fb      	strb	r3, [r7, #7]
		printf("addres is %d\n",WHO_AM_I);
 8003f6e:	2175      	movs	r1, #117	; 0x75
 8003f70:	481d      	ldr	r0, [pc, #116]	; (8003fe8 <InitGyro+0xa4>)
 8003f72:	f001 fa49 	bl	8005408 <iprintf>
		printf("Who am I ? -> 0x%x\n", who_am_i);
 8003f76:	79fb      	ldrb	r3, [r7, #7]
 8003f78:	4619      	mov	r1, r3
 8003f7a:	481a      	ldr	r0, [pc, #104]	; (8003fe4 <InitGyro+0xa0>)
 8003f7c:	f001 fa44 	bl	8005408 <iprintf>
		while(who_am_i != GYRO_CORREST_REACTION){
 8003f80:	e010      	b.n	8003fa4 <InitGyro+0x60>
			who_am_i = ReadByte(WHO_AM_I);
 8003f82:	2075      	movs	r0, #117	; 0x75
 8003f84:	f7ff ff88 	bl	8003e98 <ReadByte>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	71fb      	strb	r3, [r7, #7]
			printf("Who am I ? -> 0x%x\n", who_am_i);
 8003f8c:	79fb      	ldrb	r3, [r7, #7]
 8003f8e:	4619      	mov	r1, r3
 8003f90:	4814      	ldr	r0, [pc, #80]	; (8003fe4 <InitGyro+0xa0>)
 8003f92:	f001 fa39 	bl	8005408 <iprintf>
			printf("Gyro Fail\n");
 8003f96:	4815      	ldr	r0, [pc, #84]	; (8003fec <InitGyro+0xa8>)
 8003f98:	f001 faaa 	bl	80054f0 <puts>
			HAL_Delay(1000);
 8003f9c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003fa0:	f7fc feb8 	bl	8000d14 <HAL_Delay>
		while(who_am_i != GYRO_CORREST_REACTION){
 8003fa4:	79fb      	ldrb	r3, [r7, #7]
 8003fa6:	2b71      	cmp	r3, #113	; 0x71
 8003fa8:	d1eb      	bne.n	8003f82 <InitGyro+0x3e>
		}
	}

	printf("Gyro OK\n");
 8003faa:	4811      	ldr	r0, [pc, #68]	; (8003ff0 <InitGyro+0xac>)
 8003fac:	f001 faa0 	bl	80054f0 <puts>

	WriteByte(PWR_MGMT_1,0x00);
 8003fb0:	2100      	movs	r1, #0
 8003fb2:	206b      	movs	r0, #107	; 0x6b
 8003fb4:	f7ff ff9a 	bl	8003eec <WriteByte>
	HAL_Delay(10);
 8003fb8:	200a      	movs	r0, #10
 8003fba:	f7fc feab 	bl	8000d14 <HAL_Delay>
	WriteByte(CONFIG,0x00);
 8003fbe:	2100      	movs	r1, #0
 8003fc0:	201a      	movs	r0, #26
 8003fc2:	f7ff ff93 	bl	8003eec <WriteByte>
	HAL_Delay(10);
 8003fc6:	200a      	movs	r0, #10
 8003fc8:	f7fc fea4 	bl	8000d14 <HAL_Delay>
	WriteByte(GYRO_CONFIG,0x18);
 8003fcc:	2118      	movs	r1, #24
 8003fce:	201b      	movs	r0, #27
 8003fd0:	f7ff ff8c 	bl	8003eec <WriteByte>
	HAL_Delay(10);
 8003fd4:	200a      	movs	r0, #10
 8003fd6:	f7fc fe9d 	bl	8000d14 <HAL_Delay>

}
 8003fda:	bf00      	nop
 8003fdc:	3708      	adds	r7, #8
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	bf00      	nop
 8003fe4:	08007280 	.word	0x08007280
 8003fe8:	08007294 	.word	0x08007294
 8003fec:	080072a4 	.word	0x080072a4
 8003ff0:	080072b0 	.word	0x080072b0

08003ff4 <ReadGyro>:

float ReadGyro(void){
 8003ff4:	b590      	push	{r4, r7, lr}
 8003ff6:	b083      	sub	sp, #12
 8003ff8:	af00      	add	r7, sp, #0
	int16_t omega_raw_z;
	float omega;
	omega_raw_z = (int16_t)(ReadByte(GYRO_ZOUT_H) << 8 | ReadByte(GYRO_ZOUT_L));	//0x47が上位，0x48が下位の16bitデータでジャイロ値を取得
 8003ffa:	2047      	movs	r0, #71	; 0x47
 8003ffc:	f7ff ff4c 	bl	8003e98 <ReadByte>
 8004000:	4603      	mov	r3, r0
 8004002:	021b      	lsls	r3, r3, #8
 8004004:	b21c      	sxth	r4, r3
 8004006:	2048      	movs	r0, #72	; 0x48
 8004008:	f7ff ff46 	bl	8003e98 <ReadByte>
 800400c:	4603      	mov	r3, r0
 800400e:	b21b      	sxth	r3, r3
 8004010:	4323      	orrs	r3, r4
 8004012:	80fb      	strh	r3, [r7, #6]
	omega = (float)(omega_raw_z / GYRO_FIX);
 8004014:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004018:	ee07 3a90 	vmov	s15, r3
 800401c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004020:	eddf 6a06 	vldr	s13, [pc, #24]	; 800403c <ReadGyro+0x48>
 8004024:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004028:	edc7 7a00 	vstr	s15, [r7]
	return omega;
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	ee07 3a90 	vmov	s15, r3
}
 8004032:	eeb0 0a67 	vmov.f32	s0, s15
 8004036:	370c      	adds	r7, #12
 8004038:	46bd      	mov	sp, r7
 800403a:	bd90      	pop	{r4, r7, pc}
 800403c:	41833333 	.word	0x41833333

08004040 <MainSystem>:
	float omega = 0.0f;
	float gyro_base = 0.0f;
*/

void MainSystem()
{
 8004040:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004042:	b085      	sub	sp, #20
 8004044:	af02      	add	r7, sp, #8
	uint16_t i = 0;
 8004046:	2300      	movs	r3, #0
 8004048:	80fb      	strh	r3, [r7, #6]

	printf("Hello,Robomaster\n");
 800404a:	4828      	ldr	r0, [pc, #160]	; (80040ec <MainSystem+0xac>)
 800404c:	f001 fa50 	bl	80054f0 <puts>

	InitGyro();
 8004050:	f7ff ff78 	bl	8003f44 <InitGyro>

	//Get Base Value (Average)
	for(i=0;i<1000;i++){
 8004054:	2300      	movs	r3, #0
 8004056:	80fb      	strh	r3, [r7, #6]
 8004058:	e011      	b.n	800407e <MainSystem+0x3e>
		gyro_base += ReadGyro();
 800405a:	f7ff ffcb 	bl	8003ff4 <ReadGyro>
 800405e:	eeb0 7a40 	vmov.f32	s14, s0
 8004062:	4b23      	ldr	r3, [pc, #140]	; (80040f0 <MainSystem+0xb0>)
 8004064:	edd3 7a00 	vldr	s15, [r3]
 8004068:	ee77 7a27 	vadd.f32	s15, s14, s15
 800406c:	4b20      	ldr	r3, [pc, #128]	; (80040f0 <MainSystem+0xb0>)
 800406e:	edc3 7a00 	vstr	s15, [r3]
		HAL_Delay(1);
 8004072:	2001      	movs	r0, #1
 8004074:	f7fc fe4e 	bl	8000d14 <HAL_Delay>
	for(i=0;i<1000;i++){
 8004078:	88fb      	ldrh	r3, [r7, #6]
 800407a:	3301      	adds	r3, #1
 800407c:	80fb      	strh	r3, [r7, #6]
 800407e:	88fb      	ldrh	r3, [r7, #6]
 8004080:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004084:	d3e9      	bcc.n	800405a <MainSystem+0x1a>
	}
	gyro_base = gyro_base / 1000;
 8004086:	4b1a      	ldr	r3, [pc, #104]	; (80040f0 <MainSystem+0xb0>)
 8004088:	ed93 7a00 	vldr	s14, [r3]
 800408c:	eddf 6a19 	vldr	s13, [pc, #100]	; 80040f4 <MainSystem+0xb4>
 8004090:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004094:	4b16      	ldr	r3, [pc, #88]	; (80040f0 <MainSystem+0xb0>)
 8004096:	edc3 7a00 	vstr	s15, [r3]
	printf("Base Value is %lf\n",gyro_base);
 800409a:	4b15      	ldr	r3, [pc, #84]	; (80040f0 <MainSystem+0xb0>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4618      	mov	r0, r3
 80040a0:	f7fc fa52 	bl	8000548 <__aeabi_f2d>
 80040a4:	4603      	mov	r3, r0
 80040a6:	460c      	mov	r4, r1
 80040a8:	461a      	mov	r2, r3
 80040aa:	4623      	mov	r3, r4
 80040ac:	4812      	ldr	r0, [pc, #72]	; (80040f8 <MainSystem+0xb8>)
 80040ae:	f001 f9ab 	bl	8005408 <iprintf>

	HAL_TIM_Base_Start_IT(&htim6);
 80040b2:	4812      	ldr	r0, [pc, #72]	; (80040fc <MainSystem+0xbc>)
 80040b4:	f7ff f92d 	bl	8003312 <HAL_TIM_Base_Start_IT>

	while(1){
			printf("Angle is %lf, omega is %lf\n",angle_degree,omega);
 80040b8:	4b11      	ldr	r3, [pc, #68]	; (8004100 <MainSystem+0xc0>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4618      	mov	r0, r3
 80040be:	f7fc fa43 	bl	8000548 <__aeabi_f2d>
 80040c2:	4605      	mov	r5, r0
 80040c4:	460e      	mov	r6, r1
 80040c6:	4b0f      	ldr	r3, [pc, #60]	; (8004104 <MainSystem+0xc4>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4618      	mov	r0, r3
 80040cc:	f7fc fa3c 	bl	8000548 <__aeabi_f2d>
 80040d0:	4603      	mov	r3, r0
 80040d2:	460c      	mov	r4, r1
 80040d4:	e9cd 3400 	strd	r3, r4, [sp]
 80040d8:	462a      	mov	r2, r5
 80040da:	4633      	mov	r3, r6
 80040dc:	480a      	ldr	r0, [pc, #40]	; (8004108 <MainSystem+0xc8>)
 80040de:	f001 f993 	bl	8005408 <iprintf>
			HAL_Delay(1000);
 80040e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80040e6:	f7fc fe15 	bl	8000d14 <HAL_Delay>
			printf("Angle is %lf, omega is %lf\n",angle_degree,omega);
 80040ea:	e7e5      	b.n	80040b8 <MainSystem+0x78>
 80040ec:	080072b8 	.word	0x080072b8
 80040f0:	20000208 	.word	0x20000208
 80040f4:	447a0000 	.word	0x447a0000
 80040f8:	080072cc 	.word	0x080072cc
 80040fc:	200002ec 	.word	0x200002ec
 8004100:	2000020c 	.word	0x2000020c
 8004104:	20000210 	.word	0x20000210
 8004108:	080072e0 	.word	0x080072e0

0800410c <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	af00      	add	r7, sp, #0

  hcan.Instance = CAN;
 8004110:	4b16      	ldr	r3, [pc, #88]	; (800416c <MX_CAN_Init+0x60>)
 8004112:	4a17      	ldr	r2, [pc, #92]	; (8004170 <MX_CAN_Init+0x64>)
 8004114:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8004116:	4b15      	ldr	r3, [pc, #84]	; (800416c <MX_CAN_Init+0x60>)
 8004118:	2210      	movs	r2, #16
 800411a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800411c:	4b13      	ldr	r3, [pc, #76]	; (800416c <MX_CAN_Init+0x60>)
 800411e:	2200      	movs	r2, #0
 8004120:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8004122:	4b12      	ldr	r3, [pc, #72]	; (800416c <MX_CAN_Init+0x60>)
 8004124:	2200      	movs	r2, #0
 8004126:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8004128:	4b10      	ldr	r3, [pc, #64]	; (800416c <MX_CAN_Init+0x60>)
 800412a:	2200      	movs	r2, #0
 800412c:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 800412e:	4b0f      	ldr	r3, [pc, #60]	; (800416c <MX_CAN_Init+0x60>)
 8004130:	2200      	movs	r2, #0
 8004132:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8004134:	4b0d      	ldr	r3, [pc, #52]	; (800416c <MX_CAN_Init+0x60>)
 8004136:	2200      	movs	r2, #0
 8004138:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800413a:	4b0c      	ldr	r3, [pc, #48]	; (800416c <MX_CAN_Init+0x60>)
 800413c:	2200      	movs	r2, #0
 800413e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8004140:	4b0a      	ldr	r3, [pc, #40]	; (800416c <MX_CAN_Init+0x60>)
 8004142:	2200      	movs	r2, #0
 8004144:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8004146:	4b09      	ldr	r3, [pc, #36]	; (800416c <MX_CAN_Init+0x60>)
 8004148:	2200      	movs	r2, #0
 800414a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800414c:	4b07      	ldr	r3, [pc, #28]	; (800416c <MX_CAN_Init+0x60>)
 800414e:	2200      	movs	r2, #0
 8004150:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8004152:	4b06      	ldr	r3, [pc, #24]	; (800416c <MX_CAN_Init+0x60>)
 8004154:	2200      	movs	r2, #0
 8004156:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8004158:	4804      	ldr	r0, [pc, #16]	; (800416c <MX_CAN_Init+0x60>)
 800415a:	f7fc fdfd 	bl	8000d58 <HAL_CAN_Init>
 800415e:	4603      	mov	r3, r0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d001      	beq.n	8004168 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8004164:	f000 fa01 	bl	800456a <Error_Handler>
  }

}
 8004168:	bf00      	nop
 800416a:	bd80      	pop	{r7, pc}
 800416c:	20000214 	.word	0x20000214
 8004170:	40006400 	.word	0x40006400

08004174 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b08a      	sub	sp, #40	; 0x28
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800417c:	f107 0314 	add.w	r3, r7, #20
 8004180:	2200      	movs	r2, #0
 8004182:	601a      	str	r2, [r3, #0]
 8004184:	605a      	str	r2, [r3, #4]
 8004186:	609a      	str	r2, [r3, #8]
 8004188:	60da      	str	r2, [r3, #12]
 800418a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a18      	ldr	r2, [pc, #96]	; (80041f4 <HAL_CAN_MspInit+0x80>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d129      	bne.n	80041ea <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* CAN clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8004196:	4b18      	ldr	r3, [pc, #96]	; (80041f8 <HAL_CAN_MspInit+0x84>)
 8004198:	69db      	ldr	r3, [r3, #28]
 800419a:	4a17      	ldr	r2, [pc, #92]	; (80041f8 <HAL_CAN_MspInit+0x84>)
 800419c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80041a0:	61d3      	str	r3, [r2, #28]
 80041a2:	4b15      	ldr	r3, [pc, #84]	; (80041f8 <HAL_CAN_MspInit+0x84>)
 80041a4:	69db      	ldr	r3, [r3, #28]
 80041a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041aa:	613b      	str	r3, [r7, #16]
 80041ac:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041ae:	4b12      	ldr	r3, [pc, #72]	; (80041f8 <HAL_CAN_MspInit+0x84>)
 80041b0:	695b      	ldr	r3, [r3, #20]
 80041b2:	4a11      	ldr	r2, [pc, #68]	; (80041f8 <HAL_CAN_MspInit+0x84>)
 80041b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041b8:	6153      	str	r3, [r2, #20]
 80041ba:	4b0f      	ldr	r3, [pc, #60]	; (80041f8 <HAL_CAN_MspInit+0x84>)
 80041bc:	695b      	ldr	r3, [r3, #20]
 80041be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041c2:	60fb      	str	r3, [r7, #12]
 80041c4:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration    
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80041c6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80041ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041cc:	2302      	movs	r3, #2
 80041ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041d0:	2300      	movs	r3, #0
 80041d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80041d4:	2303      	movs	r3, #3
 80041d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 80041d8:	2309      	movs	r3, #9
 80041da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041dc:	f107 0314 	add.w	r3, r7, #20
 80041e0:	4619      	mov	r1, r3
 80041e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80041e6:	f7fc ffc1 	bl	800116c <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }
}
 80041ea:	bf00      	nop
 80041ec:	3728      	adds	r7, #40	; 0x28
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	bf00      	nop
 80041f4:	40006400 	.word	0x40006400
 80041f8:	40021000 	.word	0x40021000

080041fc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b088      	sub	sp, #32
 8004200:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004202:	f107 030c 	add.w	r3, r7, #12
 8004206:	2200      	movs	r2, #0
 8004208:	601a      	str	r2, [r3, #0]
 800420a:	605a      	str	r2, [r3, #4]
 800420c:	609a      	str	r2, [r3, #8]
 800420e:	60da      	str	r2, [r3, #12]
 8004210:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004212:	4b28      	ldr	r3, [pc, #160]	; (80042b4 <MX_GPIO_Init+0xb8>)
 8004214:	695b      	ldr	r3, [r3, #20]
 8004216:	4a27      	ldr	r2, [pc, #156]	; (80042b4 <MX_GPIO_Init+0xb8>)
 8004218:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800421c:	6153      	str	r3, [r2, #20]
 800421e:	4b25      	ldr	r3, [pc, #148]	; (80042b4 <MX_GPIO_Init+0xb8>)
 8004220:	695b      	ldr	r3, [r3, #20]
 8004222:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004226:	60bb      	str	r3, [r7, #8]
 8004228:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800422a:	4b22      	ldr	r3, [pc, #136]	; (80042b4 <MX_GPIO_Init+0xb8>)
 800422c:	695b      	ldr	r3, [r3, #20]
 800422e:	4a21      	ldr	r2, [pc, #132]	; (80042b4 <MX_GPIO_Init+0xb8>)
 8004230:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004234:	6153      	str	r3, [r2, #20]
 8004236:	4b1f      	ldr	r3, [pc, #124]	; (80042b4 <MX_GPIO_Init+0xb8>)
 8004238:	695b      	ldr	r3, [r3, #20]
 800423a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800423e:	607b      	str	r3, [r7, #4]
 8004240:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004242:	4b1c      	ldr	r3, [pc, #112]	; (80042b4 <MX_GPIO_Init+0xb8>)
 8004244:	695b      	ldr	r3, [r3, #20]
 8004246:	4a1b      	ldr	r2, [pc, #108]	; (80042b4 <MX_GPIO_Init+0xb8>)
 8004248:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800424c:	6153      	str	r3, [r2, #20]
 800424e:	4b19      	ldr	r3, [pc, #100]	; (80042b4 <MX_GPIO_Init+0xb8>)
 8004250:	695b      	ldr	r3, [r3, #20]
 8004252:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004256:	603b      	str	r3, [r7, #0]
 8004258:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 800425a:	2200      	movs	r2, #0
 800425c:	2110      	movs	r1, #16
 800425e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004262:	f7fd f8f9 	bl	8001458 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8004266:	2200      	movs	r2, #0
 8004268:	2108      	movs	r1, #8
 800426a:	4813      	ldr	r0, [pc, #76]	; (80042b8 <MX_GPIO_Init+0xbc>)
 800426c:	f7fd f8f4 	bl	8001458 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_Pin;
 8004270:	2310      	movs	r3, #16
 8004272:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004274:	2301      	movs	r3, #1
 8004276:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004278:	2300      	movs	r3, #0
 800427a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800427c:	2300      	movs	r3, #0
 800427e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8004280:	f107 030c 	add.w	r3, r7, #12
 8004284:	4619      	mov	r1, r3
 8004286:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800428a:	f7fc ff6f 	bl	800116c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD3_Pin;
 800428e:	2308      	movs	r3, #8
 8004290:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004292:	2301      	movs	r3, #1
 8004294:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004296:	2300      	movs	r3, #0
 8004298:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800429a:	2300      	movs	r3, #0
 800429c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800429e:	f107 030c 	add.w	r3, r7, #12
 80042a2:	4619      	mov	r1, r3
 80042a4:	4804      	ldr	r0, [pc, #16]	; (80042b8 <MX_GPIO_Init+0xbc>)
 80042a6:	f7fc ff61 	bl	800116c <HAL_GPIO_Init>

}
 80042aa:	bf00      	nop
 80042ac:	3720      	adds	r7, #32
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	bf00      	nop
 80042b4:	40021000 	.word	0x40021000
 80042b8:	48000400 	.word	0x48000400

080042bc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80042c0:	4b1b      	ldr	r3, [pc, #108]	; (8004330 <MX_I2C1_Init+0x74>)
 80042c2:	4a1c      	ldr	r2, [pc, #112]	; (8004334 <MX_I2C1_Init+0x78>)
 80042c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80042c6:	4b1a      	ldr	r3, [pc, #104]	; (8004330 <MX_I2C1_Init+0x74>)
 80042c8:	4a1b      	ldr	r2, [pc, #108]	; (8004338 <MX_I2C1_Init+0x7c>)
 80042ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80042cc:	4b18      	ldr	r3, [pc, #96]	; (8004330 <MX_I2C1_Init+0x74>)
 80042ce:	2200      	movs	r2, #0
 80042d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80042d2:	4b17      	ldr	r3, [pc, #92]	; (8004330 <MX_I2C1_Init+0x74>)
 80042d4:	2201      	movs	r2, #1
 80042d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80042d8:	4b15      	ldr	r3, [pc, #84]	; (8004330 <MX_I2C1_Init+0x74>)
 80042da:	2200      	movs	r2, #0
 80042dc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80042de:	4b14      	ldr	r3, [pc, #80]	; (8004330 <MX_I2C1_Init+0x74>)
 80042e0:	2200      	movs	r2, #0
 80042e2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80042e4:	4b12      	ldr	r3, [pc, #72]	; (8004330 <MX_I2C1_Init+0x74>)
 80042e6:	2200      	movs	r2, #0
 80042e8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80042ea:	4b11      	ldr	r3, [pc, #68]	; (8004330 <MX_I2C1_Init+0x74>)
 80042ec:	2200      	movs	r2, #0
 80042ee:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80042f0:	4b0f      	ldr	r3, [pc, #60]	; (8004330 <MX_I2C1_Init+0x74>)
 80042f2:	2200      	movs	r2, #0
 80042f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80042f6:	480e      	ldr	r0, [pc, #56]	; (8004330 <MX_I2C1_Init+0x74>)
 80042f8:	f7fd f8c6 	bl	8001488 <HAL_I2C_Init>
 80042fc:	4603      	mov	r3, r0
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d001      	beq.n	8004306 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8004302:	f000 f932 	bl	800456a <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004306:	2100      	movs	r1, #0
 8004308:	4809      	ldr	r0, [pc, #36]	; (8004330 <MX_I2C1_Init+0x74>)
 800430a:	f7fd f94c 	bl	80015a6 <HAL_I2CEx_ConfigAnalogFilter>
 800430e:	4603      	mov	r3, r0
 8004310:	2b00      	cmp	r3, #0
 8004312:	d001      	beq.n	8004318 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8004314:	f000 f929 	bl	800456a <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004318:	2100      	movs	r1, #0
 800431a:	4805      	ldr	r0, [pc, #20]	; (8004330 <MX_I2C1_Init+0x74>)
 800431c:	f7fd f98e 	bl	800163c <HAL_I2CEx_ConfigDigitalFilter>
 8004320:	4603      	mov	r3, r0
 8004322:	2b00      	cmp	r3, #0
 8004324:	d001      	beq.n	800432a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8004326:	f000 f920 	bl	800456a <Error_Handler>
  }

}
 800432a:	bf00      	nop
 800432c:	bd80      	pop	{r7, pc}
 800432e:	bf00      	nop
 8004330:	2000023c 	.word	0x2000023c
 8004334:	40005400 	.word	0x40005400
 8004338:	2000090e 	.word	0x2000090e

0800433c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b08a      	sub	sp, #40	; 0x28
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004344:	f107 0314 	add.w	r3, r7, #20
 8004348:	2200      	movs	r2, #0
 800434a:	601a      	str	r2, [r3, #0]
 800434c:	605a      	str	r2, [r3, #4]
 800434e:	609a      	str	r2, [r3, #8]
 8004350:	60da      	str	r2, [r3, #12]
 8004352:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a17      	ldr	r2, [pc, #92]	; (80043b8 <HAL_I2C_MspInit+0x7c>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d127      	bne.n	80043ae <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800435e:	4b17      	ldr	r3, [pc, #92]	; (80043bc <HAL_I2C_MspInit+0x80>)
 8004360:	695b      	ldr	r3, [r3, #20]
 8004362:	4a16      	ldr	r2, [pc, #88]	; (80043bc <HAL_I2C_MspInit+0x80>)
 8004364:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004368:	6153      	str	r3, [r2, #20]
 800436a:	4b14      	ldr	r3, [pc, #80]	; (80043bc <HAL_I2C_MspInit+0x80>)
 800436c:	695b      	ldr	r3, [r3, #20]
 800436e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004372:	613b      	str	r3, [r7, #16]
 8004374:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004376:	23c0      	movs	r3, #192	; 0xc0
 8004378:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800437a:	2312      	movs	r3, #18
 800437c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800437e:	2301      	movs	r3, #1
 8004380:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004382:	2303      	movs	r3, #3
 8004384:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004386:	2304      	movs	r3, #4
 8004388:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800438a:	f107 0314 	add.w	r3, r7, #20
 800438e:	4619      	mov	r1, r3
 8004390:	480b      	ldr	r0, [pc, #44]	; (80043c0 <HAL_I2C_MspInit+0x84>)
 8004392:	f7fc feeb 	bl	800116c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004396:	4b09      	ldr	r3, [pc, #36]	; (80043bc <HAL_I2C_MspInit+0x80>)
 8004398:	69db      	ldr	r3, [r3, #28]
 800439a:	4a08      	ldr	r2, [pc, #32]	; (80043bc <HAL_I2C_MspInit+0x80>)
 800439c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80043a0:	61d3      	str	r3, [r2, #28]
 80043a2:	4b06      	ldr	r3, [pc, #24]	; (80043bc <HAL_I2C_MspInit+0x80>)
 80043a4:	69db      	ldr	r3, [r3, #28]
 80043a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043aa:	60fb      	str	r3, [r7, #12]
 80043ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80043ae:	bf00      	nop
 80043b0:	3728      	adds	r7, #40	; 0x28
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	bf00      	nop
 80043b8:	40005400 	.word	0x40005400
 80043bc:	40021000 	.word	0x40021000
 80043c0:	48000400 	.word	0x48000400

080043c4 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int c) {
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b084      	sub	sp, #16
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  if( c == '\n' ) {
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2b0a      	cmp	r3, #10
 80043d0:	d108      	bne.n	80043e4 <__io_putchar+0x20>
    int _c = '\r';
 80043d2:	230d      	movs	r3, #13
 80043d4:	60fb      	str	r3, [r7, #12]
    HAL_UART_Transmit(&huart2, &_c, 1, 1);
 80043d6:	f107 010c 	add.w	r1, r7, #12
 80043da:	2301      	movs	r3, #1
 80043dc:	2201      	movs	r2, #1
 80043de:	4807      	ldr	r0, [pc, #28]	; (80043fc <__io_putchar+0x38>)
 80043e0:	f7ff fa31 	bl	8003846 <HAL_UART_Transmit>
  }
  HAL_UART_Transmit(&huart2, &c, 1, 1);
 80043e4:	1d39      	adds	r1, r7, #4
 80043e6:	2301      	movs	r3, #1
 80043e8:	2201      	movs	r2, #1
 80043ea:	4804      	ldr	r0, [pc, #16]	; (80043fc <__io_putchar+0x38>)
 80043ec:	f7ff fa2b 	bl	8003846 <HAL_UART_Transmit>
  return 0;
 80043f0:	2300      	movs	r3, #0
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3710      	adds	r7, #16
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	bf00      	nop
 80043fc:	2000032c 	.word	0x2000032c

08004400 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004400:	b5b0      	push	{r4, r5, r7, lr}
 8004402:	b082      	sub	sp, #8
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
	if(htim->Instance == htim6.Instance){
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	4b1c      	ldr	r3, [pc, #112]	; (8004480 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	429a      	cmp	r2, r3
 8004412:	d12b      	bne.n	800446c <HAL_TIM_PeriodElapsedCallback+0x6c>
		omega = ReadGyro() - gyro_base;
 8004414:	f7ff fdee 	bl	8003ff4 <ReadGyro>
 8004418:	eeb0 7a40 	vmov.f32	s14, s0
 800441c:	4b19      	ldr	r3, [pc, #100]	; (8004484 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800441e:	edd3 7a00 	vldr	s15, [r3]
 8004422:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004426:	4b18      	ldr	r3, [pc, #96]	; (8004488 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8004428:	edc3 7a00 	vstr	s15, [r3]
		angle_degree += omega * 0.001;
 800442c:	4b17      	ldr	r3, [pc, #92]	; (800448c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4618      	mov	r0, r3
 8004432:	f7fc f889 	bl	8000548 <__aeabi_f2d>
 8004436:	4604      	mov	r4, r0
 8004438:	460d      	mov	r5, r1
 800443a:	4b13      	ldr	r3, [pc, #76]	; (8004488 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4618      	mov	r0, r3
 8004440:	f7fc f882 	bl	8000548 <__aeabi_f2d>
 8004444:	a30c      	add	r3, pc, #48	; (adr r3, 8004478 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8004446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800444a:	f7fc f8d5 	bl	80005f8 <__aeabi_dmul>
 800444e:	4602      	mov	r2, r0
 8004450:	460b      	mov	r3, r1
 8004452:	4620      	mov	r0, r4
 8004454:	4629      	mov	r1, r5
 8004456:	f7fb ff19 	bl	800028c <__adddf3>
 800445a:	4603      	mov	r3, r0
 800445c:	460c      	mov	r4, r1
 800445e:	4618      	mov	r0, r3
 8004460:	4621      	mov	r1, r4
 8004462:	f7fc fba1 	bl	8000ba8 <__aeabi_d2f>
 8004466:	4602      	mov	r2, r0
 8004468:	4b08      	ldr	r3, [pc, #32]	; (800448c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800446a:	601a      	str	r2, [r3, #0]
	}	//---htim6 End---
}
 800446c:	bf00      	nop
 800446e:	3708      	adds	r7, #8
 8004470:	46bd      	mov	sp, r7
 8004472:	bdb0      	pop	{r4, r5, r7, pc}
 8004474:	f3af 8000 	nop.w
 8004478:	d2f1a9fc 	.word	0xd2f1a9fc
 800447c:	3f50624d 	.word	0x3f50624d
 8004480:	200002ec 	.word	0x200002ec
 8004484:	20000208 	.word	0x20000208
 8004488:	20000210 	.word	0x20000210
 800448c:	2000020c 	.word	0x2000020c

08004490 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004494:	f7fc fbd8 	bl	8000c48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004498:	f000 f80f 	bl	80044ba <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800449c:	f7ff feae 	bl	80041fc <MX_GPIO_Init>
  MX_CAN_Init();
 80044a0:	f7ff fe34 	bl	800410c <MX_CAN_Init>
  MX_SPI1_Init();
 80044a4:	f000 f868 	bl	8004578 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80044a8:	f000 fa82 	bl	80049b0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80044ac:	f7ff ff06 	bl	80042bc <MX_I2C1_Init>
  MX_TIM6_Init();
 80044b0:	f000 fa22 	bl	80048f8 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  MainSystem();
 80044b4:	f7ff fdc4 	bl	8004040 <MainSystem>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80044b8:	e7fe      	b.n	80044b8 <main+0x28>

080044ba <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80044ba:	b580      	push	{r7, lr}
 80044bc:	b096      	sub	sp, #88	; 0x58
 80044be:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80044c0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80044c4:	2228      	movs	r2, #40	; 0x28
 80044c6:	2100      	movs	r1, #0
 80044c8:	4618      	mov	r0, r3
 80044ca:	f000 fb39 	bl	8004b40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80044ce:	f107 031c 	add.w	r3, r7, #28
 80044d2:	2200      	movs	r2, #0
 80044d4:	601a      	str	r2, [r3, #0]
 80044d6:	605a      	str	r2, [r3, #4]
 80044d8:	609a      	str	r2, [r3, #8]
 80044da:	60da      	str	r2, [r3, #12]
 80044dc:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80044de:	1d3b      	adds	r3, r7, #4
 80044e0:	2200      	movs	r2, #0
 80044e2:	601a      	str	r2, [r3, #0]
 80044e4:	605a      	str	r2, [r3, #4]
 80044e6:	609a      	str	r2, [r3, #8]
 80044e8:	60da      	str	r2, [r3, #12]
 80044ea:	611a      	str	r2, [r3, #16]
 80044ec:	615a      	str	r2, [r3, #20]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80044ee:	2302      	movs	r3, #2
 80044f0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80044f2:	2301      	movs	r3, #1
 80044f4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80044f6:	2310      	movs	r3, #16
 80044f8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80044fa:	2302      	movs	r3, #2
 80044fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80044fe:	2300      	movs	r3, #0
 8004500:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8004502:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8004506:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004508:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800450c:	4618      	mov	r0, r3
 800450e:	f7fd f8e3 	bl	80016d8 <HAL_RCC_OscConfig>
 8004512:	4603      	mov	r3, r0
 8004514:	2b00      	cmp	r3, #0
 8004516:	d001      	beq.n	800451c <SystemClock_Config+0x62>
  {
    Error_Handler();
 8004518:	f000 f827 	bl	800456a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800451c:	230f      	movs	r3, #15
 800451e:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004520:	2302      	movs	r3, #2
 8004522:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004524:	2300      	movs	r3, #0
 8004526:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004528:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800452c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800452e:	2300      	movs	r3, #0
 8004530:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004532:	f107 031c 	add.w	r3, r7, #28
 8004536:	2102      	movs	r1, #2
 8004538:	4618      	mov	r0, r3
 800453a:	f7fd ffbb 	bl	80024b4 <HAL_RCC_ClockConfig>
 800453e:	4603      	mov	r3, r0
 8004540:	2b00      	cmp	r3, #0
 8004542:	d001      	beq.n	8004548 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8004544:	f000 f811 	bl	800456a <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004548:	2320      	movs	r3, #32
 800454a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800454c:	2300      	movs	r3, #0
 800454e:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004550:	1d3b      	adds	r3, r7, #4
 8004552:	4618      	mov	r0, r3
 8004554:	f7fe f9e4 	bl	8002920 <HAL_RCCEx_PeriphCLKConfig>
 8004558:	4603      	mov	r3, r0
 800455a:	2b00      	cmp	r3, #0
 800455c:	d001      	beq.n	8004562 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 800455e:	f000 f804 	bl	800456a <Error_Handler>
  }
}
 8004562:	bf00      	nop
 8004564:	3758      	adds	r7, #88	; 0x58
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}

0800456a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800456a:	b480      	push	{r7}
 800456c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800456e:	bf00      	nop
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr

08004578 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 800457c:	4b1b      	ldr	r3, [pc, #108]	; (80045ec <MX_SPI1_Init+0x74>)
 800457e:	4a1c      	ldr	r2, [pc, #112]	; (80045f0 <MX_SPI1_Init+0x78>)
 8004580:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004582:	4b1a      	ldr	r3, [pc, #104]	; (80045ec <MX_SPI1_Init+0x74>)
 8004584:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004588:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800458a:	4b18      	ldr	r3, [pc, #96]	; (80045ec <MX_SPI1_Init+0x74>)
 800458c:	2200      	movs	r2, #0
 800458e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004590:	4b16      	ldr	r3, [pc, #88]	; (80045ec <MX_SPI1_Init+0x74>)
 8004592:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004596:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8004598:	4b14      	ldr	r3, [pc, #80]	; (80045ec <MX_SPI1_Init+0x74>)
 800459a:	2202      	movs	r2, #2
 800459c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800459e:	4b13      	ldr	r3, [pc, #76]	; (80045ec <MX_SPI1_Init+0x74>)
 80045a0:	2201      	movs	r2, #1
 80045a2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80045a4:	4b11      	ldr	r3, [pc, #68]	; (80045ec <MX_SPI1_Init+0x74>)
 80045a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045aa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80045ac:	4b0f      	ldr	r3, [pc, #60]	; (80045ec <MX_SPI1_Init+0x74>)
 80045ae:	2230      	movs	r2, #48	; 0x30
 80045b0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80045b2:	4b0e      	ldr	r3, [pc, #56]	; (80045ec <MX_SPI1_Init+0x74>)
 80045b4:	2200      	movs	r2, #0
 80045b6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80045b8:	4b0c      	ldr	r3, [pc, #48]	; (80045ec <MX_SPI1_Init+0x74>)
 80045ba:	2200      	movs	r2, #0
 80045bc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045be:	4b0b      	ldr	r3, [pc, #44]	; (80045ec <MX_SPI1_Init+0x74>)
 80045c0:	2200      	movs	r2, #0
 80045c2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80045c4:	4b09      	ldr	r3, [pc, #36]	; (80045ec <MX_SPI1_Init+0x74>)
 80045c6:	2207      	movs	r2, #7
 80045c8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80045ca:	4b08      	ldr	r3, [pc, #32]	; (80045ec <MX_SPI1_Init+0x74>)
 80045cc:	2200      	movs	r2, #0
 80045ce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80045d0:	4b06      	ldr	r3, [pc, #24]	; (80045ec <MX_SPI1_Init+0x74>)
 80045d2:	2200      	movs	r2, #0
 80045d4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80045d6:	4805      	ldr	r0, [pc, #20]	; (80045ec <MX_SPI1_Init+0x74>)
 80045d8:	f7fe fac8 	bl	8002b6c <HAL_SPI_Init>
 80045dc:	4603      	mov	r3, r0
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d001      	beq.n	80045e6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80045e2:	f7ff ffc2 	bl	800456a <Error_Handler>
  }

}
 80045e6:	bf00      	nop
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	bf00      	nop
 80045ec:	20000288 	.word	0x20000288
 80045f0:	40013000 	.word	0x40013000

080045f4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b08a      	sub	sp, #40	; 0x28
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045fc:	f107 0314 	add.w	r3, r7, #20
 8004600:	2200      	movs	r2, #0
 8004602:	601a      	str	r2, [r3, #0]
 8004604:	605a      	str	r2, [r3, #4]
 8004606:	609a      	str	r2, [r3, #8]
 8004608:	60da      	str	r2, [r3, #12]
 800460a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a17      	ldr	r2, [pc, #92]	; (8004670 <HAL_SPI_MspInit+0x7c>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d128      	bne.n	8004668 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004616:	4b17      	ldr	r3, [pc, #92]	; (8004674 <HAL_SPI_MspInit+0x80>)
 8004618:	699b      	ldr	r3, [r3, #24]
 800461a:	4a16      	ldr	r2, [pc, #88]	; (8004674 <HAL_SPI_MspInit+0x80>)
 800461c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004620:	6193      	str	r3, [r2, #24]
 8004622:	4b14      	ldr	r3, [pc, #80]	; (8004674 <HAL_SPI_MspInit+0x80>)
 8004624:	699b      	ldr	r3, [r3, #24]
 8004626:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800462a:	613b      	str	r3, [r7, #16]
 800462c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800462e:	4b11      	ldr	r3, [pc, #68]	; (8004674 <HAL_SPI_MspInit+0x80>)
 8004630:	695b      	ldr	r3, [r3, #20]
 8004632:	4a10      	ldr	r2, [pc, #64]	; (8004674 <HAL_SPI_MspInit+0x80>)
 8004634:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004638:	6153      	str	r3, [r2, #20]
 800463a:	4b0e      	ldr	r3, [pc, #56]	; (8004674 <HAL_SPI_MspInit+0x80>)
 800463c:	695b      	ldr	r3, [r3, #20]
 800463e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004642:	60fb      	str	r3, [r7, #12]
 8004644:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004646:	23e0      	movs	r3, #224	; 0xe0
 8004648:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800464a:	2302      	movs	r3, #2
 800464c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800464e:	2300      	movs	r3, #0
 8004650:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004652:	2303      	movs	r3, #3
 8004654:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004656:	2305      	movs	r3, #5
 8004658:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800465a:	f107 0314 	add.w	r3, r7, #20
 800465e:	4619      	mov	r1, r3
 8004660:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004664:	f7fc fd82 	bl	800116c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8004668:	bf00      	nop
 800466a:	3728      	adds	r7, #40	; 0x28
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}
 8004670:	40013000 	.word	0x40013000
 8004674:	40021000 	.word	0x40021000

08004678 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004678:	b480      	push	{r7}
 800467a:	b083      	sub	sp, #12
 800467c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800467e:	4b0f      	ldr	r3, [pc, #60]	; (80046bc <HAL_MspInit+0x44>)
 8004680:	699b      	ldr	r3, [r3, #24]
 8004682:	4a0e      	ldr	r2, [pc, #56]	; (80046bc <HAL_MspInit+0x44>)
 8004684:	f043 0301 	orr.w	r3, r3, #1
 8004688:	6193      	str	r3, [r2, #24]
 800468a:	4b0c      	ldr	r3, [pc, #48]	; (80046bc <HAL_MspInit+0x44>)
 800468c:	699b      	ldr	r3, [r3, #24]
 800468e:	f003 0301 	and.w	r3, r3, #1
 8004692:	607b      	str	r3, [r7, #4]
 8004694:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004696:	4b09      	ldr	r3, [pc, #36]	; (80046bc <HAL_MspInit+0x44>)
 8004698:	69db      	ldr	r3, [r3, #28]
 800469a:	4a08      	ldr	r2, [pc, #32]	; (80046bc <HAL_MspInit+0x44>)
 800469c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046a0:	61d3      	str	r3, [r2, #28]
 80046a2:	4b06      	ldr	r3, [pc, #24]	; (80046bc <HAL_MspInit+0x44>)
 80046a4:	69db      	ldr	r3, [r3, #28]
 80046a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046aa:	603b      	str	r3, [r7, #0]
 80046ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80046ae:	bf00      	nop
 80046b0:	370c      	adds	r7, #12
 80046b2:	46bd      	mov	sp, r7
 80046b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b8:	4770      	bx	lr
 80046ba:	bf00      	nop
 80046bc:	40021000 	.word	0x40021000

080046c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80046c0:	b480      	push	{r7}
 80046c2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80046c4:	bf00      	nop
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr

080046ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80046ce:	b480      	push	{r7}
 80046d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80046d2:	e7fe      	b.n	80046d2 <HardFault_Handler+0x4>

080046d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80046d4:	b480      	push	{r7}
 80046d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80046d8:	e7fe      	b.n	80046d8 <MemManage_Handler+0x4>

080046da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80046da:	b480      	push	{r7}
 80046dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80046de:	e7fe      	b.n	80046de <BusFault_Handler+0x4>

080046e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80046e0:	b480      	push	{r7}
 80046e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80046e4:	e7fe      	b.n	80046e4 <UsageFault_Handler+0x4>

080046e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80046e6:	b480      	push	{r7}
 80046e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80046ea:	bf00      	nop
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr

080046f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80046f4:	b480      	push	{r7}
 80046f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80046f8:	bf00      	nop
 80046fa:	46bd      	mov	sp, r7
 80046fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004700:	4770      	bx	lr

08004702 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004702:	b480      	push	{r7}
 8004704:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004706:	bf00      	nop
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr

08004710 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004714:	f7fc fade 	bl	8000cd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004718:	bf00      	nop
 800471a:	bd80      	pop	{r7, pc}

0800471c <TIM6_DAC1_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC1 underrun error interrupts.
  */
void TIM6_DAC1_IRQHandler(void)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC1_IRQn 0 */

  /* USER CODE END TIM6_DAC1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004720:	4802      	ldr	r0, [pc, #8]	; (800472c <TIM6_DAC1_IRQHandler+0x10>)
 8004722:	f7fe fe11 	bl	8003348 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC1_IRQn 1 */

  /* USER CODE END TIM6_DAC1_IRQn 1 */
}
 8004726:	bf00      	nop
 8004728:	bd80      	pop	{r7, pc}
 800472a:	bf00      	nop
 800472c:	200002ec 	.word	0x200002ec

08004730 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b086      	sub	sp, #24
 8004734:	af00      	add	r7, sp, #0
 8004736:	60f8      	str	r0, [r7, #12]
 8004738:	60b9      	str	r1, [r7, #8]
 800473a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800473c:	2300      	movs	r3, #0
 800473e:	617b      	str	r3, [r7, #20]
 8004740:	e00a      	b.n	8004758 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004742:	f3af 8000 	nop.w
 8004746:	4601      	mov	r1, r0
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	1c5a      	adds	r2, r3, #1
 800474c:	60ba      	str	r2, [r7, #8]
 800474e:	b2ca      	uxtb	r2, r1
 8004750:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	3301      	adds	r3, #1
 8004756:	617b      	str	r3, [r7, #20]
 8004758:	697a      	ldr	r2, [r7, #20]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	429a      	cmp	r2, r3
 800475e:	dbf0      	blt.n	8004742 <_read+0x12>
	}

return len;
 8004760:	687b      	ldr	r3, [r7, #4]
}
 8004762:	4618      	mov	r0, r3
 8004764:	3718      	adds	r7, #24
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}

0800476a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800476a:	b580      	push	{r7, lr}
 800476c:	b086      	sub	sp, #24
 800476e:	af00      	add	r7, sp, #0
 8004770:	60f8      	str	r0, [r7, #12]
 8004772:	60b9      	str	r1, [r7, #8]
 8004774:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004776:	2300      	movs	r3, #0
 8004778:	617b      	str	r3, [r7, #20]
 800477a:	e009      	b.n	8004790 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	1c5a      	adds	r2, r3, #1
 8004780:	60ba      	str	r2, [r7, #8]
 8004782:	781b      	ldrb	r3, [r3, #0]
 8004784:	4618      	mov	r0, r3
 8004786:	f7ff fe1d 	bl	80043c4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	3301      	adds	r3, #1
 800478e:	617b      	str	r3, [r7, #20]
 8004790:	697a      	ldr	r2, [r7, #20]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	429a      	cmp	r2, r3
 8004796:	dbf1      	blt.n	800477c <_write+0x12>
	}
	return len;
 8004798:	687b      	ldr	r3, [r7, #4]
}
 800479a:	4618      	mov	r0, r3
 800479c:	3718      	adds	r7, #24
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}

080047a2 <_close>:

int _close(int file)
{
 80047a2:	b480      	push	{r7}
 80047a4:	b083      	sub	sp, #12
 80047a6:	af00      	add	r7, sp, #0
 80047a8:	6078      	str	r0, [r7, #4]
	return -1;
 80047aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	370c      	adds	r7, #12
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr

080047ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80047ba:	b480      	push	{r7}
 80047bc:	b083      	sub	sp, #12
 80047be:	af00      	add	r7, sp, #0
 80047c0:	6078      	str	r0, [r7, #4]
 80047c2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80047ca:	605a      	str	r2, [r3, #4]
	return 0;
 80047cc:	2300      	movs	r3, #0
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	370c      	adds	r7, #12
 80047d2:	46bd      	mov	sp, r7
 80047d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d8:	4770      	bx	lr

080047da <_isatty>:

int _isatty(int file)
{
 80047da:	b480      	push	{r7}
 80047dc:	b083      	sub	sp, #12
 80047de:	af00      	add	r7, sp, #0
 80047e0:	6078      	str	r0, [r7, #4]
	return 1;
 80047e2:	2301      	movs	r3, #1
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	370c      	adds	r7, #12
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr

080047f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b085      	sub	sp, #20
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	60f8      	str	r0, [r7, #12]
 80047f8:	60b9      	str	r1, [r7, #8]
 80047fa:	607a      	str	r2, [r7, #4]
	return 0;
 80047fc:	2300      	movs	r3, #0
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3714      	adds	r7, #20
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr
	...

0800480c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b084      	sub	sp, #16
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004814:	4b11      	ldr	r3, [pc, #68]	; (800485c <_sbrk+0x50>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d102      	bne.n	8004822 <_sbrk+0x16>
		heap_end = &end;
 800481c:	4b0f      	ldr	r3, [pc, #60]	; (800485c <_sbrk+0x50>)
 800481e:	4a10      	ldr	r2, [pc, #64]	; (8004860 <_sbrk+0x54>)
 8004820:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8004822:	4b0e      	ldr	r3, [pc, #56]	; (800485c <_sbrk+0x50>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004828:	4b0c      	ldr	r3, [pc, #48]	; (800485c <_sbrk+0x50>)
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	4413      	add	r3, r2
 8004830:	466a      	mov	r2, sp
 8004832:	4293      	cmp	r3, r2
 8004834:	d907      	bls.n	8004846 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8004836:	f000 f959 	bl	8004aec <__errno>
 800483a:	4602      	mov	r2, r0
 800483c:	230c      	movs	r3, #12
 800483e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8004840:	f04f 33ff 	mov.w	r3, #4294967295
 8004844:	e006      	b.n	8004854 <_sbrk+0x48>
	}

	heap_end += incr;
 8004846:	4b05      	ldr	r3, [pc, #20]	; (800485c <_sbrk+0x50>)
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4413      	add	r3, r2
 800484e:	4a03      	ldr	r2, [pc, #12]	; (800485c <_sbrk+0x50>)
 8004850:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8004852:	68fb      	ldr	r3, [r7, #12]
}
 8004854:	4618      	mov	r0, r3
 8004856:	3710      	adds	r7, #16
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}
 800485c:	200001f8 	.word	0x200001f8
 8004860:	200003a0 	.word	0x200003a0

08004864 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004864:	b480      	push	{r7}
 8004866:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004868:	4b1f      	ldr	r3, [pc, #124]	; (80048e8 <SystemInit+0x84>)
 800486a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800486e:	4a1e      	ldr	r2, [pc, #120]	; (80048e8 <SystemInit+0x84>)
 8004870:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004874:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8004878:	4b1c      	ldr	r3, [pc, #112]	; (80048ec <SystemInit+0x88>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a1b      	ldr	r2, [pc, #108]	; (80048ec <SystemInit+0x88>)
 800487e:	f043 0301 	orr.w	r3, r3, #1
 8004882:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8004884:	4b19      	ldr	r3, [pc, #100]	; (80048ec <SystemInit+0x88>)
 8004886:	685a      	ldr	r2, [r3, #4]
 8004888:	4918      	ldr	r1, [pc, #96]	; (80048ec <SystemInit+0x88>)
 800488a:	4b19      	ldr	r3, [pc, #100]	; (80048f0 <SystemInit+0x8c>)
 800488c:	4013      	ands	r3, r2
 800488e:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8004890:	4b16      	ldr	r3, [pc, #88]	; (80048ec <SystemInit+0x88>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a15      	ldr	r2, [pc, #84]	; (80048ec <SystemInit+0x88>)
 8004896:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800489a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800489e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80048a0:	4b12      	ldr	r3, [pc, #72]	; (80048ec <SystemInit+0x88>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a11      	ldr	r2, [pc, #68]	; (80048ec <SystemInit+0x88>)
 80048a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048aa:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80048ac:	4b0f      	ldr	r3, [pc, #60]	; (80048ec <SystemInit+0x88>)
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	4a0e      	ldr	r2, [pc, #56]	; (80048ec <SystemInit+0x88>)
 80048b2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80048b6:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 80048b8:	4b0c      	ldr	r3, [pc, #48]	; (80048ec <SystemInit+0x88>)
 80048ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048bc:	4a0b      	ldr	r2, [pc, #44]	; (80048ec <SystemInit+0x88>)
 80048be:	f023 030f 	bic.w	r3, r3, #15
 80048c2:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 80048c4:	4b09      	ldr	r3, [pc, #36]	; (80048ec <SystemInit+0x88>)
 80048c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048c8:	4908      	ldr	r1, [pc, #32]	; (80048ec <SystemInit+0x88>)
 80048ca:	4b0a      	ldr	r3, [pc, #40]	; (80048f4 <SystemInit+0x90>)
 80048cc:	4013      	ands	r3, r2
 80048ce:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80048d0:	4b06      	ldr	r3, [pc, #24]	; (80048ec <SystemInit+0x88>)
 80048d2:	2200      	movs	r2, #0
 80048d4:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80048d6:	4b04      	ldr	r3, [pc, #16]	; (80048e8 <SystemInit+0x84>)
 80048d8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80048dc:	609a      	str	r2, [r3, #8]
#endif
}
 80048de:	bf00      	nop
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr
 80048e8:	e000ed00 	.word	0xe000ed00
 80048ec:	40021000 	.word	0x40021000
 80048f0:	f87fc00c 	.word	0xf87fc00c
 80048f4:	ff00fccc 	.word	0xff00fccc

080048f8 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b084      	sub	sp, #16
 80048fc:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80048fe:	1d3b      	adds	r3, r7, #4
 8004900:	2200      	movs	r2, #0
 8004902:	601a      	str	r2, [r3, #0]
 8004904:	605a      	str	r2, [r3, #4]
 8004906:	609a      	str	r2, [r3, #8]

  htim6.Instance = TIM6;
 8004908:	4b14      	ldr	r3, [pc, #80]	; (800495c <MX_TIM6_Init+0x64>)
 800490a:	4a15      	ldr	r2, [pc, #84]	; (8004960 <MX_TIM6_Init+0x68>)
 800490c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 64-1;
 800490e:	4b13      	ldr	r3, [pc, #76]	; (800495c <MX_TIM6_Init+0x64>)
 8004910:	223f      	movs	r2, #63	; 0x3f
 8004912:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004914:	4b11      	ldr	r3, [pc, #68]	; (800495c <MX_TIM6_Init+0x64>)
 8004916:	2200      	movs	r2, #0
 8004918:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 800491a:	4b10      	ldr	r3, [pc, #64]	; (800495c <MX_TIM6_Init+0x64>)
 800491c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004920:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004922:	4b0e      	ldr	r3, [pc, #56]	; (800495c <MX_TIM6_Init+0x64>)
 8004924:	2200      	movs	r2, #0
 8004926:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004928:	480c      	ldr	r0, [pc, #48]	; (800495c <MX_TIM6_Init+0x64>)
 800492a:	f7fe fcc7 	bl	80032bc <HAL_TIM_Base_Init>
 800492e:	4603      	mov	r3, r0
 8004930:	2b00      	cmp	r3, #0
 8004932:	d001      	beq.n	8004938 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8004934:	f7ff fe19 	bl	800456a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004938:	2300      	movs	r3, #0
 800493a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800493c:	2300      	movs	r3, #0
 800493e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004940:	1d3b      	adds	r3, r7, #4
 8004942:	4619      	mov	r1, r3
 8004944:	4805      	ldr	r0, [pc, #20]	; (800495c <MX_TIM6_Init+0x64>)
 8004946:	f7fe fec1 	bl	80036cc <HAL_TIMEx_MasterConfigSynchronization>
 800494a:	4603      	mov	r3, r0
 800494c:	2b00      	cmp	r3, #0
 800494e:	d001      	beq.n	8004954 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8004950:	f7ff fe0b 	bl	800456a <Error_Handler>
  }

}
 8004954:	bf00      	nop
 8004956:	3710      	adds	r7, #16
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}
 800495c:	200002ec 	.word	0x200002ec
 8004960:	40001000 	.word	0x40001000

08004964 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b084      	sub	sp, #16
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a0d      	ldr	r2, [pc, #52]	; (80049a8 <HAL_TIM_Base_MspInit+0x44>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d113      	bne.n	800499e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004976:	4b0d      	ldr	r3, [pc, #52]	; (80049ac <HAL_TIM_Base_MspInit+0x48>)
 8004978:	69db      	ldr	r3, [r3, #28]
 800497a:	4a0c      	ldr	r2, [pc, #48]	; (80049ac <HAL_TIM_Base_MspInit+0x48>)
 800497c:	f043 0310 	orr.w	r3, r3, #16
 8004980:	61d3      	str	r3, [r2, #28]
 8004982:	4b0a      	ldr	r3, [pc, #40]	; (80049ac <HAL_TIM_Base_MspInit+0x48>)
 8004984:	69db      	ldr	r3, [r3, #28]
 8004986:	f003 0310 	and.w	r3, r3, #16
 800498a:	60fb      	str	r3, [r7, #12]
 800498c:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, 1, 0);
 800498e:	2200      	movs	r2, #0
 8004990:	2101      	movs	r1, #1
 8004992:	2036      	movs	r0, #54	; 0x36
 8004994:	f7fc fbb3 	bl	80010fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 8004998:	2036      	movs	r0, #54	; 0x36
 800499a:	f7fc fbcc 	bl	8001136 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800499e:	bf00      	nop
 80049a0:	3710      	adds	r7, #16
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	bf00      	nop
 80049a8:	40001000 	.word	0x40001000
 80049ac:	40021000 	.word	0x40021000

080049b0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80049b4:	4b14      	ldr	r3, [pc, #80]	; (8004a08 <MX_USART2_UART_Init+0x58>)
 80049b6:	4a15      	ldr	r2, [pc, #84]	; (8004a0c <MX_USART2_UART_Init+0x5c>)
 80049b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80049ba:	4b13      	ldr	r3, [pc, #76]	; (8004a08 <MX_USART2_UART_Init+0x58>)
 80049bc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80049c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80049c2:	4b11      	ldr	r3, [pc, #68]	; (8004a08 <MX_USART2_UART_Init+0x58>)
 80049c4:	2200      	movs	r2, #0
 80049c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80049c8:	4b0f      	ldr	r3, [pc, #60]	; (8004a08 <MX_USART2_UART_Init+0x58>)
 80049ca:	2200      	movs	r2, #0
 80049cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80049ce:	4b0e      	ldr	r3, [pc, #56]	; (8004a08 <MX_USART2_UART_Init+0x58>)
 80049d0:	2200      	movs	r2, #0
 80049d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80049d4:	4b0c      	ldr	r3, [pc, #48]	; (8004a08 <MX_USART2_UART_Init+0x58>)
 80049d6:	220c      	movs	r2, #12
 80049d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80049da:	4b0b      	ldr	r3, [pc, #44]	; (8004a08 <MX_USART2_UART_Init+0x58>)
 80049dc:	2200      	movs	r2, #0
 80049de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80049e0:	4b09      	ldr	r3, [pc, #36]	; (8004a08 <MX_USART2_UART_Init+0x58>)
 80049e2:	2200      	movs	r2, #0
 80049e4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80049e6:	4b08      	ldr	r3, [pc, #32]	; (8004a08 <MX_USART2_UART_Init+0x58>)
 80049e8:	2200      	movs	r2, #0
 80049ea:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80049ec:	4b06      	ldr	r3, [pc, #24]	; (8004a08 <MX_USART2_UART_Init+0x58>)
 80049ee:	2200      	movs	r2, #0
 80049f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80049f2:	4805      	ldr	r0, [pc, #20]	; (8004a08 <MX_USART2_UART_Init+0x58>)
 80049f4:	f7fe fed6 	bl	80037a4 <HAL_UART_Init>
 80049f8:	4603      	mov	r3, r0
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d001      	beq.n	8004a02 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80049fe:	f7ff fdb4 	bl	800456a <Error_Handler>
  }

}
 8004a02:	bf00      	nop
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	bf00      	nop
 8004a08:	2000032c 	.word	0x2000032c
 8004a0c:	40004400 	.word	0x40004400

08004a10 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b08a      	sub	sp, #40	; 0x28
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a18:	f107 0314 	add.w	r3, r7, #20
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	601a      	str	r2, [r3, #0]
 8004a20:	605a      	str	r2, [r3, #4]
 8004a22:	609a      	str	r2, [r3, #8]
 8004a24:	60da      	str	r2, [r3, #12]
 8004a26:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a18      	ldr	r2, [pc, #96]	; (8004a90 <HAL_UART_MspInit+0x80>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d129      	bne.n	8004a86 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004a32:	4b18      	ldr	r3, [pc, #96]	; (8004a94 <HAL_UART_MspInit+0x84>)
 8004a34:	69db      	ldr	r3, [r3, #28]
 8004a36:	4a17      	ldr	r2, [pc, #92]	; (8004a94 <HAL_UART_MspInit+0x84>)
 8004a38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a3c:	61d3      	str	r3, [r2, #28]
 8004a3e:	4b15      	ldr	r3, [pc, #84]	; (8004a94 <HAL_UART_MspInit+0x84>)
 8004a40:	69db      	ldr	r3, [r3, #28]
 8004a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a46:	613b      	str	r3, [r7, #16]
 8004a48:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a4a:	4b12      	ldr	r3, [pc, #72]	; (8004a94 <HAL_UART_MspInit+0x84>)
 8004a4c:	695b      	ldr	r3, [r3, #20]
 8004a4e:	4a11      	ldr	r2, [pc, #68]	; (8004a94 <HAL_UART_MspInit+0x84>)
 8004a50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a54:	6153      	str	r3, [r2, #20]
 8004a56:	4b0f      	ldr	r3, [pc, #60]	; (8004a94 <HAL_UART_MspInit+0x84>)
 8004a58:	695b      	ldr	r3, [r3, #20]
 8004a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a5e:	60fb      	str	r3, [r7, #12]
 8004a60:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8004a62:	f248 0304 	movw	r3, #32772	; 0x8004
 8004a66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a68:	2302      	movs	r3, #2
 8004a6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004a70:	2303      	movs	r3, #3
 8004a72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004a74:	2307      	movs	r3, #7
 8004a76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a78:	f107 0314 	add.w	r3, r7, #20
 8004a7c:	4619      	mov	r1, r3
 8004a7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004a82:	f7fc fb73 	bl	800116c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8004a86:	bf00      	nop
 8004a88:	3728      	adds	r7, #40	; 0x28
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}
 8004a8e:	bf00      	nop
 8004a90:	40004400 	.word	0x40004400
 8004a94:	40021000 	.word	0x40021000

08004a98 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004a98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004ad0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8004a9c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8004a9e:	e003      	b.n	8004aa8 <LoopCopyDataInit>

08004aa0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8004aa0:	4b0c      	ldr	r3, [pc, #48]	; (8004ad4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8004aa2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004aa4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8004aa6:	3104      	adds	r1, #4

08004aa8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004aa8:	480b      	ldr	r0, [pc, #44]	; (8004ad8 <LoopForever+0xa>)
	ldr	r3, =_edata
 8004aaa:	4b0c      	ldr	r3, [pc, #48]	; (8004adc <LoopForever+0xe>)
	adds	r2, r0, r1
 8004aac:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8004aae:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8004ab0:	d3f6      	bcc.n	8004aa0 <CopyDataInit>
	ldr	r2, =_sbss
 8004ab2:	4a0b      	ldr	r2, [pc, #44]	; (8004ae0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8004ab4:	e002      	b.n	8004abc <LoopFillZerobss>

08004ab6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8004ab6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004ab8:	f842 3b04 	str.w	r3, [r2], #4

08004abc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8004abc:	4b09      	ldr	r3, [pc, #36]	; (8004ae4 <LoopForever+0x16>)
	cmp	r2, r3
 8004abe:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8004ac0:	d3f9      	bcc.n	8004ab6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004ac2:	f7ff fecf 	bl	8004864 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004ac6:	f000 f817 	bl	8004af8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004aca:	f7ff fce1 	bl	8004490 <main>

08004ace <LoopForever>:

LoopForever:
    b LoopForever
 8004ace:	e7fe      	b.n	8004ace <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004ad0:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8004ad4:	08007600 	.word	0x08007600
	ldr	r0, =_sdata
 8004ad8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8004adc:	200001dc 	.word	0x200001dc
	ldr	r2, =_sbss
 8004ae0:	200001dc 	.word	0x200001dc
	ldr	r3, = _ebss
 8004ae4:	200003a0 	.word	0x200003a0

08004ae8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004ae8:	e7fe      	b.n	8004ae8 <ADC1_2_IRQHandler>
	...

08004aec <__errno>:
 8004aec:	4b01      	ldr	r3, [pc, #4]	; (8004af4 <__errno+0x8>)
 8004aee:	6818      	ldr	r0, [r3, #0]
 8004af0:	4770      	bx	lr
 8004af2:	bf00      	nop
 8004af4:	2000000c 	.word	0x2000000c

08004af8 <__libc_init_array>:
 8004af8:	b570      	push	{r4, r5, r6, lr}
 8004afa:	4e0d      	ldr	r6, [pc, #52]	; (8004b30 <__libc_init_array+0x38>)
 8004afc:	4c0d      	ldr	r4, [pc, #52]	; (8004b34 <__libc_init_array+0x3c>)
 8004afe:	1ba4      	subs	r4, r4, r6
 8004b00:	10a4      	asrs	r4, r4, #2
 8004b02:	2500      	movs	r5, #0
 8004b04:	42a5      	cmp	r5, r4
 8004b06:	d109      	bne.n	8004b1c <__libc_init_array+0x24>
 8004b08:	4e0b      	ldr	r6, [pc, #44]	; (8004b38 <__libc_init_array+0x40>)
 8004b0a:	4c0c      	ldr	r4, [pc, #48]	; (8004b3c <__libc_init_array+0x44>)
 8004b0c:	f002 fbaa 	bl	8007264 <_init>
 8004b10:	1ba4      	subs	r4, r4, r6
 8004b12:	10a4      	asrs	r4, r4, #2
 8004b14:	2500      	movs	r5, #0
 8004b16:	42a5      	cmp	r5, r4
 8004b18:	d105      	bne.n	8004b26 <__libc_init_array+0x2e>
 8004b1a:	bd70      	pop	{r4, r5, r6, pc}
 8004b1c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004b20:	4798      	blx	r3
 8004b22:	3501      	adds	r5, #1
 8004b24:	e7ee      	b.n	8004b04 <__libc_init_array+0xc>
 8004b26:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004b2a:	4798      	blx	r3
 8004b2c:	3501      	adds	r5, #1
 8004b2e:	e7f2      	b.n	8004b16 <__libc_init_array+0x1e>
 8004b30:	080075f8 	.word	0x080075f8
 8004b34:	080075f8 	.word	0x080075f8
 8004b38:	080075f8 	.word	0x080075f8
 8004b3c:	080075fc 	.word	0x080075fc

08004b40 <memset>:
 8004b40:	4402      	add	r2, r0
 8004b42:	4603      	mov	r3, r0
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d100      	bne.n	8004b4a <memset+0xa>
 8004b48:	4770      	bx	lr
 8004b4a:	f803 1b01 	strb.w	r1, [r3], #1
 8004b4e:	e7f9      	b.n	8004b44 <memset+0x4>

08004b50 <__cvt>:
 8004b50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b54:	ec55 4b10 	vmov	r4, r5, d0
 8004b58:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8004b5a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004b5e:	2d00      	cmp	r5, #0
 8004b60:	460e      	mov	r6, r1
 8004b62:	4691      	mov	r9, r2
 8004b64:	4619      	mov	r1, r3
 8004b66:	bfb8      	it	lt
 8004b68:	4622      	movlt	r2, r4
 8004b6a:	462b      	mov	r3, r5
 8004b6c:	f027 0720 	bic.w	r7, r7, #32
 8004b70:	bfbb      	ittet	lt
 8004b72:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004b76:	461d      	movlt	r5, r3
 8004b78:	2300      	movge	r3, #0
 8004b7a:	232d      	movlt	r3, #45	; 0x2d
 8004b7c:	bfb8      	it	lt
 8004b7e:	4614      	movlt	r4, r2
 8004b80:	2f46      	cmp	r7, #70	; 0x46
 8004b82:	700b      	strb	r3, [r1, #0]
 8004b84:	d004      	beq.n	8004b90 <__cvt+0x40>
 8004b86:	2f45      	cmp	r7, #69	; 0x45
 8004b88:	d100      	bne.n	8004b8c <__cvt+0x3c>
 8004b8a:	3601      	adds	r6, #1
 8004b8c:	2102      	movs	r1, #2
 8004b8e:	e000      	b.n	8004b92 <__cvt+0x42>
 8004b90:	2103      	movs	r1, #3
 8004b92:	ab03      	add	r3, sp, #12
 8004b94:	9301      	str	r3, [sp, #4]
 8004b96:	ab02      	add	r3, sp, #8
 8004b98:	9300      	str	r3, [sp, #0]
 8004b9a:	4632      	mov	r2, r6
 8004b9c:	4653      	mov	r3, sl
 8004b9e:	ec45 4b10 	vmov	d0, r4, r5
 8004ba2:	f000 fdf9 	bl	8005798 <_dtoa_r>
 8004ba6:	2f47      	cmp	r7, #71	; 0x47
 8004ba8:	4680      	mov	r8, r0
 8004baa:	d102      	bne.n	8004bb2 <__cvt+0x62>
 8004bac:	f019 0f01 	tst.w	r9, #1
 8004bb0:	d026      	beq.n	8004c00 <__cvt+0xb0>
 8004bb2:	2f46      	cmp	r7, #70	; 0x46
 8004bb4:	eb08 0906 	add.w	r9, r8, r6
 8004bb8:	d111      	bne.n	8004bde <__cvt+0x8e>
 8004bba:	f898 3000 	ldrb.w	r3, [r8]
 8004bbe:	2b30      	cmp	r3, #48	; 0x30
 8004bc0:	d10a      	bne.n	8004bd8 <__cvt+0x88>
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	4620      	mov	r0, r4
 8004bc8:	4629      	mov	r1, r5
 8004bca:	f7fb ff7d 	bl	8000ac8 <__aeabi_dcmpeq>
 8004bce:	b918      	cbnz	r0, 8004bd8 <__cvt+0x88>
 8004bd0:	f1c6 0601 	rsb	r6, r6, #1
 8004bd4:	f8ca 6000 	str.w	r6, [sl]
 8004bd8:	f8da 3000 	ldr.w	r3, [sl]
 8004bdc:	4499      	add	r9, r3
 8004bde:	2200      	movs	r2, #0
 8004be0:	2300      	movs	r3, #0
 8004be2:	4620      	mov	r0, r4
 8004be4:	4629      	mov	r1, r5
 8004be6:	f7fb ff6f 	bl	8000ac8 <__aeabi_dcmpeq>
 8004bea:	b938      	cbnz	r0, 8004bfc <__cvt+0xac>
 8004bec:	2230      	movs	r2, #48	; 0x30
 8004bee:	9b03      	ldr	r3, [sp, #12]
 8004bf0:	454b      	cmp	r3, r9
 8004bf2:	d205      	bcs.n	8004c00 <__cvt+0xb0>
 8004bf4:	1c59      	adds	r1, r3, #1
 8004bf6:	9103      	str	r1, [sp, #12]
 8004bf8:	701a      	strb	r2, [r3, #0]
 8004bfa:	e7f8      	b.n	8004bee <__cvt+0x9e>
 8004bfc:	f8cd 900c 	str.w	r9, [sp, #12]
 8004c00:	9b03      	ldr	r3, [sp, #12]
 8004c02:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004c04:	eba3 0308 	sub.w	r3, r3, r8
 8004c08:	4640      	mov	r0, r8
 8004c0a:	6013      	str	r3, [r2, #0]
 8004c0c:	b004      	add	sp, #16
 8004c0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004c12 <__exponent>:
 8004c12:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c14:	2900      	cmp	r1, #0
 8004c16:	4604      	mov	r4, r0
 8004c18:	bfba      	itte	lt
 8004c1a:	4249      	neglt	r1, r1
 8004c1c:	232d      	movlt	r3, #45	; 0x2d
 8004c1e:	232b      	movge	r3, #43	; 0x2b
 8004c20:	2909      	cmp	r1, #9
 8004c22:	f804 2b02 	strb.w	r2, [r4], #2
 8004c26:	7043      	strb	r3, [r0, #1]
 8004c28:	dd20      	ble.n	8004c6c <__exponent+0x5a>
 8004c2a:	f10d 0307 	add.w	r3, sp, #7
 8004c2e:	461f      	mov	r7, r3
 8004c30:	260a      	movs	r6, #10
 8004c32:	fb91 f5f6 	sdiv	r5, r1, r6
 8004c36:	fb06 1115 	mls	r1, r6, r5, r1
 8004c3a:	3130      	adds	r1, #48	; 0x30
 8004c3c:	2d09      	cmp	r5, #9
 8004c3e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004c42:	f103 32ff 	add.w	r2, r3, #4294967295
 8004c46:	4629      	mov	r1, r5
 8004c48:	dc09      	bgt.n	8004c5e <__exponent+0x4c>
 8004c4a:	3130      	adds	r1, #48	; 0x30
 8004c4c:	3b02      	subs	r3, #2
 8004c4e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004c52:	42bb      	cmp	r3, r7
 8004c54:	4622      	mov	r2, r4
 8004c56:	d304      	bcc.n	8004c62 <__exponent+0x50>
 8004c58:	1a10      	subs	r0, r2, r0
 8004c5a:	b003      	add	sp, #12
 8004c5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c5e:	4613      	mov	r3, r2
 8004c60:	e7e7      	b.n	8004c32 <__exponent+0x20>
 8004c62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004c66:	f804 2b01 	strb.w	r2, [r4], #1
 8004c6a:	e7f2      	b.n	8004c52 <__exponent+0x40>
 8004c6c:	2330      	movs	r3, #48	; 0x30
 8004c6e:	4419      	add	r1, r3
 8004c70:	7083      	strb	r3, [r0, #2]
 8004c72:	1d02      	adds	r2, r0, #4
 8004c74:	70c1      	strb	r1, [r0, #3]
 8004c76:	e7ef      	b.n	8004c58 <__exponent+0x46>

08004c78 <_printf_float>:
 8004c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c7c:	b08d      	sub	sp, #52	; 0x34
 8004c7e:	460c      	mov	r4, r1
 8004c80:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8004c84:	4616      	mov	r6, r2
 8004c86:	461f      	mov	r7, r3
 8004c88:	4605      	mov	r5, r0
 8004c8a:	f001 fcb7 	bl	80065fc <_localeconv_r>
 8004c8e:	6803      	ldr	r3, [r0, #0]
 8004c90:	9304      	str	r3, [sp, #16]
 8004c92:	4618      	mov	r0, r3
 8004c94:	f7fb fa9c 	bl	80001d0 <strlen>
 8004c98:	2300      	movs	r3, #0
 8004c9a:	930a      	str	r3, [sp, #40]	; 0x28
 8004c9c:	f8d8 3000 	ldr.w	r3, [r8]
 8004ca0:	9005      	str	r0, [sp, #20]
 8004ca2:	3307      	adds	r3, #7
 8004ca4:	f023 0307 	bic.w	r3, r3, #7
 8004ca8:	f103 0208 	add.w	r2, r3, #8
 8004cac:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004cb0:	f8d4 b000 	ldr.w	fp, [r4]
 8004cb4:	f8c8 2000 	str.w	r2, [r8]
 8004cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cbc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004cc0:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004cc4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004cc8:	9307      	str	r3, [sp, #28]
 8004cca:	f8cd 8018 	str.w	r8, [sp, #24]
 8004cce:	f04f 32ff 	mov.w	r2, #4294967295
 8004cd2:	4ba7      	ldr	r3, [pc, #668]	; (8004f70 <_printf_float+0x2f8>)
 8004cd4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004cd8:	f7fb ff28 	bl	8000b2c <__aeabi_dcmpun>
 8004cdc:	bb70      	cbnz	r0, 8004d3c <_printf_float+0xc4>
 8004cde:	f04f 32ff 	mov.w	r2, #4294967295
 8004ce2:	4ba3      	ldr	r3, [pc, #652]	; (8004f70 <_printf_float+0x2f8>)
 8004ce4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004ce8:	f7fb ff02 	bl	8000af0 <__aeabi_dcmple>
 8004cec:	bb30      	cbnz	r0, 8004d3c <_printf_float+0xc4>
 8004cee:	2200      	movs	r2, #0
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	4640      	mov	r0, r8
 8004cf4:	4649      	mov	r1, r9
 8004cf6:	f7fb fef1 	bl	8000adc <__aeabi_dcmplt>
 8004cfa:	b110      	cbz	r0, 8004d02 <_printf_float+0x8a>
 8004cfc:	232d      	movs	r3, #45	; 0x2d
 8004cfe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d02:	4a9c      	ldr	r2, [pc, #624]	; (8004f74 <_printf_float+0x2fc>)
 8004d04:	4b9c      	ldr	r3, [pc, #624]	; (8004f78 <_printf_float+0x300>)
 8004d06:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8004d0a:	bf8c      	ite	hi
 8004d0c:	4690      	movhi	r8, r2
 8004d0e:	4698      	movls	r8, r3
 8004d10:	2303      	movs	r3, #3
 8004d12:	f02b 0204 	bic.w	r2, fp, #4
 8004d16:	6123      	str	r3, [r4, #16]
 8004d18:	6022      	str	r2, [r4, #0]
 8004d1a:	f04f 0900 	mov.w	r9, #0
 8004d1e:	9700      	str	r7, [sp, #0]
 8004d20:	4633      	mov	r3, r6
 8004d22:	aa0b      	add	r2, sp, #44	; 0x2c
 8004d24:	4621      	mov	r1, r4
 8004d26:	4628      	mov	r0, r5
 8004d28:	f000 f9e6 	bl	80050f8 <_printf_common>
 8004d2c:	3001      	adds	r0, #1
 8004d2e:	f040 808d 	bne.w	8004e4c <_printf_float+0x1d4>
 8004d32:	f04f 30ff 	mov.w	r0, #4294967295
 8004d36:	b00d      	add	sp, #52	; 0x34
 8004d38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d3c:	4642      	mov	r2, r8
 8004d3e:	464b      	mov	r3, r9
 8004d40:	4640      	mov	r0, r8
 8004d42:	4649      	mov	r1, r9
 8004d44:	f7fb fef2 	bl	8000b2c <__aeabi_dcmpun>
 8004d48:	b110      	cbz	r0, 8004d50 <_printf_float+0xd8>
 8004d4a:	4a8c      	ldr	r2, [pc, #560]	; (8004f7c <_printf_float+0x304>)
 8004d4c:	4b8c      	ldr	r3, [pc, #560]	; (8004f80 <_printf_float+0x308>)
 8004d4e:	e7da      	b.n	8004d06 <_printf_float+0x8e>
 8004d50:	6861      	ldr	r1, [r4, #4]
 8004d52:	1c4b      	adds	r3, r1, #1
 8004d54:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8004d58:	a80a      	add	r0, sp, #40	; 0x28
 8004d5a:	d13e      	bne.n	8004dda <_printf_float+0x162>
 8004d5c:	2306      	movs	r3, #6
 8004d5e:	6063      	str	r3, [r4, #4]
 8004d60:	2300      	movs	r3, #0
 8004d62:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8004d66:	ab09      	add	r3, sp, #36	; 0x24
 8004d68:	9300      	str	r3, [sp, #0]
 8004d6a:	ec49 8b10 	vmov	d0, r8, r9
 8004d6e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004d72:	6022      	str	r2, [r4, #0]
 8004d74:	f8cd a004 	str.w	sl, [sp, #4]
 8004d78:	6861      	ldr	r1, [r4, #4]
 8004d7a:	4628      	mov	r0, r5
 8004d7c:	f7ff fee8 	bl	8004b50 <__cvt>
 8004d80:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8004d84:	2b47      	cmp	r3, #71	; 0x47
 8004d86:	4680      	mov	r8, r0
 8004d88:	d109      	bne.n	8004d9e <_printf_float+0x126>
 8004d8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d8c:	1cd8      	adds	r0, r3, #3
 8004d8e:	db02      	blt.n	8004d96 <_printf_float+0x11e>
 8004d90:	6862      	ldr	r2, [r4, #4]
 8004d92:	4293      	cmp	r3, r2
 8004d94:	dd47      	ble.n	8004e26 <_printf_float+0x1ae>
 8004d96:	f1aa 0a02 	sub.w	sl, sl, #2
 8004d9a:	fa5f fa8a 	uxtb.w	sl, sl
 8004d9e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8004da2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004da4:	d824      	bhi.n	8004df0 <_printf_float+0x178>
 8004da6:	3901      	subs	r1, #1
 8004da8:	4652      	mov	r2, sl
 8004daa:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004dae:	9109      	str	r1, [sp, #36]	; 0x24
 8004db0:	f7ff ff2f 	bl	8004c12 <__exponent>
 8004db4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004db6:	1813      	adds	r3, r2, r0
 8004db8:	2a01      	cmp	r2, #1
 8004dba:	4681      	mov	r9, r0
 8004dbc:	6123      	str	r3, [r4, #16]
 8004dbe:	dc02      	bgt.n	8004dc6 <_printf_float+0x14e>
 8004dc0:	6822      	ldr	r2, [r4, #0]
 8004dc2:	07d1      	lsls	r1, r2, #31
 8004dc4:	d501      	bpl.n	8004dca <_printf_float+0x152>
 8004dc6:	3301      	adds	r3, #1
 8004dc8:	6123      	str	r3, [r4, #16]
 8004dca:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d0a5      	beq.n	8004d1e <_printf_float+0xa6>
 8004dd2:	232d      	movs	r3, #45	; 0x2d
 8004dd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004dd8:	e7a1      	b.n	8004d1e <_printf_float+0xa6>
 8004dda:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8004dde:	f000 8177 	beq.w	80050d0 <_printf_float+0x458>
 8004de2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8004de6:	d1bb      	bne.n	8004d60 <_printf_float+0xe8>
 8004de8:	2900      	cmp	r1, #0
 8004dea:	d1b9      	bne.n	8004d60 <_printf_float+0xe8>
 8004dec:	2301      	movs	r3, #1
 8004dee:	e7b6      	b.n	8004d5e <_printf_float+0xe6>
 8004df0:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8004df4:	d119      	bne.n	8004e2a <_printf_float+0x1b2>
 8004df6:	2900      	cmp	r1, #0
 8004df8:	6863      	ldr	r3, [r4, #4]
 8004dfa:	dd0c      	ble.n	8004e16 <_printf_float+0x19e>
 8004dfc:	6121      	str	r1, [r4, #16]
 8004dfe:	b913      	cbnz	r3, 8004e06 <_printf_float+0x18e>
 8004e00:	6822      	ldr	r2, [r4, #0]
 8004e02:	07d2      	lsls	r2, r2, #31
 8004e04:	d502      	bpl.n	8004e0c <_printf_float+0x194>
 8004e06:	3301      	adds	r3, #1
 8004e08:	440b      	add	r3, r1
 8004e0a:	6123      	str	r3, [r4, #16]
 8004e0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e0e:	65a3      	str	r3, [r4, #88]	; 0x58
 8004e10:	f04f 0900 	mov.w	r9, #0
 8004e14:	e7d9      	b.n	8004dca <_printf_float+0x152>
 8004e16:	b913      	cbnz	r3, 8004e1e <_printf_float+0x1a6>
 8004e18:	6822      	ldr	r2, [r4, #0]
 8004e1a:	07d0      	lsls	r0, r2, #31
 8004e1c:	d501      	bpl.n	8004e22 <_printf_float+0x1aa>
 8004e1e:	3302      	adds	r3, #2
 8004e20:	e7f3      	b.n	8004e0a <_printf_float+0x192>
 8004e22:	2301      	movs	r3, #1
 8004e24:	e7f1      	b.n	8004e0a <_printf_float+0x192>
 8004e26:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8004e2a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	db05      	blt.n	8004e3e <_printf_float+0x1c6>
 8004e32:	6822      	ldr	r2, [r4, #0]
 8004e34:	6123      	str	r3, [r4, #16]
 8004e36:	07d1      	lsls	r1, r2, #31
 8004e38:	d5e8      	bpl.n	8004e0c <_printf_float+0x194>
 8004e3a:	3301      	adds	r3, #1
 8004e3c:	e7e5      	b.n	8004e0a <_printf_float+0x192>
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	bfd4      	ite	le
 8004e42:	f1c3 0302 	rsble	r3, r3, #2
 8004e46:	2301      	movgt	r3, #1
 8004e48:	4413      	add	r3, r2
 8004e4a:	e7de      	b.n	8004e0a <_printf_float+0x192>
 8004e4c:	6823      	ldr	r3, [r4, #0]
 8004e4e:	055a      	lsls	r2, r3, #21
 8004e50:	d407      	bmi.n	8004e62 <_printf_float+0x1ea>
 8004e52:	6923      	ldr	r3, [r4, #16]
 8004e54:	4642      	mov	r2, r8
 8004e56:	4631      	mov	r1, r6
 8004e58:	4628      	mov	r0, r5
 8004e5a:	47b8      	blx	r7
 8004e5c:	3001      	adds	r0, #1
 8004e5e:	d12b      	bne.n	8004eb8 <_printf_float+0x240>
 8004e60:	e767      	b.n	8004d32 <_printf_float+0xba>
 8004e62:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8004e66:	f240 80dc 	bls.w	8005022 <_printf_float+0x3aa>
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004e72:	f7fb fe29 	bl	8000ac8 <__aeabi_dcmpeq>
 8004e76:	2800      	cmp	r0, #0
 8004e78:	d033      	beq.n	8004ee2 <_printf_float+0x26a>
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	4a41      	ldr	r2, [pc, #260]	; (8004f84 <_printf_float+0x30c>)
 8004e7e:	4631      	mov	r1, r6
 8004e80:	4628      	mov	r0, r5
 8004e82:	47b8      	blx	r7
 8004e84:	3001      	adds	r0, #1
 8004e86:	f43f af54 	beq.w	8004d32 <_printf_float+0xba>
 8004e8a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	db02      	blt.n	8004e98 <_printf_float+0x220>
 8004e92:	6823      	ldr	r3, [r4, #0]
 8004e94:	07d8      	lsls	r0, r3, #31
 8004e96:	d50f      	bpl.n	8004eb8 <_printf_float+0x240>
 8004e98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004e9c:	4631      	mov	r1, r6
 8004e9e:	4628      	mov	r0, r5
 8004ea0:	47b8      	blx	r7
 8004ea2:	3001      	adds	r0, #1
 8004ea4:	f43f af45 	beq.w	8004d32 <_printf_float+0xba>
 8004ea8:	f04f 0800 	mov.w	r8, #0
 8004eac:	f104 091a 	add.w	r9, r4, #26
 8004eb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004eb2:	3b01      	subs	r3, #1
 8004eb4:	4543      	cmp	r3, r8
 8004eb6:	dc09      	bgt.n	8004ecc <_printf_float+0x254>
 8004eb8:	6823      	ldr	r3, [r4, #0]
 8004eba:	079b      	lsls	r3, r3, #30
 8004ebc:	f100 8103 	bmi.w	80050c6 <_printf_float+0x44e>
 8004ec0:	68e0      	ldr	r0, [r4, #12]
 8004ec2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004ec4:	4298      	cmp	r0, r3
 8004ec6:	bfb8      	it	lt
 8004ec8:	4618      	movlt	r0, r3
 8004eca:	e734      	b.n	8004d36 <_printf_float+0xbe>
 8004ecc:	2301      	movs	r3, #1
 8004ece:	464a      	mov	r2, r9
 8004ed0:	4631      	mov	r1, r6
 8004ed2:	4628      	mov	r0, r5
 8004ed4:	47b8      	blx	r7
 8004ed6:	3001      	adds	r0, #1
 8004ed8:	f43f af2b 	beq.w	8004d32 <_printf_float+0xba>
 8004edc:	f108 0801 	add.w	r8, r8, #1
 8004ee0:	e7e6      	b.n	8004eb0 <_printf_float+0x238>
 8004ee2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	dc2b      	bgt.n	8004f40 <_printf_float+0x2c8>
 8004ee8:	2301      	movs	r3, #1
 8004eea:	4a26      	ldr	r2, [pc, #152]	; (8004f84 <_printf_float+0x30c>)
 8004eec:	4631      	mov	r1, r6
 8004eee:	4628      	mov	r0, r5
 8004ef0:	47b8      	blx	r7
 8004ef2:	3001      	adds	r0, #1
 8004ef4:	f43f af1d 	beq.w	8004d32 <_printf_float+0xba>
 8004ef8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004efa:	b923      	cbnz	r3, 8004f06 <_printf_float+0x28e>
 8004efc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004efe:	b913      	cbnz	r3, 8004f06 <_printf_float+0x28e>
 8004f00:	6823      	ldr	r3, [r4, #0]
 8004f02:	07d9      	lsls	r1, r3, #31
 8004f04:	d5d8      	bpl.n	8004eb8 <_printf_float+0x240>
 8004f06:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004f0a:	4631      	mov	r1, r6
 8004f0c:	4628      	mov	r0, r5
 8004f0e:	47b8      	blx	r7
 8004f10:	3001      	adds	r0, #1
 8004f12:	f43f af0e 	beq.w	8004d32 <_printf_float+0xba>
 8004f16:	f04f 0900 	mov.w	r9, #0
 8004f1a:	f104 0a1a 	add.w	sl, r4, #26
 8004f1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f20:	425b      	negs	r3, r3
 8004f22:	454b      	cmp	r3, r9
 8004f24:	dc01      	bgt.n	8004f2a <_printf_float+0x2b2>
 8004f26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f28:	e794      	b.n	8004e54 <_printf_float+0x1dc>
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	4652      	mov	r2, sl
 8004f2e:	4631      	mov	r1, r6
 8004f30:	4628      	mov	r0, r5
 8004f32:	47b8      	blx	r7
 8004f34:	3001      	adds	r0, #1
 8004f36:	f43f aefc 	beq.w	8004d32 <_printf_float+0xba>
 8004f3a:	f109 0901 	add.w	r9, r9, #1
 8004f3e:	e7ee      	b.n	8004f1e <_printf_float+0x2a6>
 8004f40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004f42:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004f44:	429a      	cmp	r2, r3
 8004f46:	bfa8      	it	ge
 8004f48:	461a      	movge	r2, r3
 8004f4a:	2a00      	cmp	r2, #0
 8004f4c:	4691      	mov	r9, r2
 8004f4e:	dd07      	ble.n	8004f60 <_printf_float+0x2e8>
 8004f50:	4613      	mov	r3, r2
 8004f52:	4631      	mov	r1, r6
 8004f54:	4642      	mov	r2, r8
 8004f56:	4628      	mov	r0, r5
 8004f58:	47b8      	blx	r7
 8004f5a:	3001      	adds	r0, #1
 8004f5c:	f43f aee9 	beq.w	8004d32 <_printf_float+0xba>
 8004f60:	f104 031a 	add.w	r3, r4, #26
 8004f64:	f04f 0b00 	mov.w	fp, #0
 8004f68:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004f6c:	9306      	str	r3, [sp, #24]
 8004f6e:	e015      	b.n	8004f9c <_printf_float+0x324>
 8004f70:	7fefffff 	.word	0x7fefffff
 8004f74:	0800733c 	.word	0x0800733c
 8004f78:	08007338 	.word	0x08007338
 8004f7c:	08007344 	.word	0x08007344
 8004f80:	08007340 	.word	0x08007340
 8004f84:	08007348 	.word	0x08007348
 8004f88:	2301      	movs	r3, #1
 8004f8a:	9a06      	ldr	r2, [sp, #24]
 8004f8c:	4631      	mov	r1, r6
 8004f8e:	4628      	mov	r0, r5
 8004f90:	47b8      	blx	r7
 8004f92:	3001      	adds	r0, #1
 8004f94:	f43f aecd 	beq.w	8004d32 <_printf_float+0xba>
 8004f98:	f10b 0b01 	add.w	fp, fp, #1
 8004f9c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004fa0:	ebaa 0309 	sub.w	r3, sl, r9
 8004fa4:	455b      	cmp	r3, fp
 8004fa6:	dcef      	bgt.n	8004f88 <_printf_float+0x310>
 8004fa8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004fac:	429a      	cmp	r2, r3
 8004fae:	44d0      	add	r8, sl
 8004fb0:	db15      	blt.n	8004fde <_printf_float+0x366>
 8004fb2:	6823      	ldr	r3, [r4, #0]
 8004fb4:	07da      	lsls	r2, r3, #31
 8004fb6:	d412      	bmi.n	8004fde <_printf_float+0x366>
 8004fb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004fba:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004fbc:	eba3 020a 	sub.w	r2, r3, sl
 8004fc0:	eba3 0a01 	sub.w	sl, r3, r1
 8004fc4:	4592      	cmp	sl, r2
 8004fc6:	bfa8      	it	ge
 8004fc8:	4692      	movge	sl, r2
 8004fca:	f1ba 0f00 	cmp.w	sl, #0
 8004fce:	dc0e      	bgt.n	8004fee <_printf_float+0x376>
 8004fd0:	f04f 0800 	mov.w	r8, #0
 8004fd4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004fd8:	f104 091a 	add.w	r9, r4, #26
 8004fdc:	e019      	b.n	8005012 <_printf_float+0x39a>
 8004fde:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004fe2:	4631      	mov	r1, r6
 8004fe4:	4628      	mov	r0, r5
 8004fe6:	47b8      	blx	r7
 8004fe8:	3001      	adds	r0, #1
 8004fea:	d1e5      	bne.n	8004fb8 <_printf_float+0x340>
 8004fec:	e6a1      	b.n	8004d32 <_printf_float+0xba>
 8004fee:	4653      	mov	r3, sl
 8004ff0:	4642      	mov	r2, r8
 8004ff2:	4631      	mov	r1, r6
 8004ff4:	4628      	mov	r0, r5
 8004ff6:	47b8      	blx	r7
 8004ff8:	3001      	adds	r0, #1
 8004ffa:	d1e9      	bne.n	8004fd0 <_printf_float+0x358>
 8004ffc:	e699      	b.n	8004d32 <_printf_float+0xba>
 8004ffe:	2301      	movs	r3, #1
 8005000:	464a      	mov	r2, r9
 8005002:	4631      	mov	r1, r6
 8005004:	4628      	mov	r0, r5
 8005006:	47b8      	blx	r7
 8005008:	3001      	adds	r0, #1
 800500a:	f43f ae92 	beq.w	8004d32 <_printf_float+0xba>
 800500e:	f108 0801 	add.w	r8, r8, #1
 8005012:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005016:	1a9b      	subs	r3, r3, r2
 8005018:	eba3 030a 	sub.w	r3, r3, sl
 800501c:	4543      	cmp	r3, r8
 800501e:	dcee      	bgt.n	8004ffe <_printf_float+0x386>
 8005020:	e74a      	b.n	8004eb8 <_printf_float+0x240>
 8005022:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005024:	2a01      	cmp	r2, #1
 8005026:	dc01      	bgt.n	800502c <_printf_float+0x3b4>
 8005028:	07db      	lsls	r3, r3, #31
 800502a:	d53a      	bpl.n	80050a2 <_printf_float+0x42a>
 800502c:	2301      	movs	r3, #1
 800502e:	4642      	mov	r2, r8
 8005030:	4631      	mov	r1, r6
 8005032:	4628      	mov	r0, r5
 8005034:	47b8      	blx	r7
 8005036:	3001      	adds	r0, #1
 8005038:	f43f ae7b 	beq.w	8004d32 <_printf_float+0xba>
 800503c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005040:	4631      	mov	r1, r6
 8005042:	4628      	mov	r0, r5
 8005044:	47b8      	blx	r7
 8005046:	3001      	adds	r0, #1
 8005048:	f108 0801 	add.w	r8, r8, #1
 800504c:	f43f ae71 	beq.w	8004d32 <_printf_float+0xba>
 8005050:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005052:	2200      	movs	r2, #0
 8005054:	f103 3aff 	add.w	sl, r3, #4294967295
 8005058:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800505c:	2300      	movs	r3, #0
 800505e:	f7fb fd33 	bl	8000ac8 <__aeabi_dcmpeq>
 8005062:	b9c8      	cbnz	r0, 8005098 <_printf_float+0x420>
 8005064:	4653      	mov	r3, sl
 8005066:	4642      	mov	r2, r8
 8005068:	4631      	mov	r1, r6
 800506a:	4628      	mov	r0, r5
 800506c:	47b8      	blx	r7
 800506e:	3001      	adds	r0, #1
 8005070:	d10e      	bne.n	8005090 <_printf_float+0x418>
 8005072:	e65e      	b.n	8004d32 <_printf_float+0xba>
 8005074:	2301      	movs	r3, #1
 8005076:	4652      	mov	r2, sl
 8005078:	4631      	mov	r1, r6
 800507a:	4628      	mov	r0, r5
 800507c:	47b8      	blx	r7
 800507e:	3001      	adds	r0, #1
 8005080:	f43f ae57 	beq.w	8004d32 <_printf_float+0xba>
 8005084:	f108 0801 	add.w	r8, r8, #1
 8005088:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800508a:	3b01      	subs	r3, #1
 800508c:	4543      	cmp	r3, r8
 800508e:	dcf1      	bgt.n	8005074 <_printf_float+0x3fc>
 8005090:	464b      	mov	r3, r9
 8005092:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005096:	e6de      	b.n	8004e56 <_printf_float+0x1de>
 8005098:	f04f 0800 	mov.w	r8, #0
 800509c:	f104 0a1a 	add.w	sl, r4, #26
 80050a0:	e7f2      	b.n	8005088 <_printf_float+0x410>
 80050a2:	2301      	movs	r3, #1
 80050a4:	e7df      	b.n	8005066 <_printf_float+0x3ee>
 80050a6:	2301      	movs	r3, #1
 80050a8:	464a      	mov	r2, r9
 80050aa:	4631      	mov	r1, r6
 80050ac:	4628      	mov	r0, r5
 80050ae:	47b8      	blx	r7
 80050b0:	3001      	adds	r0, #1
 80050b2:	f43f ae3e 	beq.w	8004d32 <_printf_float+0xba>
 80050b6:	f108 0801 	add.w	r8, r8, #1
 80050ba:	68e3      	ldr	r3, [r4, #12]
 80050bc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80050be:	1a9b      	subs	r3, r3, r2
 80050c0:	4543      	cmp	r3, r8
 80050c2:	dcf0      	bgt.n	80050a6 <_printf_float+0x42e>
 80050c4:	e6fc      	b.n	8004ec0 <_printf_float+0x248>
 80050c6:	f04f 0800 	mov.w	r8, #0
 80050ca:	f104 0919 	add.w	r9, r4, #25
 80050ce:	e7f4      	b.n	80050ba <_printf_float+0x442>
 80050d0:	2900      	cmp	r1, #0
 80050d2:	f43f ae8b 	beq.w	8004dec <_printf_float+0x174>
 80050d6:	2300      	movs	r3, #0
 80050d8:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80050dc:	ab09      	add	r3, sp, #36	; 0x24
 80050de:	9300      	str	r3, [sp, #0]
 80050e0:	ec49 8b10 	vmov	d0, r8, r9
 80050e4:	6022      	str	r2, [r4, #0]
 80050e6:	f8cd a004 	str.w	sl, [sp, #4]
 80050ea:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80050ee:	4628      	mov	r0, r5
 80050f0:	f7ff fd2e 	bl	8004b50 <__cvt>
 80050f4:	4680      	mov	r8, r0
 80050f6:	e648      	b.n	8004d8a <_printf_float+0x112>

080050f8 <_printf_common>:
 80050f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050fc:	4691      	mov	r9, r2
 80050fe:	461f      	mov	r7, r3
 8005100:	688a      	ldr	r2, [r1, #8]
 8005102:	690b      	ldr	r3, [r1, #16]
 8005104:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005108:	4293      	cmp	r3, r2
 800510a:	bfb8      	it	lt
 800510c:	4613      	movlt	r3, r2
 800510e:	f8c9 3000 	str.w	r3, [r9]
 8005112:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005116:	4606      	mov	r6, r0
 8005118:	460c      	mov	r4, r1
 800511a:	b112      	cbz	r2, 8005122 <_printf_common+0x2a>
 800511c:	3301      	adds	r3, #1
 800511e:	f8c9 3000 	str.w	r3, [r9]
 8005122:	6823      	ldr	r3, [r4, #0]
 8005124:	0699      	lsls	r1, r3, #26
 8005126:	bf42      	ittt	mi
 8005128:	f8d9 3000 	ldrmi.w	r3, [r9]
 800512c:	3302      	addmi	r3, #2
 800512e:	f8c9 3000 	strmi.w	r3, [r9]
 8005132:	6825      	ldr	r5, [r4, #0]
 8005134:	f015 0506 	ands.w	r5, r5, #6
 8005138:	d107      	bne.n	800514a <_printf_common+0x52>
 800513a:	f104 0a19 	add.w	sl, r4, #25
 800513e:	68e3      	ldr	r3, [r4, #12]
 8005140:	f8d9 2000 	ldr.w	r2, [r9]
 8005144:	1a9b      	subs	r3, r3, r2
 8005146:	42ab      	cmp	r3, r5
 8005148:	dc28      	bgt.n	800519c <_printf_common+0xa4>
 800514a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800514e:	6822      	ldr	r2, [r4, #0]
 8005150:	3300      	adds	r3, #0
 8005152:	bf18      	it	ne
 8005154:	2301      	movne	r3, #1
 8005156:	0692      	lsls	r2, r2, #26
 8005158:	d42d      	bmi.n	80051b6 <_printf_common+0xbe>
 800515a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800515e:	4639      	mov	r1, r7
 8005160:	4630      	mov	r0, r6
 8005162:	47c0      	blx	r8
 8005164:	3001      	adds	r0, #1
 8005166:	d020      	beq.n	80051aa <_printf_common+0xb2>
 8005168:	6823      	ldr	r3, [r4, #0]
 800516a:	68e5      	ldr	r5, [r4, #12]
 800516c:	f8d9 2000 	ldr.w	r2, [r9]
 8005170:	f003 0306 	and.w	r3, r3, #6
 8005174:	2b04      	cmp	r3, #4
 8005176:	bf08      	it	eq
 8005178:	1aad      	subeq	r5, r5, r2
 800517a:	68a3      	ldr	r3, [r4, #8]
 800517c:	6922      	ldr	r2, [r4, #16]
 800517e:	bf0c      	ite	eq
 8005180:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005184:	2500      	movne	r5, #0
 8005186:	4293      	cmp	r3, r2
 8005188:	bfc4      	itt	gt
 800518a:	1a9b      	subgt	r3, r3, r2
 800518c:	18ed      	addgt	r5, r5, r3
 800518e:	f04f 0900 	mov.w	r9, #0
 8005192:	341a      	adds	r4, #26
 8005194:	454d      	cmp	r5, r9
 8005196:	d11a      	bne.n	80051ce <_printf_common+0xd6>
 8005198:	2000      	movs	r0, #0
 800519a:	e008      	b.n	80051ae <_printf_common+0xb6>
 800519c:	2301      	movs	r3, #1
 800519e:	4652      	mov	r2, sl
 80051a0:	4639      	mov	r1, r7
 80051a2:	4630      	mov	r0, r6
 80051a4:	47c0      	blx	r8
 80051a6:	3001      	adds	r0, #1
 80051a8:	d103      	bne.n	80051b2 <_printf_common+0xba>
 80051aa:	f04f 30ff 	mov.w	r0, #4294967295
 80051ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051b2:	3501      	adds	r5, #1
 80051b4:	e7c3      	b.n	800513e <_printf_common+0x46>
 80051b6:	18e1      	adds	r1, r4, r3
 80051b8:	1c5a      	adds	r2, r3, #1
 80051ba:	2030      	movs	r0, #48	; 0x30
 80051bc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80051c0:	4422      	add	r2, r4
 80051c2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80051c6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80051ca:	3302      	adds	r3, #2
 80051cc:	e7c5      	b.n	800515a <_printf_common+0x62>
 80051ce:	2301      	movs	r3, #1
 80051d0:	4622      	mov	r2, r4
 80051d2:	4639      	mov	r1, r7
 80051d4:	4630      	mov	r0, r6
 80051d6:	47c0      	blx	r8
 80051d8:	3001      	adds	r0, #1
 80051da:	d0e6      	beq.n	80051aa <_printf_common+0xb2>
 80051dc:	f109 0901 	add.w	r9, r9, #1
 80051e0:	e7d8      	b.n	8005194 <_printf_common+0x9c>
	...

080051e4 <_printf_i>:
 80051e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80051e8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80051ec:	460c      	mov	r4, r1
 80051ee:	7e09      	ldrb	r1, [r1, #24]
 80051f0:	b085      	sub	sp, #20
 80051f2:	296e      	cmp	r1, #110	; 0x6e
 80051f4:	4617      	mov	r7, r2
 80051f6:	4606      	mov	r6, r0
 80051f8:	4698      	mov	r8, r3
 80051fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80051fc:	f000 80b3 	beq.w	8005366 <_printf_i+0x182>
 8005200:	d822      	bhi.n	8005248 <_printf_i+0x64>
 8005202:	2963      	cmp	r1, #99	; 0x63
 8005204:	d036      	beq.n	8005274 <_printf_i+0x90>
 8005206:	d80a      	bhi.n	800521e <_printf_i+0x3a>
 8005208:	2900      	cmp	r1, #0
 800520a:	f000 80b9 	beq.w	8005380 <_printf_i+0x19c>
 800520e:	2958      	cmp	r1, #88	; 0x58
 8005210:	f000 8083 	beq.w	800531a <_printf_i+0x136>
 8005214:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005218:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800521c:	e032      	b.n	8005284 <_printf_i+0xa0>
 800521e:	2964      	cmp	r1, #100	; 0x64
 8005220:	d001      	beq.n	8005226 <_printf_i+0x42>
 8005222:	2969      	cmp	r1, #105	; 0x69
 8005224:	d1f6      	bne.n	8005214 <_printf_i+0x30>
 8005226:	6820      	ldr	r0, [r4, #0]
 8005228:	6813      	ldr	r3, [r2, #0]
 800522a:	0605      	lsls	r5, r0, #24
 800522c:	f103 0104 	add.w	r1, r3, #4
 8005230:	d52a      	bpl.n	8005288 <_printf_i+0xa4>
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	6011      	str	r1, [r2, #0]
 8005236:	2b00      	cmp	r3, #0
 8005238:	da03      	bge.n	8005242 <_printf_i+0x5e>
 800523a:	222d      	movs	r2, #45	; 0x2d
 800523c:	425b      	negs	r3, r3
 800523e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005242:	486f      	ldr	r0, [pc, #444]	; (8005400 <_printf_i+0x21c>)
 8005244:	220a      	movs	r2, #10
 8005246:	e039      	b.n	80052bc <_printf_i+0xd8>
 8005248:	2973      	cmp	r1, #115	; 0x73
 800524a:	f000 809d 	beq.w	8005388 <_printf_i+0x1a4>
 800524e:	d808      	bhi.n	8005262 <_printf_i+0x7e>
 8005250:	296f      	cmp	r1, #111	; 0x6f
 8005252:	d020      	beq.n	8005296 <_printf_i+0xb2>
 8005254:	2970      	cmp	r1, #112	; 0x70
 8005256:	d1dd      	bne.n	8005214 <_printf_i+0x30>
 8005258:	6823      	ldr	r3, [r4, #0]
 800525a:	f043 0320 	orr.w	r3, r3, #32
 800525e:	6023      	str	r3, [r4, #0]
 8005260:	e003      	b.n	800526a <_printf_i+0x86>
 8005262:	2975      	cmp	r1, #117	; 0x75
 8005264:	d017      	beq.n	8005296 <_printf_i+0xb2>
 8005266:	2978      	cmp	r1, #120	; 0x78
 8005268:	d1d4      	bne.n	8005214 <_printf_i+0x30>
 800526a:	2378      	movs	r3, #120	; 0x78
 800526c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005270:	4864      	ldr	r0, [pc, #400]	; (8005404 <_printf_i+0x220>)
 8005272:	e055      	b.n	8005320 <_printf_i+0x13c>
 8005274:	6813      	ldr	r3, [r2, #0]
 8005276:	1d19      	adds	r1, r3, #4
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	6011      	str	r1, [r2, #0]
 800527c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005280:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005284:	2301      	movs	r3, #1
 8005286:	e08c      	b.n	80053a2 <_printf_i+0x1be>
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	6011      	str	r1, [r2, #0]
 800528c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005290:	bf18      	it	ne
 8005292:	b21b      	sxthne	r3, r3
 8005294:	e7cf      	b.n	8005236 <_printf_i+0x52>
 8005296:	6813      	ldr	r3, [r2, #0]
 8005298:	6825      	ldr	r5, [r4, #0]
 800529a:	1d18      	adds	r0, r3, #4
 800529c:	6010      	str	r0, [r2, #0]
 800529e:	0628      	lsls	r0, r5, #24
 80052a0:	d501      	bpl.n	80052a6 <_printf_i+0xc2>
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	e002      	b.n	80052ac <_printf_i+0xc8>
 80052a6:	0668      	lsls	r0, r5, #25
 80052a8:	d5fb      	bpl.n	80052a2 <_printf_i+0xbe>
 80052aa:	881b      	ldrh	r3, [r3, #0]
 80052ac:	4854      	ldr	r0, [pc, #336]	; (8005400 <_printf_i+0x21c>)
 80052ae:	296f      	cmp	r1, #111	; 0x6f
 80052b0:	bf14      	ite	ne
 80052b2:	220a      	movne	r2, #10
 80052b4:	2208      	moveq	r2, #8
 80052b6:	2100      	movs	r1, #0
 80052b8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80052bc:	6865      	ldr	r5, [r4, #4]
 80052be:	60a5      	str	r5, [r4, #8]
 80052c0:	2d00      	cmp	r5, #0
 80052c2:	f2c0 8095 	blt.w	80053f0 <_printf_i+0x20c>
 80052c6:	6821      	ldr	r1, [r4, #0]
 80052c8:	f021 0104 	bic.w	r1, r1, #4
 80052cc:	6021      	str	r1, [r4, #0]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d13d      	bne.n	800534e <_printf_i+0x16a>
 80052d2:	2d00      	cmp	r5, #0
 80052d4:	f040 808e 	bne.w	80053f4 <_printf_i+0x210>
 80052d8:	4665      	mov	r5, ip
 80052da:	2a08      	cmp	r2, #8
 80052dc:	d10b      	bne.n	80052f6 <_printf_i+0x112>
 80052de:	6823      	ldr	r3, [r4, #0]
 80052e0:	07db      	lsls	r3, r3, #31
 80052e2:	d508      	bpl.n	80052f6 <_printf_i+0x112>
 80052e4:	6923      	ldr	r3, [r4, #16]
 80052e6:	6862      	ldr	r2, [r4, #4]
 80052e8:	429a      	cmp	r2, r3
 80052ea:	bfde      	ittt	le
 80052ec:	2330      	movle	r3, #48	; 0x30
 80052ee:	f805 3c01 	strble.w	r3, [r5, #-1]
 80052f2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80052f6:	ebac 0305 	sub.w	r3, ip, r5
 80052fa:	6123      	str	r3, [r4, #16]
 80052fc:	f8cd 8000 	str.w	r8, [sp]
 8005300:	463b      	mov	r3, r7
 8005302:	aa03      	add	r2, sp, #12
 8005304:	4621      	mov	r1, r4
 8005306:	4630      	mov	r0, r6
 8005308:	f7ff fef6 	bl	80050f8 <_printf_common>
 800530c:	3001      	adds	r0, #1
 800530e:	d14d      	bne.n	80053ac <_printf_i+0x1c8>
 8005310:	f04f 30ff 	mov.w	r0, #4294967295
 8005314:	b005      	add	sp, #20
 8005316:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800531a:	4839      	ldr	r0, [pc, #228]	; (8005400 <_printf_i+0x21c>)
 800531c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005320:	6813      	ldr	r3, [r2, #0]
 8005322:	6821      	ldr	r1, [r4, #0]
 8005324:	1d1d      	adds	r5, r3, #4
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	6015      	str	r5, [r2, #0]
 800532a:	060a      	lsls	r2, r1, #24
 800532c:	d50b      	bpl.n	8005346 <_printf_i+0x162>
 800532e:	07ca      	lsls	r2, r1, #31
 8005330:	bf44      	itt	mi
 8005332:	f041 0120 	orrmi.w	r1, r1, #32
 8005336:	6021      	strmi	r1, [r4, #0]
 8005338:	b91b      	cbnz	r3, 8005342 <_printf_i+0x15e>
 800533a:	6822      	ldr	r2, [r4, #0]
 800533c:	f022 0220 	bic.w	r2, r2, #32
 8005340:	6022      	str	r2, [r4, #0]
 8005342:	2210      	movs	r2, #16
 8005344:	e7b7      	b.n	80052b6 <_printf_i+0xd2>
 8005346:	064d      	lsls	r5, r1, #25
 8005348:	bf48      	it	mi
 800534a:	b29b      	uxthmi	r3, r3
 800534c:	e7ef      	b.n	800532e <_printf_i+0x14a>
 800534e:	4665      	mov	r5, ip
 8005350:	fbb3 f1f2 	udiv	r1, r3, r2
 8005354:	fb02 3311 	mls	r3, r2, r1, r3
 8005358:	5cc3      	ldrb	r3, [r0, r3]
 800535a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800535e:	460b      	mov	r3, r1
 8005360:	2900      	cmp	r1, #0
 8005362:	d1f5      	bne.n	8005350 <_printf_i+0x16c>
 8005364:	e7b9      	b.n	80052da <_printf_i+0xf6>
 8005366:	6813      	ldr	r3, [r2, #0]
 8005368:	6825      	ldr	r5, [r4, #0]
 800536a:	6961      	ldr	r1, [r4, #20]
 800536c:	1d18      	adds	r0, r3, #4
 800536e:	6010      	str	r0, [r2, #0]
 8005370:	0628      	lsls	r0, r5, #24
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	d501      	bpl.n	800537a <_printf_i+0x196>
 8005376:	6019      	str	r1, [r3, #0]
 8005378:	e002      	b.n	8005380 <_printf_i+0x19c>
 800537a:	066a      	lsls	r2, r5, #25
 800537c:	d5fb      	bpl.n	8005376 <_printf_i+0x192>
 800537e:	8019      	strh	r1, [r3, #0]
 8005380:	2300      	movs	r3, #0
 8005382:	6123      	str	r3, [r4, #16]
 8005384:	4665      	mov	r5, ip
 8005386:	e7b9      	b.n	80052fc <_printf_i+0x118>
 8005388:	6813      	ldr	r3, [r2, #0]
 800538a:	1d19      	adds	r1, r3, #4
 800538c:	6011      	str	r1, [r2, #0]
 800538e:	681d      	ldr	r5, [r3, #0]
 8005390:	6862      	ldr	r2, [r4, #4]
 8005392:	2100      	movs	r1, #0
 8005394:	4628      	mov	r0, r5
 8005396:	f7fa ff23 	bl	80001e0 <memchr>
 800539a:	b108      	cbz	r0, 80053a0 <_printf_i+0x1bc>
 800539c:	1b40      	subs	r0, r0, r5
 800539e:	6060      	str	r0, [r4, #4]
 80053a0:	6863      	ldr	r3, [r4, #4]
 80053a2:	6123      	str	r3, [r4, #16]
 80053a4:	2300      	movs	r3, #0
 80053a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053aa:	e7a7      	b.n	80052fc <_printf_i+0x118>
 80053ac:	6923      	ldr	r3, [r4, #16]
 80053ae:	462a      	mov	r2, r5
 80053b0:	4639      	mov	r1, r7
 80053b2:	4630      	mov	r0, r6
 80053b4:	47c0      	blx	r8
 80053b6:	3001      	adds	r0, #1
 80053b8:	d0aa      	beq.n	8005310 <_printf_i+0x12c>
 80053ba:	6823      	ldr	r3, [r4, #0]
 80053bc:	079b      	lsls	r3, r3, #30
 80053be:	d413      	bmi.n	80053e8 <_printf_i+0x204>
 80053c0:	68e0      	ldr	r0, [r4, #12]
 80053c2:	9b03      	ldr	r3, [sp, #12]
 80053c4:	4298      	cmp	r0, r3
 80053c6:	bfb8      	it	lt
 80053c8:	4618      	movlt	r0, r3
 80053ca:	e7a3      	b.n	8005314 <_printf_i+0x130>
 80053cc:	2301      	movs	r3, #1
 80053ce:	464a      	mov	r2, r9
 80053d0:	4639      	mov	r1, r7
 80053d2:	4630      	mov	r0, r6
 80053d4:	47c0      	blx	r8
 80053d6:	3001      	adds	r0, #1
 80053d8:	d09a      	beq.n	8005310 <_printf_i+0x12c>
 80053da:	3501      	adds	r5, #1
 80053dc:	68e3      	ldr	r3, [r4, #12]
 80053de:	9a03      	ldr	r2, [sp, #12]
 80053e0:	1a9b      	subs	r3, r3, r2
 80053e2:	42ab      	cmp	r3, r5
 80053e4:	dcf2      	bgt.n	80053cc <_printf_i+0x1e8>
 80053e6:	e7eb      	b.n	80053c0 <_printf_i+0x1dc>
 80053e8:	2500      	movs	r5, #0
 80053ea:	f104 0919 	add.w	r9, r4, #25
 80053ee:	e7f5      	b.n	80053dc <_printf_i+0x1f8>
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d1ac      	bne.n	800534e <_printf_i+0x16a>
 80053f4:	7803      	ldrb	r3, [r0, #0]
 80053f6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80053fa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80053fe:	e76c      	b.n	80052da <_printf_i+0xf6>
 8005400:	0800734a 	.word	0x0800734a
 8005404:	0800735b 	.word	0x0800735b

08005408 <iprintf>:
 8005408:	b40f      	push	{r0, r1, r2, r3}
 800540a:	4b0a      	ldr	r3, [pc, #40]	; (8005434 <iprintf+0x2c>)
 800540c:	b513      	push	{r0, r1, r4, lr}
 800540e:	681c      	ldr	r4, [r3, #0]
 8005410:	b124      	cbz	r4, 800541c <iprintf+0x14>
 8005412:	69a3      	ldr	r3, [r4, #24]
 8005414:	b913      	cbnz	r3, 800541c <iprintf+0x14>
 8005416:	4620      	mov	r0, r4
 8005418:	f001 f866 	bl	80064e8 <__sinit>
 800541c:	ab05      	add	r3, sp, #20
 800541e:	9a04      	ldr	r2, [sp, #16]
 8005420:	68a1      	ldr	r1, [r4, #8]
 8005422:	9301      	str	r3, [sp, #4]
 8005424:	4620      	mov	r0, r4
 8005426:	f001 fd29 	bl	8006e7c <_vfiprintf_r>
 800542a:	b002      	add	sp, #8
 800542c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005430:	b004      	add	sp, #16
 8005432:	4770      	bx	lr
 8005434:	2000000c 	.word	0x2000000c

08005438 <_puts_r>:
 8005438:	b570      	push	{r4, r5, r6, lr}
 800543a:	460e      	mov	r6, r1
 800543c:	4605      	mov	r5, r0
 800543e:	b118      	cbz	r0, 8005448 <_puts_r+0x10>
 8005440:	6983      	ldr	r3, [r0, #24]
 8005442:	b90b      	cbnz	r3, 8005448 <_puts_r+0x10>
 8005444:	f001 f850 	bl	80064e8 <__sinit>
 8005448:	69ab      	ldr	r3, [r5, #24]
 800544a:	68ac      	ldr	r4, [r5, #8]
 800544c:	b913      	cbnz	r3, 8005454 <_puts_r+0x1c>
 800544e:	4628      	mov	r0, r5
 8005450:	f001 f84a 	bl	80064e8 <__sinit>
 8005454:	4b23      	ldr	r3, [pc, #140]	; (80054e4 <_puts_r+0xac>)
 8005456:	429c      	cmp	r4, r3
 8005458:	d117      	bne.n	800548a <_puts_r+0x52>
 800545a:	686c      	ldr	r4, [r5, #4]
 800545c:	89a3      	ldrh	r3, [r4, #12]
 800545e:	071b      	lsls	r3, r3, #28
 8005460:	d51d      	bpl.n	800549e <_puts_r+0x66>
 8005462:	6923      	ldr	r3, [r4, #16]
 8005464:	b1db      	cbz	r3, 800549e <_puts_r+0x66>
 8005466:	3e01      	subs	r6, #1
 8005468:	68a3      	ldr	r3, [r4, #8]
 800546a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800546e:	3b01      	subs	r3, #1
 8005470:	60a3      	str	r3, [r4, #8]
 8005472:	b9e9      	cbnz	r1, 80054b0 <_puts_r+0x78>
 8005474:	2b00      	cmp	r3, #0
 8005476:	da2e      	bge.n	80054d6 <_puts_r+0x9e>
 8005478:	4622      	mov	r2, r4
 800547a:	210a      	movs	r1, #10
 800547c:	4628      	mov	r0, r5
 800547e:	f000 f83f 	bl	8005500 <__swbuf_r>
 8005482:	3001      	adds	r0, #1
 8005484:	d011      	beq.n	80054aa <_puts_r+0x72>
 8005486:	200a      	movs	r0, #10
 8005488:	e011      	b.n	80054ae <_puts_r+0x76>
 800548a:	4b17      	ldr	r3, [pc, #92]	; (80054e8 <_puts_r+0xb0>)
 800548c:	429c      	cmp	r4, r3
 800548e:	d101      	bne.n	8005494 <_puts_r+0x5c>
 8005490:	68ac      	ldr	r4, [r5, #8]
 8005492:	e7e3      	b.n	800545c <_puts_r+0x24>
 8005494:	4b15      	ldr	r3, [pc, #84]	; (80054ec <_puts_r+0xb4>)
 8005496:	429c      	cmp	r4, r3
 8005498:	bf08      	it	eq
 800549a:	68ec      	ldreq	r4, [r5, #12]
 800549c:	e7de      	b.n	800545c <_puts_r+0x24>
 800549e:	4621      	mov	r1, r4
 80054a0:	4628      	mov	r0, r5
 80054a2:	f000 f87f 	bl	80055a4 <__swsetup_r>
 80054a6:	2800      	cmp	r0, #0
 80054a8:	d0dd      	beq.n	8005466 <_puts_r+0x2e>
 80054aa:	f04f 30ff 	mov.w	r0, #4294967295
 80054ae:	bd70      	pop	{r4, r5, r6, pc}
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	da04      	bge.n	80054be <_puts_r+0x86>
 80054b4:	69a2      	ldr	r2, [r4, #24]
 80054b6:	429a      	cmp	r2, r3
 80054b8:	dc06      	bgt.n	80054c8 <_puts_r+0x90>
 80054ba:	290a      	cmp	r1, #10
 80054bc:	d004      	beq.n	80054c8 <_puts_r+0x90>
 80054be:	6823      	ldr	r3, [r4, #0]
 80054c0:	1c5a      	adds	r2, r3, #1
 80054c2:	6022      	str	r2, [r4, #0]
 80054c4:	7019      	strb	r1, [r3, #0]
 80054c6:	e7cf      	b.n	8005468 <_puts_r+0x30>
 80054c8:	4622      	mov	r2, r4
 80054ca:	4628      	mov	r0, r5
 80054cc:	f000 f818 	bl	8005500 <__swbuf_r>
 80054d0:	3001      	adds	r0, #1
 80054d2:	d1c9      	bne.n	8005468 <_puts_r+0x30>
 80054d4:	e7e9      	b.n	80054aa <_puts_r+0x72>
 80054d6:	6823      	ldr	r3, [r4, #0]
 80054d8:	200a      	movs	r0, #10
 80054da:	1c5a      	adds	r2, r3, #1
 80054dc:	6022      	str	r2, [r4, #0]
 80054de:	7018      	strb	r0, [r3, #0]
 80054e0:	e7e5      	b.n	80054ae <_puts_r+0x76>
 80054e2:	bf00      	nop
 80054e4:	0800739c 	.word	0x0800739c
 80054e8:	080073bc 	.word	0x080073bc
 80054ec:	0800737c 	.word	0x0800737c

080054f0 <puts>:
 80054f0:	4b02      	ldr	r3, [pc, #8]	; (80054fc <puts+0xc>)
 80054f2:	4601      	mov	r1, r0
 80054f4:	6818      	ldr	r0, [r3, #0]
 80054f6:	f7ff bf9f 	b.w	8005438 <_puts_r>
 80054fa:	bf00      	nop
 80054fc:	2000000c 	.word	0x2000000c

08005500 <__swbuf_r>:
 8005500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005502:	460e      	mov	r6, r1
 8005504:	4614      	mov	r4, r2
 8005506:	4605      	mov	r5, r0
 8005508:	b118      	cbz	r0, 8005512 <__swbuf_r+0x12>
 800550a:	6983      	ldr	r3, [r0, #24]
 800550c:	b90b      	cbnz	r3, 8005512 <__swbuf_r+0x12>
 800550e:	f000 ffeb 	bl	80064e8 <__sinit>
 8005512:	4b21      	ldr	r3, [pc, #132]	; (8005598 <__swbuf_r+0x98>)
 8005514:	429c      	cmp	r4, r3
 8005516:	d12a      	bne.n	800556e <__swbuf_r+0x6e>
 8005518:	686c      	ldr	r4, [r5, #4]
 800551a:	69a3      	ldr	r3, [r4, #24]
 800551c:	60a3      	str	r3, [r4, #8]
 800551e:	89a3      	ldrh	r3, [r4, #12]
 8005520:	071a      	lsls	r2, r3, #28
 8005522:	d52e      	bpl.n	8005582 <__swbuf_r+0x82>
 8005524:	6923      	ldr	r3, [r4, #16]
 8005526:	b363      	cbz	r3, 8005582 <__swbuf_r+0x82>
 8005528:	6923      	ldr	r3, [r4, #16]
 800552a:	6820      	ldr	r0, [r4, #0]
 800552c:	1ac0      	subs	r0, r0, r3
 800552e:	6963      	ldr	r3, [r4, #20]
 8005530:	b2f6      	uxtb	r6, r6
 8005532:	4283      	cmp	r3, r0
 8005534:	4637      	mov	r7, r6
 8005536:	dc04      	bgt.n	8005542 <__swbuf_r+0x42>
 8005538:	4621      	mov	r1, r4
 800553a:	4628      	mov	r0, r5
 800553c:	f000 ff6a 	bl	8006414 <_fflush_r>
 8005540:	bb28      	cbnz	r0, 800558e <__swbuf_r+0x8e>
 8005542:	68a3      	ldr	r3, [r4, #8]
 8005544:	3b01      	subs	r3, #1
 8005546:	60a3      	str	r3, [r4, #8]
 8005548:	6823      	ldr	r3, [r4, #0]
 800554a:	1c5a      	adds	r2, r3, #1
 800554c:	6022      	str	r2, [r4, #0]
 800554e:	701e      	strb	r6, [r3, #0]
 8005550:	6963      	ldr	r3, [r4, #20]
 8005552:	3001      	adds	r0, #1
 8005554:	4283      	cmp	r3, r0
 8005556:	d004      	beq.n	8005562 <__swbuf_r+0x62>
 8005558:	89a3      	ldrh	r3, [r4, #12]
 800555a:	07db      	lsls	r3, r3, #31
 800555c:	d519      	bpl.n	8005592 <__swbuf_r+0x92>
 800555e:	2e0a      	cmp	r6, #10
 8005560:	d117      	bne.n	8005592 <__swbuf_r+0x92>
 8005562:	4621      	mov	r1, r4
 8005564:	4628      	mov	r0, r5
 8005566:	f000 ff55 	bl	8006414 <_fflush_r>
 800556a:	b190      	cbz	r0, 8005592 <__swbuf_r+0x92>
 800556c:	e00f      	b.n	800558e <__swbuf_r+0x8e>
 800556e:	4b0b      	ldr	r3, [pc, #44]	; (800559c <__swbuf_r+0x9c>)
 8005570:	429c      	cmp	r4, r3
 8005572:	d101      	bne.n	8005578 <__swbuf_r+0x78>
 8005574:	68ac      	ldr	r4, [r5, #8]
 8005576:	e7d0      	b.n	800551a <__swbuf_r+0x1a>
 8005578:	4b09      	ldr	r3, [pc, #36]	; (80055a0 <__swbuf_r+0xa0>)
 800557a:	429c      	cmp	r4, r3
 800557c:	bf08      	it	eq
 800557e:	68ec      	ldreq	r4, [r5, #12]
 8005580:	e7cb      	b.n	800551a <__swbuf_r+0x1a>
 8005582:	4621      	mov	r1, r4
 8005584:	4628      	mov	r0, r5
 8005586:	f000 f80d 	bl	80055a4 <__swsetup_r>
 800558a:	2800      	cmp	r0, #0
 800558c:	d0cc      	beq.n	8005528 <__swbuf_r+0x28>
 800558e:	f04f 37ff 	mov.w	r7, #4294967295
 8005592:	4638      	mov	r0, r7
 8005594:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005596:	bf00      	nop
 8005598:	0800739c 	.word	0x0800739c
 800559c:	080073bc 	.word	0x080073bc
 80055a0:	0800737c 	.word	0x0800737c

080055a4 <__swsetup_r>:
 80055a4:	4b32      	ldr	r3, [pc, #200]	; (8005670 <__swsetup_r+0xcc>)
 80055a6:	b570      	push	{r4, r5, r6, lr}
 80055a8:	681d      	ldr	r5, [r3, #0]
 80055aa:	4606      	mov	r6, r0
 80055ac:	460c      	mov	r4, r1
 80055ae:	b125      	cbz	r5, 80055ba <__swsetup_r+0x16>
 80055b0:	69ab      	ldr	r3, [r5, #24]
 80055b2:	b913      	cbnz	r3, 80055ba <__swsetup_r+0x16>
 80055b4:	4628      	mov	r0, r5
 80055b6:	f000 ff97 	bl	80064e8 <__sinit>
 80055ba:	4b2e      	ldr	r3, [pc, #184]	; (8005674 <__swsetup_r+0xd0>)
 80055bc:	429c      	cmp	r4, r3
 80055be:	d10f      	bne.n	80055e0 <__swsetup_r+0x3c>
 80055c0:	686c      	ldr	r4, [r5, #4]
 80055c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80055c6:	b29a      	uxth	r2, r3
 80055c8:	0715      	lsls	r5, r2, #28
 80055ca:	d42c      	bmi.n	8005626 <__swsetup_r+0x82>
 80055cc:	06d0      	lsls	r0, r2, #27
 80055ce:	d411      	bmi.n	80055f4 <__swsetup_r+0x50>
 80055d0:	2209      	movs	r2, #9
 80055d2:	6032      	str	r2, [r6, #0]
 80055d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055d8:	81a3      	strh	r3, [r4, #12]
 80055da:	f04f 30ff 	mov.w	r0, #4294967295
 80055de:	e03e      	b.n	800565e <__swsetup_r+0xba>
 80055e0:	4b25      	ldr	r3, [pc, #148]	; (8005678 <__swsetup_r+0xd4>)
 80055e2:	429c      	cmp	r4, r3
 80055e4:	d101      	bne.n	80055ea <__swsetup_r+0x46>
 80055e6:	68ac      	ldr	r4, [r5, #8]
 80055e8:	e7eb      	b.n	80055c2 <__swsetup_r+0x1e>
 80055ea:	4b24      	ldr	r3, [pc, #144]	; (800567c <__swsetup_r+0xd8>)
 80055ec:	429c      	cmp	r4, r3
 80055ee:	bf08      	it	eq
 80055f0:	68ec      	ldreq	r4, [r5, #12]
 80055f2:	e7e6      	b.n	80055c2 <__swsetup_r+0x1e>
 80055f4:	0751      	lsls	r1, r2, #29
 80055f6:	d512      	bpl.n	800561e <__swsetup_r+0x7a>
 80055f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80055fa:	b141      	cbz	r1, 800560e <__swsetup_r+0x6a>
 80055fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005600:	4299      	cmp	r1, r3
 8005602:	d002      	beq.n	800560a <__swsetup_r+0x66>
 8005604:	4630      	mov	r0, r6
 8005606:	f001 fb67 	bl	8006cd8 <_free_r>
 800560a:	2300      	movs	r3, #0
 800560c:	6363      	str	r3, [r4, #52]	; 0x34
 800560e:	89a3      	ldrh	r3, [r4, #12]
 8005610:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005614:	81a3      	strh	r3, [r4, #12]
 8005616:	2300      	movs	r3, #0
 8005618:	6063      	str	r3, [r4, #4]
 800561a:	6923      	ldr	r3, [r4, #16]
 800561c:	6023      	str	r3, [r4, #0]
 800561e:	89a3      	ldrh	r3, [r4, #12]
 8005620:	f043 0308 	orr.w	r3, r3, #8
 8005624:	81a3      	strh	r3, [r4, #12]
 8005626:	6923      	ldr	r3, [r4, #16]
 8005628:	b94b      	cbnz	r3, 800563e <__swsetup_r+0x9a>
 800562a:	89a3      	ldrh	r3, [r4, #12]
 800562c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005630:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005634:	d003      	beq.n	800563e <__swsetup_r+0x9a>
 8005636:	4621      	mov	r1, r4
 8005638:	4630      	mov	r0, r6
 800563a:	f001 f811 	bl	8006660 <__smakebuf_r>
 800563e:	89a2      	ldrh	r2, [r4, #12]
 8005640:	f012 0301 	ands.w	r3, r2, #1
 8005644:	d00c      	beq.n	8005660 <__swsetup_r+0xbc>
 8005646:	2300      	movs	r3, #0
 8005648:	60a3      	str	r3, [r4, #8]
 800564a:	6963      	ldr	r3, [r4, #20]
 800564c:	425b      	negs	r3, r3
 800564e:	61a3      	str	r3, [r4, #24]
 8005650:	6923      	ldr	r3, [r4, #16]
 8005652:	b953      	cbnz	r3, 800566a <__swsetup_r+0xc6>
 8005654:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005658:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800565c:	d1ba      	bne.n	80055d4 <__swsetup_r+0x30>
 800565e:	bd70      	pop	{r4, r5, r6, pc}
 8005660:	0792      	lsls	r2, r2, #30
 8005662:	bf58      	it	pl
 8005664:	6963      	ldrpl	r3, [r4, #20]
 8005666:	60a3      	str	r3, [r4, #8]
 8005668:	e7f2      	b.n	8005650 <__swsetup_r+0xac>
 800566a:	2000      	movs	r0, #0
 800566c:	e7f7      	b.n	800565e <__swsetup_r+0xba>
 800566e:	bf00      	nop
 8005670:	2000000c 	.word	0x2000000c
 8005674:	0800739c 	.word	0x0800739c
 8005678:	080073bc 	.word	0x080073bc
 800567c:	0800737c 	.word	0x0800737c

08005680 <quorem>:
 8005680:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005684:	6903      	ldr	r3, [r0, #16]
 8005686:	690c      	ldr	r4, [r1, #16]
 8005688:	42a3      	cmp	r3, r4
 800568a:	4680      	mov	r8, r0
 800568c:	f2c0 8082 	blt.w	8005794 <quorem+0x114>
 8005690:	3c01      	subs	r4, #1
 8005692:	f101 0714 	add.w	r7, r1, #20
 8005696:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800569a:	f100 0614 	add.w	r6, r0, #20
 800569e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80056a2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80056a6:	eb06 030c 	add.w	r3, r6, ip
 80056aa:	3501      	adds	r5, #1
 80056ac:	eb07 090c 	add.w	r9, r7, ip
 80056b0:	9301      	str	r3, [sp, #4]
 80056b2:	fbb0 f5f5 	udiv	r5, r0, r5
 80056b6:	b395      	cbz	r5, 800571e <quorem+0x9e>
 80056b8:	f04f 0a00 	mov.w	sl, #0
 80056bc:	4638      	mov	r0, r7
 80056be:	46b6      	mov	lr, r6
 80056c0:	46d3      	mov	fp, sl
 80056c2:	f850 2b04 	ldr.w	r2, [r0], #4
 80056c6:	b293      	uxth	r3, r2
 80056c8:	fb05 a303 	mla	r3, r5, r3, sl
 80056cc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80056d0:	b29b      	uxth	r3, r3
 80056d2:	ebab 0303 	sub.w	r3, fp, r3
 80056d6:	0c12      	lsrs	r2, r2, #16
 80056d8:	f8de b000 	ldr.w	fp, [lr]
 80056dc:	fb05 a202 	mla	r2, r5, r2, sl
 80056e0:	fa13 f38b 	uxtah	r3, r3, fp
 80056e4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80056e8:	fa1f fb82 	uxth.w	fp, r2
 80056ec:	f8de 2000 	ldr.w	r2, [lr]
 80056f0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80056f4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80056fe:	4581      	cmp	r9, r0
 8005700:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8005704:	f84e 3b04 	str.w	r3, [lr], #4
 8005708:	d2db      	bcs.n	80056c2 <quorem+0x42>
 800570a:	f856 300c 	ldr.w	r3, [r6, ip]
 800570e:	b933      	cbnz	r3, 800571e <quorem+0x9e>
 8005710:	9b01      	ldr	r3, [sp, #4]
 8005712:	3b04      	subs	r3, #4
 8005714:	429e      	cmp	r6, r3
 8005716:	461a      	mov	r2, r3
 8005718:	d330      	bcc.n	800577c <quorem+0xfc>
 800571a:	f8c8 4010 	str.w	r4, [r8, #16]
 800571e:	4640      	mov	r0, r8
 8005720:	f001 fa06 	bl	8006b30 <__mcmp>
 8005724:	2800      	cmp	r0, #0
 8005726:	db25      	blt.n	8005774 <quorem+0xf4>
 8005728:	3501      	adds	r5, #1
 800572a:	4630      	mov	r0, r6
 800572c:	f04f 0c00 	mov.w	ip, #0
 8005730:	f857 2b04 	ldr.w	r2, [r7], #4
 8005734:	f8d0 e000 	ldr.w	lr, [r0]
 8005738:	b293      	uxth	r3, r2
 800573a:	ebac 0303 	sub.w	r3, ip, r3
 800573e:	0c12      	lsrs	r2, r2, #16
 8005740:	fa13 f38e 	uxtah	r3, r3, lr
 8005744:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005748:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800574c:	b29b      	uxth	r3, r3
 800574e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005752:	45b9      	cmp	r9, r7
 8005754:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005758:	f840 3b04 	str.w	r3, [r0], #4
 800575c:	d2e8      	bcs.n	8005730 <quorem+0xb0>
 800575e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8005762:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8005766:	b92a      	cbnz	r2, 8005774 <quorem+0xf4>
 8005768:	3b04      	subs	r3, #4
 800576a:	429e      	cmp	r6, r3
 800576c:	461a      	mov	r2, r3
 800576e:	d30b      	bcc.n	8005788 <quorem+0x108>
 8005770:	f8c8 4010 	str.w	r4, [r8, #16]
 8005774:	4628      	mov	r0, r5
 8005776:	b003      	add	sp, #12
 8005778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800577c:	6812      	ldr	r2, [r2, #0]
 800577e:	3b04      	subs	r3, #4
 8005780:	2a00      	cmp	r2, #0
 8005782:	d1ca      	bne.n	800571a <quorem+0x9a>
 8005784:	3c01      	subs	r4, #1
 8005786:	e7c5      	b.n	8005714 <quorem+0x94>
 8005788:	6812      	ldr	r2, [r2, #0]
 800578a:	3b04      	subs	r3, #4
 800578c:	2a00      	cmp	r2, #0
 800578e:	d1ef      	bne.n	8005770 <quorem+0xf0>
 8005790:	3c01      	subs	r4, #1
 8005792:	e7ea      	b.n	800576a <quorem+0xea>
 8005794:	2000      	movs	r0, #0
 8005796:	e7ee      	b.n	8005776 <quorem+0xf6>

08005798 <_dtoa_r>:
 8005798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800579c:	ec57 6b10 	vmov	r6, r7, d0
 80057a0:	b097      	sub	sp, #92	; 0x5c
 80057a2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80057a4:	9106      	str	r1, [sp, #24]
 80057a6:	4604      	mov	r4, r0
 80057a8:	920b      	str	r2, [sp, #44]	; 0x2c
 80057aa:	9312      	str	r3, [sp, #72]	; 0x48
 80057ac:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80057b0:	e9cd 6700 	strd	r6, r7, [sp]
 80057b4:	b93d      	cbnz	r5, 80057c6 <_dtoa_r+0x2e>
 80057b6:	2010      	movs	r0, #16
 80057b8:	f000 ff92 	bl	80066e0 <malloc>
 80057bc:	6260      	str	r0, [r4, #36]	; 0x24
 80057be:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80057c2:	6005      	str	r5, [r0, #0]
 80057c4:	60c5      	str	r5, [r0, #12]
 80057c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80057c8:	6819      	ldr	r1, [r3, #0]
 80057ca:	b151      	cbz	r1, 80057e2 <_dtoa_r+0x4a>
 80057cc:	685a      	ldr	r2, [r3, #4]
 80057ce:	604a      	str	r2, [r1, #4]
 80057d0:	2301      	movs	r3, #1
 80057d2:	4093      	lsls	r3, r2
 80057d4:	608b      	str	r3, [r1, #8]
 80057d6:	4620      	mov	r0, r4
 80057d8:	f000 ffc9 	bl	800676e <_Bfree>
 80057dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80057de:	2200      	movs	r2, #0
 80057e0:	601a      	str	r2, [r3, #0]
 80057e2:	1e3b      	subs	r3, r7, #0
 80057e4:	bfbb      	ittet	lt
 80057e6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80057ea:	9301      	strlt	r3, [sp, #4]
 80057ec:	2300      	movge	r3, #0
 80057ee:	2201      	movlt	r2, #1
 80057f0:	bfac      	ite	ge
 80057f2:	f8c8 3000 	strge.w	r3, [r8]
 80057f6:	f8c8 2000 	strlt.w	r2, [r8]
 80057fa:	4baf      	ldr	r3, [pc, #700]	; (8005ab8 <_dtoa_r+0x320>)
 80057fc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005800:	ea33 0308 	bics.w	r3, r3, r8
 8005804:	d114      	bne.n	8005830 <_dtoa_r+0x98>
 8005806:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005808:	f242 730f 	movw	r3, #9999	; 0x270f
 800580c:	6013      	str	r3, [r2, #0]
 800580e:	9b00      	ldr	r3, [sp, #0]
 8005810:	b923      	cbnz	r3, 800581c <_dtoa_r+0x84>
 8005812:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8005816:	2800      	cmp	r0, #0
 8005818:	f000 8542 	beq.w	80062a0 <_dtoa_r+0xb08>
 800581c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800581e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8005acc <_dtoa_r+0x334>
 8005822:	2b00      	cmp	r3, #0
 8005824:	f000 8544 	beq.w	80062b0 <_dtoa_r+0xb18>
 8005828:	f10b 0303 	add.w	r3, fp, #3
 800582c:	f000 bd3e 	b.w	80062ac <_dtoa_r+0xb14>
 8005830:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005834:	2200      	movs	r2, #0
 8005836:	2300      	movs	r3, #0
 8005838:	4630      	mov	r0, r6
 800583a:	4639      	mov	r1, r7
 800583c:	f7fb f944 	bl	8000ac8 <__aeabi_dcmpeq>
 8005840:	4681      	mov	r9, r0
 8005842:	b168      	cbz	r0, 8005860 <_dtoa_r+0xc8>
 8005844:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005846:	2301      	movs	r3, #1
 8005848:	6013      	str	r3, [r2, #0]
 800584a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800584c:	2b00      	cmp	r3, #0
 800584e:	f000 8524 	beq.w	800629a <_dtoa_r+0xb02>
 8005852:	4b9a      	ldr	r3, [pc, #616]	; (8005abc <_dtoa_r+0x324>)
 8005854:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005856:	f103 3bff 	add.w	fp, r3, #4294967295
 800585a:	6013      	str	r3, [r2, #0]
 800585c:	f000 bd28 	b.w	80062b0 <_dtoa_r+0xb18>
 8005860:	aa14      	add	r2, sp, #80	; 0x50
 8005862:	a915      	add	r1, sp, #84	; 0x54
 8005864:	ec47 6b10 	vmov	d0, r6, r7
 8005868:	4620      	mov	r0, r4
 800586a:	f001 f9d8 	bl	8006c1e <__d2b>
 800586e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005872:	9004      	str	r0, [sp, #16]
 8005874:	2d00      	cmp	r5, #0
 8005876:	d07c      	beq.n	8005972 <_dtoa_r+0x1da>
 8005878:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800587c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8005880:	46b2      	mov	sl, r6
 8005882:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8005886:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800588a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800588e:	2200      	movs	r2, #0
 8005890:	4b8b      	ldr	r3, [pc, #556]	; (8005ac0 <_dtoa_r+0x328>)
 8005892:	4650      	mov	r0, sl
 8005894:	4659      	mov	r1, fp
 8005896:	f7fa fcf7 	bl	8000288 <__aeabi_dsub>
 800589a:	a381      	add	r3, pc, #516	; (adr r3, 8005aa0 <_dtoa_r+0x308>)
 800589c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058a0:	f7fa feaa 	bl	80005f8 <__aeabi_dmul>
 80058a4:	a380      	add	r3, pc, #512	; (adr r3, 8005aa8 <_dtoa_r+0x310>)
 80058a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058aa:	f7fa fcef 	bl	800028c <__adddf3>
 80058ae:	4606      	mov	r6, r0
 80058b0:	4628      	mov	r0, r5
 80058b2:	460f      	mov	r7, r1
 80058b4:	f7fa fe36 	bl	8000524 <__aeabi_i2d>
 80058b8:	a37d      	add	r3, pc, #500	; (adr r3, 8005ab0 <_dtoa_r+0x318>)
 80058ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058be:	f7fa fe9b 	bl	80005f8 <__aeabi_dmul>
 80058c2:	4602      	mov	r2, r0
 80058c4:	460b      	mov	r3, r1
 80058c6:	4630      	mov	r0, r6
 80058c8:	4639      	mov	r1, r7
 80058ca:	f7fa fcdf 	bl	800028c <__adddf3>
 80058ce:	4606      	mov	r6, r0
 80058d0:	460f      	mov	r7, r1
 80058d2:	f7fb f941 	bl	8000b58 <__aeabi_d2iz>
 80058d6:	2200      	movs	r2, #0
 80058d8:	4682      	mov	sl, r0
 80058da:	2300      	movs	r3, #0
 80058dc:	4630      	mov	r0, r6
 80058de:	4639      	mov	r1, r7
 80058e0:	f7fb f8fc 	bl	8000adc <__aeabi_dcmplt>
 80058e4:	b148      	cbz	r0, 80058fa <_dtoa_r+0x162>
 80058e6:	4650      	mov	r0, sl
 80058e8:	f7fa fe1c 	bl	8000524 <__aeabi_i2d>
 80058ec:	4632      	mov	r2, r6
 80058ee:	463b      	mov	r3, r7
 80058f0:	f7fb f8ea 	bl	8000ac8 <__aeabi_dcmpeq>
 80058f4:	b908      	cbnz	r0, 80058fa <_dtoa_r+0x162>
 80058f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80058fa:	f1ba 0f16 	cmp.w	sl, #22
 80058fe:	d859      	bhi.n	80059b4 <_dtoa_r+0x21c>
 8005900:	4970      	ldr	r1, [pc, #448]	; (8005ac4 <_dtoa_r+0x32c>)
 8005902:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8005906:	e9dd 2300 	ldrd	r2, r3, [sp]
 800590a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800590e:	f7fb f903 	bl	8000b18 <__aeabi_dcmpgt>
 8005912:	2800      	cmp	r0, #0
 8005914:	d050      	beq.n	80059b8 <_dtoa_r+0x220>
 8005916:	f10a 3aff 	add.w	sl, sl, #4294967295
 800591a:	2300      	movs	r3, #0
 800591c:	930f      	str	r3, [sp, #60]	; 0x3c
 800591e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005920:	1b5d      	subs	r5, r3, r5
 8005922:	f1b5 0801 	subs.w	r8, r5, #1
 8005926:	bf49      	itett	mi
 8005928:	f1c5 0301 	rsbmi	r3, r5, #1
 800592c:	2300      	movpl	r3, #0
 800592e:	9305      	strmi	r3, [sp, #20]
 8005930:	f04f 0800 	movmi.w	r8, #0
 8005934:	bf58      	it	pl
 8005936:	9305      	strpl	r3, [sp, #20]
 8005938:	f1ba 0f00 	cmp.w	sl, #0
 800593c:	db3e      	blt.n	80059bc <_dtoa_r+0x224>
 800593e:	2300      	movs	r3, #0
 8005940:	44d0      	add	r8, sl
 8005942:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8005946:	9307      	str	r3, [sp, #28]
 8005948:	9b06      	ldr	r3, [sp, #24]
 800594a:	2b09      	cmp	r3, #9
 800594c:	f200 8090 	bhi.w	8005a70 <_dtoa_r+0x2d8>
 8005950:	2b05      	cmp	r3, #5
 8005952:	bfc4      	itt	gt
 8005954:	3b04      	subgt	r3, #4
 8005956:	9306      	strgt	r3, [sp, #24]
 8005958:	9b06      	ldr	r3, [sp, #24]
 800595a:	f1a3 0302 	sub.w	r3, r3, #2
 800595e:	bfcc      	ite	gt
 8005960:	2500      	movgt	r5, #0
 8005962:	2501      	movle	r5, #1
 8005964:	2b03      	cmp	r3, #3
 8005966:	f200 808f 	bhi.w	8005a88 <_dtoa_r+0x2f0>
 800596a:	e8df f003 	tbb	[pc, r3]
 800596e:	7f7d      	.short	0x7f7d
 8005970:	7131      	.short	0x7131
 8005972:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8005976:	441d      	add	r5, r3
 8005978:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800597c:	2820      	cmp	r0, #32
 800597e:	dd13      	ble.n	80059a8 <_dtoa_r+0x210>
 8005980:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8005984:	9b00      	ldr	r3, [sp, #0]
 8005986:	fa08 f800 	lsl.w	r8, r8, r0
 800598a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800598e:	fa23 f000 	lsr.w	r0, r3, r0
 8005992:	ea48 0000 	orr.w	r0, r8, r0
 8005996:	f7fa fdb5 	bl	8000504 <__aeabi_ui2d>
 800599a:	2301      	movs	r3, #1
 800599c:	4682      	mov	sl, r0
 800599e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80059a2:	3d01      	subs	r5, #1
 80059a4:	9313      	str	r3, [sp, #76]	; 0x4c
 80059a6:	e772      	b.n	800588e <_dtoa_r+0xf6>
 80059a8:	9b00      	ldr	r3, [sp, #0]
 80059aa:	f1c0 0020 	rsb	r0, r0, #32
 80059ae:	fa03 f000 	lsl.w	r0, r3, r0
 80059b2:	e7f0      	b.n	8005996 <_dtoa_r+0x1fe>
 80059b4:	2301      	movs	r3, #1
 80059b6:	e7b1      	b.n	800591c <_dtoa_r+0x184>
 80059b8:	900f      	str	r0, [sp, #60]	; 0x3c
 80059ba:	e7b0      	b.n	800591e <_dtoa_r+0x186>
 80059bc:	9b05      	ldr	r3, [sp, #20]
 80059be:	eba3 030a 	sub.w	r3, r3, sl
 80059c2:	9305      	str	r3, [sp, #20]
 80059c4:	f1ca 0300 	rsb	r3, sl, #0
 80059c8:	9307      	str	r3, [sp, #28]
 80059ca:	2300      	movs	r3, #0
 80059cc:	930e      	str	r3, [sp, #56]	; 0x38
 80059ce:	e7bb      	b.n	8005948 <_dtoa_r+0x1b0>
 80059d0:	2301      	movs	r3, #1
 80059d2:	930a      	str	r3, [sp, #40]	; 0x28
 80059d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	dd59      	ble.n	8005a8e <_dtoa_r+0x2f6>
 80059da:	9302      	str	r3, [sp, #8]
 80059dc:	4699      	mov	r9, r3
 80059de:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80059e0:	2200      	movs	r2, #0
 80059e2:	6072      	str	r2, [r6, #4]
 80059e4:	2204      	movs	r2, #4
 80059e6:	f102 0014 	add.w	r0, r2, #20
 80059ea:	4298      	cmp	r0, r3
 80059ec:	6871      	ldr	r1, [r6, #4]
 80059ee:	d953      	bls.n	8005a98 <_dtoa_r+0x300>
 80059f0:	4620      	mov	r0, r4
 80059f2:	f000 fe88 	bl	8006706 <_Balloc>
 80059f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80059f8:	6030      	str	r0, [r6, #0]
 80059fa:	f1b9 0f0e 	cmp.w	r9, #14
 80059fe:	f8d3 b000 	ldr.w	fp, [r3]
 8005a02:	f200 80e6 	bhi.w	8005bd2 <_dtoa_r+0x43a>
 8005a06:	2d00      	cmp	r5, #0
 8005a08:	f000 80e3 	beq.w	8005bd2 <_dtoa_r+0x43a>
 8005a0c:	ed9d 7b00 	vldr	d7, [sp]
 8005a10:	f1ba 0f00 	cmp.w	sl, #0
 8005a14:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8005a18:	dd74      	ble.n	8005b04 <_dtoa_r+0x36c>
 8005a1a:	4a2a      	ldr	r2, [pc, #168]	; (8005ac4 <_dtoa_r+0x32c>)
 8005a1c:	f00a 030f 	and.w	r3, sl, #15
 8005a20:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005a24:	ed93 7b00 	vldr	d7, [r3]
 8005a28:	ea4f 162a 	mov.w	r6, sl, asr #4
 8005a2c:	06f0      	lsls	r0, r6, #27
 8005a2e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8005a32:	d565      	bpl.n	8005b00 <_dtoa_r+0x368>
 8005a34:	4b24      	ldr	r3, [pc, #144]	; (8005ac8 <_dtoa_r+0x330>)
 8005a36:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005a3a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005a3e:	f7fa ff05 	bl	800084c <__aeabi_ddiv>
 8005a42:	e9cd 0100 	strd	r0, r1, [sp]
 8005a46:	f006 060f 	and.w	r6, r6, #15
 8005a4a:	2503      	movs	r5, #3
 8005a4c:	4f1e      	ldr	r7, [pc, #120]	; (8005ac8 <_dtoa_r+0x330>)
 8005a4e:	e04c      	b.n	8005aea <_dtoa_r+0x352>
 8005a50:	2301      	movs	r3, #1
 8005a52:	930a      	str	r3, [sp, #40]	; 0x28
 8005a54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a56:	4453      	add	r3, sl
 8005a58:	f103 0901 	add.w	r9, r3, #1
 8005a5c:	9302      	str	r3, [sp, #8]
 8005a5e:	464b      	mov	r3, r9
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	bfb8      	it	lt
 8005a64:	2301      	movlt	r3, #1
 8005a66:	e7ba      	b.n	80059de <_dtoa_r+0x246>
 8005a68:	2300      	movs	r3, #0
 8005a6a:	e7b2      	b.n	80059d2 <_dtoa_r+0x23a>
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	e7f0      	b.n	8005a52 <_dtoa_r+0x2ba>
 8005a70:	2501      	movs	r5, #1
 8005a72:	2300      	movs	r3, #0
 8005a74:	9306      	str	r3, [sp, #24]
 8005a76:	950a      	str	r5, [sp, #40]	; 0x28
 8005a78:	f04f 33ff 	mov.w	r3, #4294967295
 8005a7c:	9302      	str	r3, [sp, #8]
 8005a7e:	4699      	mov	r9, r3
 8005a80:	2200      	movs	r2, #0
 8005a82:	2312      	movs	r3, #18
 8005a84:	920b      	str	r2, [sp, #44]	; 0x2c
 8005a86:	e7aa      	b.n	80059de <_dtoa_r+0x246>
 8005a88:	2301      	movs	r3, #1
 8005a8a:	930a      	str	r3, [sp, #40]	; 0x28
 8005a8c:	e7f4      	b.n	8005a78 <_dtoa_r+0x2e0>
 8005a8e:	2301      	movs	r3, #1
 8005a90:	9302      	str	r3, [sp, #8]
 8005a92:	4699      	mov	r9, r3
 8005a94:	461a      	mov	r2, r3
 8005a96:	e7f5      	b.n	8005a84 <_dtoa_r+0x2ec>
 8005a98:	3101      	adds	r1, #1
 8005a9a:	6071      	str	r1, [r6, #4]
 8005a9c:	0052      	lsls	r2, r2, #1
 8005a9e:	e7a2      	b.n	80059e6 <_dtoa_r+0x24e>
 8005aa0:	636f4361 	.word	0x636f4361
 8005aa4:	3fd287a7 	.word	0x3fd287a7
 8005aa8:	8b60c8b3 	.word	0x8b60c8b3
 8005aac:	3fc68a28 	.word	0x3fc68a28
 8005ab0:	509f79fb 	.word	0x509f79fb
 8005ab4:	3fd34413 	.word	0x3fd34413
 8005ab8:	7ff00000 	.word	0x7ff00000
 8005abc:	08007349 	.word	0x08007349
 8005ac0:	3ff80000 	.word	0x3ff80000
 8005ac4:	08007408 	.word	0x08007408
 8005ac8:	080073e0 	.word	0x080073e0
 8005acc:	08007375 	.word	0x08007375
 8005ad0:	07f1      	lsls	r1, r6, #31
 8005ad2:	d508      	bpl.n	8005ae6 <_dtoa_r+0x34e>
 8005ad4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005ad8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005adc:	f7fa fd8c 	bl	80005f8 <__aeabi_dmul>
 8005ae0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005ae4:	3501      	adds	r5, #1
 8005ae6:	1076      	asrs	r6, r6, #1
 8005ae8:	3708      	adds	r7, #8
 8005aea:	2e00      	cmp	r6, #0
 8005aec:	d1f0      	bne.n	8005ad0 <_dtoa_r+0x338>
 8005aee:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005af2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005af6:	f7fa fea9 	bl	800084c <__aeabi_ddiv>
 8005afa:	e9cd 0100 	strd	r0, r1, [sp]
 8005afe:	e01a      	b.n	8005b36 <_dtoa_r+0x39e>
 8005b00:	2502      	movs	r5, #2
 8005b02:	e7a3      	b.n	8005a4c <_dtoa_r+0x2b4>
 8005b04:	f000 80a0 	beq.w	8005c48 <_dtoa_r+0x4b0>
 8005b08:	f1ca 0600 	rsb	r6, sl, #0
 8005b0c:	4b9f      	ldr	r3, [pc, #636]	; (8005d8c <_dtoa_r+0x5f4>)
 8005b0e:	4fa0      	ldr	r7, [pc, #640]	; (8005d90 <_dtoa_r+0x5f8>)
 8005b10:	f006 020f 	and.w	r2, r6, #15
 8005b14:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b1c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005b20:	f7fa fd6a 	bl	80005f8 <__aeabi_dmul>
 8005b24:	e9cd 0100 	strd	r0, r1, [sp]
 8005b28:	1136      	asrs	r6, r6, #4
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	2502      	movs	r5, #2
 8005b2e:	2e00      	cmp	r6, #0
 8005b30:	d17f      	bne.n	8005c32 <_dtoa_r+0x49a>
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d1e1      	bne.n	8005afa <_dtoa_r+0x362>
 8005b36:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	f000 8087 	beq.w	8005c4c <_dtoa_r+0x4b4>
 8005b3e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005b42:	2200      	movs	r2, #0
 8005b44:	4b93      	ldr	r3, [pc, #588]	; (8005d94 <_dtoa_r+0x5fc>)
 8005b46:	4630      	mov	r0, r6
 8005b48:	4639      	mov	r1, r7
 8005b4a:	f7fa ffc7 	bl	8000adc <__aeabi_dcmplt>
 8005b4e:	2800      	cmp	r0, #0
 8005b50:	d07c      	beq.n	8005c4c <_dtoa_r+0x4b4>
 8005b52:	f1b9 0f00 	cmp.w	r9, #0
 8005b56:	d079      	beq.n	8005c4c <_dtoa_r+0x4b4>
 8005b58:	9b02      	ldr	r3, [sp, #8]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	dd35      	ble.n	8005bca <_dtoa_r+0x432>
 8005b5e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005b62:	9308      	str	r3, [sp, #32]
 8005b64:	4639      	mov	r1, r7
 8005b66:	2200      	movs	r2, #0
 8005b68:	4b8b      	ldr	r3, [pc, #556]	; (8005d98 <_dtoa_r+0x600>)
 8005b6a:	4630      	mov	r0, r6
 8005b6c:	f7fa fd44 	bl	80005f8 <__aeabi_dmul>
 8005b70:	e9cd 0100 	strd	r0, r1, [sp]
 8005b74:	9f02      	ldr	r7, [sp, #8]
 8005b76:	3501      	adds	r5, #1
 8005b78:	4628      	mov	r0, r5
 8005b7a:	f7fa fcd3 	bl	8000524 <__aeabi_i2d>
 8005b7e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005b82:	f7fa fd39 	bl	80005f8 <__aeabi_dmul>
 8005b86:	2200      	movs	r2, #0
 8005b88:	4b84      	ldr	r3, [pc, #528]	; (8005d9c <_dtoa_r+0x604>)
 8005b8a:	f7fa fb7f 	bl	800028c <__adddf3>
 8005b8e:	4605      	mov	r5, r0
 8005b90:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005b94:	2f00      	cmp	r7, #0
 8005b96:	d15d      	bne.n	8005c54 <_dtoa_r+0x4bc>
 8005b98:	2200      	movs	r2, #0
 8005b9a:	4b81      	ldr	r3, [pc, #516]	; (8005da0 <_dtoa_r+0x608>)
 8005b9c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005ba0:	f7fa fb72 	bl	8000288 <__aeabi_dsub>
 8005ba4:	462a      	mov	r2, r5
 8005ba6:	4633      	mov	r3, r6
 8005ba8:	e9cd 0100 	strd	r0, r1, [sp]
 8005bac:	f7fa ffb4 	bl	8000b18 <__aeabi_dcmpgt>
 8005bb0:	2800      	cmp	r0, #0
 8005bb2:	f040 8288 	bne.w	80060c6 <_dtoa_r+0x92e>
 8005bb6:	462a      	mov	r2, r5
 8005bb8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005bbc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005bc0:	f7fa ff8c 	bl	8000adc <__aeabi_dcmplt>
 8005bc4:	2800      	cmp	r0, #0
 8005bc6:	f040 827c 	bne.w	80060c2 <_dtoa_r+0x92a>
 8005bca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005bce:	e9cd 2300 	strd	r2, r3, [sp]
 8005bd2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	f2c0 8150 	blt.w	8005e7a <_dtoa_r+0x6e2>
 8005bda:	f1ba 0f0e 	cmp.w	sl, #14
 8005bde:	f300 814c 	bgt.w	8005e7a <_dtoa_r+0x6e2>
 8005be2:	4b6a      	ldr	r3, [pc, #424]	; (8005d8c <_dtoa_r+0x5f4>)
 8005be4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005be8:	ed93 7b00 	vldr	d7, [r3]
 8005bec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005bf4:	f280 80d8 	bge.w	8005da8 <_dtoa_r+0x610>
 8005bf8:	f1b9 0f00 	cmp.w	r9, #0
 8005bfc:	f300 80d4 	bgt.w	8005da8 <_dtoa_r+0x610>
 8005c00:	f040 825e 	bne.w	80060c0 <_dtoa_r+0x928>
 8005c04:	2200      	movs	r2, #0
 8005c06:	4b66      	ldr	r3, [pc, #408]	; (8005da0 <_dtoa_r+0x608>)
 8005c08:	ec51 0b17 	vmov	r0, r1, d7
 8005c0c:	f7fa fcf4 	bl	80005f8 <__aeabi_dmul>
 8005c10:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005c14:	f7fa ff76 	bl	8000b04 <__aeabi_dcmpge>
 8005c18:	464f      	mov	r7, r9
 8005c1a:	464e      	mov	r6, r9
 8005c1c:	2800      	cmp	r0, #0
 8005c1e:	f040 8234 	bne.w	800608a <_dtoa_r+0x8f2>
 8005c22:	2331      	movs	r3, #49	; 0x31
 8005c24:	f10b 0501 	add.w	r5, fp, #1
 8005c28:	f88b 3000 	strb.w	r3, [fp]
 8005c2c:	f10a 0a01 	add.w	sl, sl, #1
 8005c30:	e22f      	b.n	8006092 <_dtoa_r+0x8fa>
 8005c32:	07f2      	lsls	r2, r6, #31
 8005c34:	d505      	bpl.n	8005c42 <_dtoa_r+0x4aa>
 8005c36:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c3a:	f7fa fcdd 	bl	80005f8 <__aeabi_dmul>
 8005c3e:	3501      	adds	r5, #1
 8005c40:	2301      	movs	r3, #1
 8005c42:	1076      	asrs	r6, r6, #1
 8005c44:	3708      	adds	r7, #8
 8005c46:	e772      	b.n	8005b2e <_dtoa_r+0x396>
 8005c48:	2502      	movs	r5, #2
 8005c4a:	e774      	b.n	8005b36 <_dtoa_r+0x39e>
 8005c4c:	f8cd a020 	str.w	sl, [sp, #32]
 8005c50:	464f      	mov	r7, r9
 8005c52:	e791      	b.n	8005b78 <_dtoa_r+0x3e0>
 8005c54:	4b4d      	ldr	r3, [pc, #308]	; (8005d8c <_dtoa_r+0x5f4>)
 8005c56:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005c5a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8005c5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d047      	beq.n	8005cf4 <_dtoa_r+0x55c>
 8005c64:	4602      	mov	r2, r0
 8005c66:	460b      	mov	r3, r1
 8005c68:	2000      	movs	r0, #0
 8005c6a:	494e      	ldr	r1, [pc, #312]	; (8005da4 <_dtoa_r+0x60c>)
 8005c6c:	f7fa fdee 	bl	800084c <__aeabi_ddiv>
 8005c70:	462a      	mov	r2, r5
 8005c72:	4633      	mov	r3, r6
 8005c74:	f7fa fb08 	bl	8000288 <__aeabi_dsub>
 8005c78:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005c7c:	465d      	mov	r5, fp
 8005c7e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005c82:	f7fa ff69 	bl	8000b58 <__aeabi_d2iz>
 8005c86:	4606      	mov	r6, r0
 8005c88:	f7fa fc4c 	bl	8000524 <__aeabi_i2d>
 8005c8c:	4602      	mov	r2, r0
 8005c8e:	460b      	mov	r3, r1
 8005c90:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005c94:	f7fa faf8 	bl	8000288 <__aeabi_dsub>
 8005c98:	3630      	adds	r6, #48	; 0x30
 8005c9a:	f805 6b01 	strb.w	r6, [r5], #1
 8005c9e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005ca2:	e9cd 0100 	strd	r0, r1, [sp]
 8005ca6:	f7fa ff19 	bl	8000adc <__aeabi_dcmplt>
 8005caa:	2800      	cmp	r0, #0
 8005cac:	d163      	bne.n	8005d76 <_dtoa_r+0x5de>
 8005cae:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005cb2:	2000      	movs	r0, #0
 8005cb4:	4937      	ldr	r1, [pc, #220]	; (8005d94 <_dtoa_r+0x5fc>)
 8005cb6:	f7fa fae7 	bl	8000288 <__aeabi_dsub>
 8005cba:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005cbe:	f7fa ff0d 	bl	8000adc <__aeabi_dcmplt>
 8005cc2:	2800      	cmp	r0, #0
 8005cc4:	f040 80b7 	bne.w	8005e36 <_dtoa_r+0x69e>
 8005cc8:	eba5 030b 	sub.w	r3, r5, fp
 8005ccc:	429f      	cmp	r7, r3
 8005cce:	f77f af7c 	ble.w	8005bca <_dtoa_r+0x432>
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	4b30      	ldr	r3, [pc, #192]	; (8005d98 <_dtoa_r+0x600>)
 8005cd6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005cda:	f7fa fc8d 	bl	80005f8 <__aeabi_dmul>
 8005cde:	2200      	movs	r2, #0
 8005ce0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005ce4:	4b2c      	ldr	r3, [pc, #176]	; (8005d98 <_dtoa_r+0x600>)
 8005ce6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005cea:	f7fa fc85 	bl	80005f8 <__aeabi_dmul>
 8005cee:	e9cd 0100 	strd	r0, r1, [sp]
 8005cf2:	e7c4      	b.n	8005c7e <_dtoa_r+0x4e6>
 8005cf4:	462a      	mov	r2, r5
 8005cf6:	4633      	mov	r3, r6
 8005cf8:	f7fa fc7e 	bl	80005f8 <__aeabi_dmul>
 8005cfc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005d00:	eb0b 0507 	add.w	r5, fp, r7
 8005d04:	465e      	mov	r6, fp
 8005d06:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005d0a:	f7fa ff25 	bl	8000b58 <__aeabi_d2iz>
 8005d0e:	4607      	mov	r7, r0
 8005d10:	f7fa fc08 	bl	8000524 <__aeabi_i2d>
 8005d14:	3730      	adds	r7, #48	; 0x30
 8005d16:	4602      	mov	r2, r0
 8005d18:	460b      	mov	r3, r1
 8005d1a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005d1e:	f7fa fab3 	bl	8000288 <__aeabi_dsub>
 8005d22:	f806 7b01 	strb.w	r7, [r6], #1
 8005d26:	42ae      	cmp	r6, r5
 8005d28:	e9cd 0100 	strd	r0, r1, [sp]
 8005d2c:	f04f 0200 	mov.w	r2, #0
 8005d30:	d126      	bne.n	8005d80 <_dtoa_r+0x5e8>
 8005d32:	4b1c      	ldr	r3, [pc, #112]	; (8005da4 <_dtoa_r+0x60c>)
 8005d34:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005d38:	f7fa faa8 	bl	800028c <__adddf3>
 8005d3c:	4602      	mov	r2, r0
 8005d3e:	460b      	mov	r3, r1
 8005d40:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005d44:	f7fa fee8 	bl	8000b18 <__aeabi_dcmpgt>
 8005d48:	2800      	cmp	r0, #0
 8005d4a:	d174      	bne.n	8005e36 <_dtoa_r+0x69e>
 8005d4c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005d50:	2000      	movs	r0, #0
 8005d52:	4914      	ldr	r1, [pc, #80]	; (8005da4 <_dtoa_r+0x60c>)
 8005d54:	f7fa fa98 	bl	8000288 <__aeabi_dsub>
 8005d58:	4602      	mov	r2, r0
 8005d5a:	460b      	mov	r3, r1
 8005d5c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005d60:	f7fa febc 	bl	8000adc <__aeabi_dcmplt>
 8005d64:	2800      	cmp	r0, #0
 8005d66:	f43f af30 	beq.w	8005bca <_dtoa_r+0x432>
 8005d6a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005d6e:	2b30      	cmp	r3, #48	; 0x30
 8005d70:	f105 32ff 	add.w	r2, r5, #4294967295
 8005d74:	d002      	beq.n	8005d7c <_dtoa_r+0x5e4>
 8005d76:	f8dd a020 	ldr.w	sl, [sp, #32]
 8005d7a:	e04a      	b.n	8005e12 <_dtoa_r+0x67a>
 8005d7c:	4615      	mov	r5, r2
 8005d7e:	e7f4      	b.n	8005d6a <_dtoa_r+0x5d2>
 8005d80:	4b05      	ldr	r3, [pc, #20]	; (8005d98 <_dtoa_r+0x600>)
 8005d82:	f7fa fc39 	bl	80005f8 <__aeabi_dmul>
 8005d86:	e9cd 0100 	strd	r0, r1, [sp]
 8005d8a:	e7bc      	b.n	8005d06 <_dtoa_r+0x56e>
 8005d8c:	08007408 	.word	0x08007408
 8005d90:	080073e0 	.word	0x080073e0
 8005d94:	3ff00000 	.word	0x3ff00000
 8005d98:	40240000 	.word	0x40240000
 8005d9c:	401c0000 	.word	0x401c0000
 8005da0:	40140000 	.word	0x40140000
 8005da4:	3fe00000 	.word	0x3fe00000
 8005da8:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005dac:	465d      	mov	r5, fp
 8005dae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005db2:	4630      	mov	r0, r6
 8005db4:	4639      	mov	r1, r7
 8005db6:	f7fa fd49 	bl	800084c <__aeabi_ddiv>
 8005dba:	f7fa fecd 	bl	8000b58 <__aeabi_d2iz>
 8005dbe:	4680      	mov	r8, r0
 8005dc0:	f7fa fbb0 	bl	8000524 <__aeabi_i2d>
 8005dc4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005dc8:	f7fa fc16 	bl	80005f8 <__aeabi_dmul>
 8005dcc:	4602      	mov	r2, r0
 8005dce:	460b      	mov	r3, r1
 8005dd0:	4630      	mov	r0, r6
 8005dd2:	4639      	mov	r1, r7
 8005dd4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8005dd8:	f7fa fa56 	bl	8000288 <__aeabi_dsub>
 8005ddc:	f805 6b01 	strb.w	r6, [r5], #1
 8005de0:	eba5 060b 	sub.w	r6, r5, fp
 8005de4:	45b1      	cmp	r9, r6
 8005de6:	4602      	mov	r2, r0
 8005de8:	460b      	mov	r3, r1
 8005dea:	d139      	bne.n	8005e60 <_dtoa_r+0x6c8>
 8005dec:	f7fa fa4e 	bl	800028c <__adddf3>
 8005df0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005df4:	4606      	mov	r6, r0
 8005df6:	460f      	mov	r7, r1
 8005df8:	f7fa fe8e 	bl	8000b18 <__aeabi_dcmpgt>
 8005dfc:	b9c8      	cbnz	r0, 8005e32 <_dtoa_r+0x69a>
 8005dfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005e02:	4630      	mov	r0, r6
 8005e04:	4639      	mov	r1, r7
 8005e06:	f7fa fe5f 	bl	8000ac8 <__aeabi_dcmpeq>
 8005e0a:	b110      	cbz	r0, 8005e12 <_dtoa_r+0x67a>
 8005e0c:	f018 0f01 	tst.w	r8, #1
 8005e10:	d10f      	bne.n	8005e32 <_dtoa_r+0x69a>
 8005e12:	9904      	ldr	r1, [sp, #16]
 8005e14:	4620      	mov	r0, r4
 8005e16:	f000 fcaa 	bl	800676e <_Bfree>
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005e1e:	702b      	strb	r3, [r5, #0]
 8005e20:	f10a 0301 	add.w	r3, sl, #1
 8005e24:	6013      	str	r3, [r2, #0]
 8005e26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	f000 8241 	beq.w	80062b0 <_dtoa_r+0xb18>
 8005e2e:	601d      	str	r5, [r3, #0]
 8005e30:	e23e      	b.n	80062b0 <_dtoa_r+0xb18>
 8005e32:	f8cd a020 	str.w	sl, [sp, #32]
 8005e36:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005e3a:	2a39      	cmp	r2, #57	; 0x39
 8005e3c:	f105 33ff 	add.w	r3, r5, #4294967295
 8005e40:	d108      	bne.n	8005e54 <_dtoa_r+0x6bc>
 8005e42:	459b      	cmp	fp, r3
 8005e44:	d10a      	bne.n	8005e5c <_dtoa_r+0x6c4>
 8005e46:	9b08      	ldr	r3, [sp, #32]
 8005e48:	3301      	adds	r3, #1
 8005e4a:	9308      	str	r3, [sp, #32]
 8005e4c:	2330      	movs	r3, #48	; 0x30
 8005e4e:	f88b 3000 	strb.w	r3, [fp]
 8005e52:	465b      	mov	r3, fp
 8005e54:	781a      	ldrb	r2, [r3, #0]
 8005e56:	3201      	adds	r2, #1
 8005e58:	701a      	strb	r2, [r3, #0]
 8005e5a:	e78c      	b.n	8005d76 <_dtoa_r+0x5de>
 8005e5c:	461d      	mov	r5, r3
 8005e5e:	e7ea      	b.n	8005e36 <_dtoa_r+0x69e>
 8005e60:	2200      	movs	r2, #0
 8005e62:	4b9b      	ldr	r3, [pc, #620]	; (80060d0 <_dtoa_r+0x938>)
 8005e64:	f7fa fbc8 	bl	80005f8 <__aeabi_dmul>
 8005e68:	2200      	movs	r2, #0
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	4606      	mov	r6, r0
 8005e6e:	460f      	mov	r7, r1
 8005e70:	f7fa fe2a 	bl	8000ac8 <__aeabi_dcmpeq>
 8005e74:	2800      	cmp	r0, #0
 8005e76:	d09a      	beq.n	8005dae <_dtoa_r+0x616>
 8005e78:	e7cb      	b.n	8005e12 <_dtoa_r+0x67a>
 8005e7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005e7c:	2a00      	cmp	r2, #0
 8005e7e:	f000 808b 	beq.w	8005f98 <_dtoa_r+0x800>
 8005e82:	9a06      	ldr	r2, [sp, #24]
 8005e84:	2a01      	cmp	r2, #1
 8005e86:	dc6e      	bgt.n	8005f66 <_dtoa_r+0x7ce>
 8005e88:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005e8a:	2a00      	cmp	r2, #0
 8005e8c:	d067      	beq.n	8005f5e <_dtoa_r+0x7c6>
 8005e8e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005e92:	9f07      	ldr	r7, [sp, #28]
 8005e94:	9d05      	ldr	r5, [sp, #20]
 8005e96:	9a05      	ldr	r2, [sp, #20]
 8005e98:	2101      	movs	r1, #1
 8005e9a:	441a      	add	r2, r3
 8005e9c:	4620      	mov	r0, r4
 8005e9e:	9205      	str	r2, [sp, #20]
 8005ea0:	4498      	add	r8, r3
 8005ea2:	f000 fd04 	bl	80068ae <__i2b>
 8005ea6:	4606      	mov	r6, r0
 8005ea8:	2d00      	cmp	r5, #0
 8005eaa:	dd0c      	ble.n	8005ec6 <_dtoa_r+0x72e>
 8005eac:	f1b8 0f00 	cmp.w	r8, #0
 8005eb0:	dd09      	ble.n	8005ec6 <_dtoa_r+0x72e>
 8005eb2:	4545      	cmp	r5, r8
 8005eb4:	9a05      	ldr	r2, [sp, #20]
 8005eb6:	462b      	mov	r3, r5
 8005eb8:	bfa8      	it	ge
 8005eba:	4643      	movge	r3, r8
 8005ebc:	1ad2      	subs	r2, r2, r3
 8005ebe:	9205      	str	r2, [sp, #20]
 8005ec0:	1aed      	subs	r5, r5, r3
 8005ec2:	eba8 0803 	sub.w	r8, r8, r3
 8005ec6:	9b07      	ldr	r3, [sp, #28]
 8005ec8:	b1eb      	cbz	r3, 8005f06 <_dtoa_r+0x76e>
 8005eca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d067      	beq.n	8005fa0 <_dtoa_r+0x808>
 8005ed0:	b18f      	cbz	r7, 8005ef6 <_dtoa_r+0x75e>
 8005ed2:	4631      	mov	r1, r6
 8005ed4:	463a      	mov	r2, r7
 8005ed6:	4620      	mov	r0, r4
 8005ed8:	f000 fd88 	bl	80069ec <__pow5mult>
 8005edc:	9a04      	ldr	r2, [sp, #16]
 8005ede:	4601      	mov	r1, r0
 8005ee0:	4606      	mov	r6, r0
 8005ee2:	4620      	mov	r0, r4
 8005ee4:	f000 fcec 	bl	80068c0 <__multiply>
 8005ee8:	9904      	ldr	r1, [sp, #16]
 8005eea:	9008      	str	r0, [sp, #32]
 8005eec:	4620      	mov	r0, r4
 8005eee:	f000 fc3e 	bl	800676e <_Bfree>
 8005ef2:	9b08      	ldr	r3, [sp, #32]
 8005ef4:	9304      	str	r3, [sp, #16]
 8005ef6:	9b07      	ldr	r3, [sp, #28]
 8005ef8:	1bda      	subs	r2, r3, r7
 8005efa:	d004      	beq.n	8005f06 <_dtoa_r+0x76e>
 8005efc:	9904      	ldr	r1, [sp, #16]
 8005efe:	4620      	mov	r0, r4
 8005f00:	f000 fd74 	bl	80069ec <__pow5mult>
 8005f04:	9004      	str	r0, [sp, #16]
 8005f06:	2101      	movs	r1, #1
 8005f08:	4620      	mov	r0, r4
 8005f0a:	f000 fcd0 	bl	80068ae <__i2b>
 8005f0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f10:	4607      	mov	r7, r0
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	f000 81d0 	beq.w	80062b8 <_dtoa_r+0xb20>
 8005f18:	461a      	mov	r2, r3
 8005f1a:	4601      	mov	r1, r0
 8005f1c:	4620      	mov	r0, r4
 8005f1e:	f000 fd65 	bl	80069ec <__pow5mult>
 8005f22:	9b06      	ldr	r3, [sp, #24]
 8005f24:	2b01      	cmp	r3, #1
 8005f26:	4607      	mov	r7, r0
 8005f28:	dc40      	bgt.n	8005fac <_dtoa_r+0x814>
 8005f2a:	9b00      	ldr	r3, [sp, #0]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d139      	bne.n	8005fa4 <_dtoa_r+0x80c>
 8005f30:	9b01      	ldr	r3, [sp, #4]
 8005f32:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d136      	bne.n	8005fa8 <_dtoa_r+0x810>
 8005f3a:	9b01      	ldr	r3, [sp, #4]
 8005f3c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005f40:	0d1b      	lsrs	r3, r3, #20
 8005f42:	051b      	lsls	r3, r3, #20
 8005f44:	b12b      	cbz	r3, 8005f52 <_dtoa_r+0x7ba>
 8005f46:	9b05      	ldr	r3, [sp, #20]
 8005f48:	3301      	adds	r3, #1
 8005f4a:	9305      	str	r3, [sp, #20]
 8005f4c:	f108 0801 	add.w	r8, r8, #1
 8005f50:	2301      	movs	r3, #1
 8005f52:	9307      	str	r3, [sp, #28]
 8005f54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d12a      	bne.n	8005fb0 <_dtoa_r+0x818>
 8005f5a:	2001      	movs	r0, #1
 8005f5c:	e030      	b.n	8005fc0 <_dtoa_r+0x828>
 8005f5e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005f60:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005f64:	e795      	b.n	8005e92 <_dtoa_r+0x6fa>
 8005f66:	9b07      	ldr	r3, [sp, #28]
 8005f68:	f109 37ff 	add.w	r7, r9, #4294967295
 8005f6c:	42bb      	cmp	r3, r7
 8005f6e:	bfbf      	itttt	lt
 8005f70:	9b07      	ldrlt	r3, [sp, #28]
 8005f72:	9707      	strlt	r7, [sp, #28]
 8005f74:	1afa      	sublt	r2, r7, r3
 8005f76:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005f78:	bfbb      	ittet	lt
 8005f7a:	189b      	addlt	r3, r3, r2
 8005f7c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005f7e:	1bdf      	subge	r7, r3, r7
 8005f80:	2700      	movlt	r7, #0
 8005f82:	f1b9 0f00 	cmp.w	r9, #0
 8005f86:	bfb5      	itete	lt
 8005f88:	9b05      	ldrlt	r3, [sp, #20]
 8005f8a:	9d05      	ldrge	r5, [sp, #20]
 8005f8c:	eba3 0509 	sublt.w	r5, r3, r9
 8005f90:	464b      	movge	r3, r9
 8005f92:	bfb8      	it	lt
 8005f94:	2300      	movlt	r3, #0
 8005f96:	e77e      	b.n	8005e96 <_dtoa_r+0x6fe>
 8005f98:	9f07      	ldr	r7, [sp, #28]
 8005f9a:	9d05      	ldr	r5, [sp, #20]
 8005f9c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8005f9e:	e783      	b.n	8005ea8 <_dtoa_r+0x710>
 8005fa0:	9a07      	ldr	r2, [sp, #28]
 8005fa2:	e7ab      	b.n	8005efc <_dtoa_r+0x764>
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	e7d4      	b.n	8005f52 <_dtoa_r+0x7ba>
 8005fa8:	9b00      	ldr	r3, [sp, #0]
 8005faa:	e7d2      	b.n	8005f52 <_dtoa_r+0x7ba>
 8005fac:	2300      	movs	r3, #0
 8005fae:	9307      	str	r3, [sp, #28]
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8005fb6:	6918      	ldr	r0, [r3, #16]
 8005fb8:	f000 fc2b 	bl	8006812 <__hi0bits>
 8005fbc:	f1c0 0020 	rsb	r0, r0, #32
 8005fc0:	4440      	add	r0, r8
 8005fc2:	f010 001f 	ands.w	r0, r0, #31
 8005fc6:	d047      	beq.n	8006058 <_dtoa_r+0x8c0>
 8005fc8:	f1c0 0320 	rsb	r3, r0, #32
 8005fcc:	2b04      	cmp	r3, #4
 8005fce:	dd3b      	ble.n	8006048 <_dtoa_r+0x8b0>
 8005fd0:	9b05      	ldr	r3, [sp, #20]
 8005fd2:	f1c0 001c 	rsb	r0, r0, #28
 8005fd6:	4403      	add	r3, r0
 8005fd8:	9305      	str	r3, [sp, #20]
 8005fda:	4405      	add	r5, r0
 8005fdc:	4480      	add	r8, r0
 8005fde:	9b05      	ldr	r3, [sp, #20]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	dd05      	ble.n	8005ff0 <_dtoa_r+0x858>
 8005fe4:	461a      	mov	r2, r3
 8005fe6:	9904      	ldr	r1, [sp, #16]
 8005fe8:	4620      	mov	r0, r4
 8005fea:	f000 fd4d 	bl	8006a88 <__lshift>
 8005fee:	9004      	str	r0, [sp, #16]
 8005ff0:	f1b8 0f00 	cmp.w	r8, #0
 8005ff4:	dd05      	ble.n	8006002 <_dtoa_r+0x86a>
 8005ff6:	4639      	mov	r1, r7
 8005ff8:	4642      	mov	r2, r8
 8005ffa:	4620      	mov	r0, r4
 8005ffc:	f000 fd44 	bl	8006a88 <__lshift>
 8006000:	4607      	mov	r7, r0
 8006002:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006004:	b353      	cbz	r3, 800605c <_dtoa_r+0x8c4>
 8006006:	4639      	mov	r1, r7
 8006008:	9804      	ldr	r0, [sp, #16]
 800600a:	f000 fd91 	bl	8006b30 <__mcmp>
 800600e:	2800      	cmp	r0, #0
 8006010:	da24      	bge.n	800605c <_dtoa_r+0x8c4>
 8006012:	2300      	movs	r3, #0
 8006014:	220a      	movs	r2, #10
 8006016:	9904      	ldr	r1, [sp, #16]
 8006018:	4620      	mov	r0, r4
 800601a:	f000 fbbf 	bl	800679c <__multadd>
 800601e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006020:	9004      	str	r0, [sp, #16]
 8006022:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006026:	2b00      	cmp	r3, #0
 8006028:	f000 814d 	beq.w	80062c6 <_dtoa_r+0xb2e>
 800602c:	2300      	movs	r3, #0
 800602e:	4631      	mov	r1, r6
 8006030:	220a      	movs	r2, #10
 8006032:	4620      	mov	r0, r4
 8006034:	f000 fbb2 	bl	800679c <__multadd>
 8006038:	9b02      	ldr	r3, [sp, #8]
 800603a:	2b00      	cmp	r3, #0
 800603c:	4606      	mov	r6, r0
 800603e:	dc4f      	bgt.n	80060e0 <_dtoa_r+0x948>
 8006040:	9b06      	ldr	r3, [sp, #24]
 8006042:	2b02      	cmp	r3, #2
 8006044:	dd4c      	ble.n	80060e0 <_dtoa_r+0x948>
 8006046:	e011      	b.n	800606c <_dtoa_r+0x8d4>
 8006048:	d0c9      	beq.n	8005fde <_dtoa_r+0x846>
 800604a:	9a05      	ldr	r2, [sp, #20]
 800604c:	331c      	adds	r3, #28
 800604e:	441a      	add	r2, r3
 8006050:	9205      	str	r2, [sp, #20]
 8006052:	441d      	add	r5, r3
 8006054:	4498      	add	r8, r3
 8006056:	e7c2      	b.n	8005fde <_dtoa_r+0x846>
 8006058:	4603      	mov	r3, r0
 800605a:	e7f6      	b.n	800604a <_dtoa_r+0x8b2>
 800605c:	f1b9 0f00 	cmp.w	r9, #0
 8006060:	dc38      	bgt.n	80060d4 <_dtoa_r+0x93c>
 8006062:	9b06      	ldr	r3, [sp, #24]
 8006064:	2b02      	cmp	r3, #2
 8006066:	dd35      	ble.n	80060d4 <_dtoa_r+0x93c>
 8006068:	f8cd 9008 	str.w	r9, [sp, #8]
 800606c:	9b02      	ldr	r3, [sp, #8]
 800606e:	b963      	cbnz	r3, 800608a <_dtoa_r+0x8f2>
 8006070:	4639      	mov	r1, r7
 8006072:	2205      	movs	r2, #5
 8006074:	4620      	mov	r0, r4
 8006076:	f000 fb91 	bl	800679c <__multadd>
 800607a:	4601      	mov	r1, r0
 800607c:	4607      	mov	r7, r0
 800607e:	9804      	ldr	r0, [sp, #16]
 8006080:	f000 fd56 	bl	8006b30 <__mcmp>
 8006084:	2800      	cmp	r0, #0
 8006086:	f73f adcc 	bgt.w	8005c22 <_dtoa_r+0x48a>
 800608a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800608c:	465d      	mov	r5, fp
 800608e:	ea6f 0a03 	mvn.w	sl, r3
 8006092:	f04f 0900 	mov.w	r9, #0
 8006096:	4639      	mov	r1, r7
 8006098:	4620      	mov	r0, r4
 800609a:	f000 fb68 	bl	800676e <_Bfree>
 800609e:	2e00      	cmp	r6, #0
 80060a0:	f43f aeb7 	beq.w	8005e12 <_dtoa_r+0x67a>
 80060a4:	f1b9 0f00 	cmp.w	r9, #0
 80060a8:	d005      	beq.n	80060b6 <_dtoa_r+0x91e>
 80060aa:	45b1      	cmp	r9, r6
 80060ac:	d003      	beq.n	80060b6 <_dtoa_r+0x91e>
 80060ae:	4649      	mov	r1, r9
 80060b0:	4620      	mov	r0, r4
 80060b2:	f000 fb5c 	bl	800676e <_Bfree>
 80060b6:	4631      	mov	r1, r6
 80060b8:	4620      	mov	r0, r4
 80060ba:	f000 fb58 	bl	800676e <_Bfree>
 80060be:	e6a8      	b.n	8005e12 <_dtoa_r+0x67a>
 80060c0:	2700      	movs	r7, #0
 80060c2:	463e      	mov	r6, r7
 80060c4:	e7e1      	b.n	800608a <_dtoa_r+0x8f2>
 80060c6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80060ca:	463e      	mov	r6, r7
 80060cc:	e5a9      	b.n	8005c22 <_dtoa_r+0x48a>
 80060ce:	bf00      	nop
 80060d0:	40240000 	.word	0x40240000
 80060d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060d6:	f8cd 9008 	str.w	r9, [sp, #8]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	f000 80fa 	beq.w	80062d4 <_dtoa_r+0xb3c>
 80060e0:	2d00      	cmp	r5, #0
 80060e2:	dd05      	ble.n	80060f0 <_dtoa_r+0x958>
 80060e4:	4631      	mov	r1, r6
 80060e6:	462a      	mov	r2, r5
 80060e8:	4620      	mov	r0, r4
 80060ea:	f000 fccd 	bl	8006a88 <__lshift>
 80060ee:	4606      	mov	r6, r0
 80060f0:	9b07      	ldr	r3, [sp, #28]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d04c      	beq.n	8006190 <_dtoa_r+0x9f8>
 80060f6:	6871      	ldr	r1, [r6, #4]
 80060f8:	4620      	mov	r0, r4
 80060fa:	f000 fb04 	bl	8006706 <_Balloc>
 80060fe:	6932      	ldr	r2, [r6, #16]
 8006100:	3202      	adds	r2, #2
 8006102:	4605      	mov	r5, r0
 8006104:	0092      	lsls	r2, r2, #2
 8006106:	f106 010c 	add.w	r1, r6, #12
 800610a:	300c      	adds	r0, #12
 800610c:	f000 faf0 	bl	80066f0 <memcpy>
 8006110:	2201      	movs	r2, #1
 8006112:	4629      	mov	r1, r5
 8006114:	4620      	mov	r0, r4
 8006116:	f000 fcb7 	bl	8006a88 <__lshift>
 800611a:	9b00      	ldr	r3, [sp, #0]
 800611c:	f8cd b014 	str.w	fp, [sp, #20]
 8006120:	f003 0301 	and.w	r3, r3, #1
 8006124:	46b1      	mov	r9, r6
 8006126:	9307      	str	r3, [sp, #28]
 8006128:	4606      	mov	r6, r0
 800612a:	4639      	mov	r1, r7
 800612c:	9804      	ldr	r0, [sp, #16]
 800612e:	f7ff faa7 	bl	8005680 <quorem>
 8006132:	4649      	mov	r1, r9
 8006134:	4605      	mov	r5, r0
 8006136:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800613a:	9804      	ldr	r0, [sp, #16]
 800613c:	f000 fcf8 	bl	8006b30 <__mcmp>
 8006140:	4632      	mov	r2, r6
 8006142:	9000      	str	r0, [sp, #0]
 8006144:	4639      	mov	r1, r7
 8006146:	4620      	mov	r0, r4
 8006148:	f000 fd0c 	bl	8006b64 <__mdiff>
 800614c:	68c3      	ldr	r3, [r0, #12]
 800614e:	4602      	mov	r2, r0
 8006150:	bb03      	cbnz	r3, 8006194 <_dtoa_r+0x9fc>
 8006152:	4601      	mov	r1, r0
 8006154:	9008      	str	r0, [sp, #32]
 8006156:	9804      	ldr	r0, [sp, #16]
 8006158:	f000 fcea 	bl	8006b30 <__mcmp>
 800615c:	9a08      	ldr	r2, [sp, #32]
 800615e:	4603      	mov	r3, r0
 8006160:	4611      	mov	r1, r2
 8006162:	4620      	mov	r0, r4
 8006164:	9308      	str	r3, [sp, #32]
 8006166:	f000 fb02 	bl	800676e <_Bfree>
 800616a:	9b08      	ldr	r3, [sp, #32]
 800616c:	b9a3      	cbnz	r3, 8006198 <_dtoa_r+0xa00>
 800616e:	9a06      	ldr	r2, [sp, #24]
 8006170:	b992      	cbnz	r2, 8006198 <_dtoa_r+0xa00>
 8006172:	9a07      	ldr	r2, [sp, #28]
 8006174:	b982      	cbnz	r2, 8006198 <_dtoa_r+0xa00>
 8006176:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800617a:	d029      	beq.n	80061d0 <_dtoa_r+0xa38>
 800617c:	9b00      	ldr	r3, [sp, #0]
 800617e:	2b00      	cmp	r3, #0
 8006180:	dd01      	ble.n	8006186 <_dtoa_r+0x9ee>
 8006182:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8006186:	9b05      	ldr	r3, [sp, #20]
 8006188:	1c5d      	adds	r5, r3, #1
 800618a:	f883 8000 	strb.w	r8, [r3]
 800618e:	e782      	b.n	8006096 <_dtoa_r+0x8fe>
 8006190:	4630      	mov	r0, r6
 8006192:	e7c2      	b.n	800611a <_dtoa_r+0x982>
 8006194:	2301      	movs	r3, #1
 8006196:	e7e3      	b.n	8006160 <_dtoa_r+0x9c8>
 8006198:	9a00      	ldr	r2, [sp, #0]
 800619a:	2a00      	cmp	r2, #0
 800619c:	db04      	blt.n	80061a8 <_dtoa_r+0xa10>
 800619e:	d125      	bne.n	80061ec <_dtoa_r+0xa54>
 80061a0:	9a06      	ldr	r2, [sp, #24]
 80061a2:	bb1a      	cbnz	r2, 80061ec <_dtoa_r+0xa54>
 80061a4:	9a07      	ldr	r2, [sp, #28]
 80061a6:	bb0a      	cbnz	r2, 80061ec <_dtoa_r+0xa54>
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	ddec      	ble.n	8006186 <_dtoa_r+0x9ee>
 80061ac:	2201      	movs	r2, #1
 80061ae:	9904      	ldr	r1, [sp, #16]
 80061b0:	4620      	mov	r0, r4
 80061b2:	f000 fc69 	bl	8006a88 <__lshift>
 80061b6:	4639      	mov	r1, r7
 80061b8:	9004      	str	r0, [sp, #16]
 80061ba:	f000 fcb9 	bl	8006b30 <__mcmp>
 80061be:	2800      	cmp	r0, #0
 80061c0:	dc03      	bgt.n	80061ca <_dtoa_r+0xa32>
 80061c2:	d1e0      	bne.n	8006186 <_dtoa_r+0x9ee>
 80061c4:	f018 0f01 	tst.w	r8, #1
 80061c8:	d0dd      	beq.n	8006186 <_dtoa_r+0x9ee>
 80061ca:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80061ce:	d1d8      	bne.n	8006182 <_dtoa_r+0x9ea>
 80061d0:	9b05      	ldr	r3, [sp, #20]
 80061d2:	9a05      	ldr	r2, [sp, #20]
 80061d4:	1c5d      	adds	r5, r3, #1
 80061d6:	2339      	movs	r3, #57	; 0x39
 80061d8:	7013      	strb	r3, [r2, #0]
 80061da:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80061de:	2b39      	cmp	r3, #57	; 0x39
 80061e0:	f105 32ff 	add.w	r2, r5, #4294967295
 80061e4:	d04f      	beq.n	8006286 <_dtoa_r+0xaee>
 80061e6:	3301      	adds	r3, #1
 80061e8:	7013      	strb	r3, [r2, #0]
 80061ea:	e754      	b.n	8006096 <_dtoa_r+0x8fe>
 80061ec:	9a05      	ldr	r2, [sp, #20]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	f102 0501 	add.w	r5, r2, #1
 80061f4:	dd06      	ble.n	8006204 <_dtoa_r+0xa6c>
 80061f6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80061fa:	d0e9      	beq.n	80061d0 <_dtoa_r+0xa38>
 80061fc:	f108 0801 	add.w	r8, r8, #1
 8006200:	9b05      	ldr	r3, [sp, #20]
 8006202:	e7c2      	b.n	800618a <_dtoa_r+0x9f2>
 8006204:	9a02      	ldr	r2, [sp, #8]
 8006206:	f805 8c01 	strb.w	r8, [r5, #-1]
 800620a:	eba5 030b 	sub.w	r3, r5, fp
 800620e:	4293      	cmp	r3, r2
 8006210:	d021      	beq.n	8006256 <_dtoa_r+0xabe>
 8006212:	2300      	movs	r3, #0
 8006214:	220a      	movs	r2, #10
 8006216:	9904      	ldr	r1, [sp, #16]
 8006218:	4620      	mov	r0, r4
 800621a:	f000 fabf 	bl	800679c <__multadd>
 800621e:	45b1      	cmp	r9, r6
 8006220:	9004      	str	r0, [sp, #16]
 8006222:	f04f 0300 	mov.w	r3, #0
 8006226:	f04f 020a 	mov.w	r2, #10
 800622a:	4649      	mov	r1, r9
 800622c:	4620      	mov	r0, r4
 800622e:	d105      	bne.n	800623c <_dtoa_r+0xaa4>
 8006230:	f000 fab4 	bl	800679c <__multadd>
 8006234:	4681      	mov	r9, r0
 8006236:	4606      	mov	r6, r0
 8006238:	9505      	str	r5, [sp, #20]
 800623a:	e776      	b.n	800612a <_dtoa_r+0x992>
 800623c:	f000 faae 	bl	800679c <__multadd>
 8006240:	4631      	mov	r1, r6
 8006242:	4681      	mov	r9, r0
 8006244:	2300      	movs	r3, #0
 8006246:	220a      	movs	r2, #10
 8006248:	4620      	mov	r0, r4
 800624a:	f000 faa7 	bl	800679c <__multadd>
 800624e:	4606      	mov	r6, r0
 8006250:	e7f2      	b.n	8006238 <_dtoa_r+0xaa0>
 8006252:	f04f 0900 	mov.w	r9, #0
 8006256:	2201      	movs	r2, #1
 8006258:	9904      	ldr	r1, [sp, #16]
 800625a:	4620      	mov	r0, r4
 800625c:	f000 fc14 	bl	8006a88 <__lshift>
 8006260:	4639      	mov	r1, r7
 8006262:	9004      	str	r0, [sp, #16]
 8006264:	f000 fc64 	bl	8006b30 <__mcmp>
 8006268:	2800      	cmp	r0, #0
 800626a:	dcb6      	bgt.n	80061da <_dtoa_r+0xa42>
 800626c:	d102      	bne.n	8006274 <_dtoa_r+0xadc>
 800626e:	f018 0f01 	tst.w	r8, #1
 8006272:	d1b2      	bne.n	80061da <_dtoa_r+0xa42>
 8006274:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006278:	2b30      	cmp	r3, #48	; 0x30
 800627a:	f105 32ff 	add.w	r2, r5, #4294967295
 800627e:	f47f af0a 	bne.w	8006096 <_dtoa_r+0x8fe>
 8006282:	4615      	mov	r5, r2
 8006284:	e7f6      	b.n	8006274 <_dtoa_r+0xadc>
 8006286:	4593      	cmp	fp, r2
 8006288:	d105      	bne.n	8006296 <_dtoa_r+0xafe>
 800628a:	2331      	movs	r3, #49	; 0x31
 800628c:	f10a 0a01 	add.w	sl, sl, #1
 8006290:	f88b 3000 	strb.w	r3, [fp]
 8006294:	e6ff      	b.n	8006096 <_dtoa_r+0x8fe>
 8006296:	4615      	mov	r5, r2
 8006298:	e79f      	b.n	80061da <_dtoa_r+0xa42>
 800629a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8006300 <_dtoa_r+0xb68>
 800629e:	e007      	b.n	80062b0 <_dtoa_r+0xb18>
 80062a0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80062a2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8006304 <_dtoa_r+0xb6c>
 80062a6:	b11b      	cbz	r3, 80062b0 <_dtoa_r+0xb18>
 80062a8:	f10b 0308 	add.w	r3, fp, #8
 80062ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80062ae:	6013      	str	r3, [r2, #0]
 80062b0:	4658      	mov	r0, fp
 80062b2:	b017      	add	sp, #92	; 0x5c
 80062b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062b8:	9b06      	ldr	r3, [sp, #24]
 80062ba:	2b01      	cmp	r3, #1
 80062bc:	f77f ae35 	ble.w	8005f2a <_dtoa_r+0x792>
 80062c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80062c2:	9307      	str	r3, [sp, #28]
 80062c4:	e649      	b.n	8005f5a <_dtoa_r+0x7c2>
 80062c6:	9b02      	ldr	r3, [sp, #8]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	dc03      	bgt.n	80062d4 <_dtoa_r+0xb3c>
 80062cc:	9b06      	ldr	r3, [sp, #24]
 80062ce:	2b02      	cmp	r3, #2
 80062d0:	f73f aecc 	bgt.w	800606c <_dtoa_r+0x8d4>
 80062d4:	465d      	mov	r5, fp
 80062d6:	4639      	mov	r1, r7
 80062d8:	9804      	ldr	r0, [sp, #16]
 80062da:	f7ff f9d1 	bl	8005680 <quorem>
 80062de:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80062e2:	f805 8b01 	strb.w	r8, [r5], #1
 80062e6:	9a02      	ldr	r2, [sp, #8]
 80062e8:	eba5 030b 	sub.w	r3, r5, fp
 80062ec:	429a      	cmp	r2, r3
 80062ee:	ddb0      	ble.n	8006252 <_dtoa_r+0xaba>
 80062f0:	2300      	movs	r3, #0
 80062f2:	220a      	movs	r2, #10
 80062f4:	9904      	ldr	r1, [sp, #16]
 80062f6:	4620      	mov	r0, r4
 80062f8:	f000 fa50 	bl	800679c <__multadd>
 80062fc:	9004      	str	r0, [sp, #16]
 80062fe:	e7ea      	b.n	80062d6 <_dtoa_r+0xb3e>
 8006300:	08007348 	.word	0x08007348
 8006304:	0800736c 	.word	0x0800736c

08006308 <__sflush_r>:
 8006308:	898a      	ldrh	r2, [r1, #12]
 800630a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800630e:	4605      	mov	r5, r0
 8006310:	0710      	lsls	r0, r2, #28
 8006312:	460c      	mov	r4, r1
 8006314:	d458      	bmi.n	80063c8 <__sflush_r+0xc0>
 8006316:	684b      	ldr	r3, [r1, #4]
 8006318:	2b00      	cmp	r3, #0
 800631a:	dc05      	bgt.n	8006328 <__sflush_r+0x20>
 800631c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800631e:	2b00      	cmp	r3, #0
 8006320:	dc02      	bgt.n	8006328 <__sflush_r+0x20>
 8006322:	2000      	movs	r0, #0
 8006324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006328:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800632a:	2e00      	cmp	r6, #0
 800632c:	d0f9      	beq.n	8006322 <__sflush_r+0x1a>
 800632e:	2300      	movs	r3, #0
 8006330:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006334:	682f      	ldr	r7, [r5, #0]
 8006336:	6a21      	ldr	r1, [r4, #32]
 8006338:	602b      	str	r3, [r5, #0]
 800633a:	d032      	beq.n	80063a2 <__sflush_r+0x9a>
 800633c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800633e:	89a3      	ldrh	r3, [r4, #12]
 8006340:	075a      	lsls	r2, r3, #29
 8006342:	d505      	bpl.n	8006350 <__sflush_r+0x48>
 8006344:	6863      	ldr	r3, [r4, #4]
 8006346:	1ac0      	subs	r0, r0, r3
 8006348:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800634a:	b10b      	cbz	r3, 8006350 <__sflush_r+0x48>
 800634c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800634e:	1ac0      	subs	r0, r0, r3
 8006350:	2300      	movs	r3, #0
 8006352:	4602      	mov	r2, r0
 8006354:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006356:	6a21      	ldr	r1, [r4, #32]
 8006358:	4628      	mov	r0, r5
 800635a:	47b0      	blx	r6
 800635c:	1c43      	adds	r3, r0, #1
 800635e:	89a3      	ldrh	r3, [r4, #12]
 8006360:	d106      	bne.n	8006370 <__sflush_r+0x68>
 8006362:	6829      	ldr	r1, [r5, #0]
 8006364:	291d      	cmp	r1, #29
 8006366:	d848      	bhi.n	80063fa <__sflush_r+0xf2>
 8006368:	4a29      	ldr	r2, [pc, #164]	; (8006410 <__sflush_r+0x108>)
 800636a:	40ca      	lsrs	r2, r1
 800636c:	07d6      	lsls	r6, r2, #31
 800636e:	d544      	bpl.n	80063fa <__sflush_r+0xf2>
 8006370:	2200      	movs	r2, #0
 8006372:	6062      	str	r2, [r4, #4]
 8006374:	04d9      	lsls	r1, r3, #19
 8006376:	6922      	ldr	r2, [r4, #16]
 8006378:	6022      	str	r2, [r4, #0]
 800637a:	d504      	bpl.n	8006386 <__sflush_r+0x7e>
 800637c:	1c42      	adds	r2, r0, #1
 800637e:	d101      	bne.n	8006384 <__sflush_r+0x7c>
 8006380:	682b      	ldr	r3, [r5, #0]
 8006382:	b903      	cbnz	r3, 8006386 <__sflush_r+0x7e>
 8006384:	6560      	str	r0, [r4, #84]	; 0x54
 8006386:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006388:	602f      	str	r7, [r5, #0]
 800638a:	2900      	cmp	r1, #0
 800638c:	d0c9      	beq.n	8006322 <__sflush_r+0x1a>
 800638e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006392:	4299      	cmp	r1, r3
 8006394:	d002      	beq.n	800639c <__sflush_r+0x94>
 8006396:	4628      	mov	r0, r5
 8006398:	f000 fc9e 	bl	8006cd8 <_free_r>
 800639c:	2000      	movs	r0, #0
 800639e:	6360      	str	r0, [r4, #52]	; 0x34
 80063a0:	e7c0      	b.n	8006324 <__sflush_r+0x1c>
 80063a2:	2301      	movs	r3, #1
 80063a4:	4628      	mov	r0, r5
 80063a6:	47b0      	blx	r6
 80063a8:	1c41      	adds	r1, r0, #1
 80063aa:	d1c8      	bne.n	800633e <__sflush_r+0x36>
 80063ac:	682b      	ldr	r3, [r5, #0]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d0c5      	beq.n	800633e <__sflush_r+0x36>
 80063b2:	2b1d      	cmp	r3, #29
 80063b4:	d001      	beq.n	80063ba <__sflush_r+0xb2>
 80063b6:	2b16      	cmp	r3, #22
 80063b8:	d101      	bne.n	80063be <__sflush_r+0xb6>
 80063ba:	602f      	str	r7, [r5, #0]
 80063bc:	e7b1      	b.n	8006322 <__sflush_r+0x1a>
 80063be:	89a3      	ldrh	r3, [r4, #12]
 80063c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063c4:	81a3      	strh	r3, [r4, #12]
 80063c6:	e7ad      	b.n	8006324 <__sflush_r+0x1c>
 80063c8:	690f      	ldr	r7, [r1, #16]
 80063ca:	2f00      	cmp	r7, #0
 80063cc:	d0a9      	beq.n	8006322 <__sflush_r+0x1a>
 80063ce:	0793      	lsls	r3, r2, #30
 80063d0:	680e      	ldr	r6, [r1, #0]
 80063d2:	bf08      	it	eq
 80063d4:	694b      	ldreq	r3, [r1, #20]
 80063d6:	600f      	str	r7, [r1, #0]
 80063d8:	bf18      	it	ne
 80063da:	2300      	movne	r3, #0
 80063dc:	eba6 0807 	sub.w	r8, r6, r7
 80063e0:	608b      	str	r3, [r1, #8]
 80063e2:	f1b8 0f00 	cmp.w	r8, #0
 80063e6:	dd9c      	ble.n	8006322 <__sflush_r+0x1a>
 80063e8:	4643      	mov	r3, r8
 80063ea:	463a      	mov	r2, r7
 80063ec:	6a21      	ldr	r1, [r4, #32]
 80063ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80063f0:	4628      	mov	r0, r5
 80063f2:	47b0      	blx	r6
 80063f4:	2800      	cmp	r0, #0
 80063f6:	dc06      	bgt.n	8006406 <__sflush_r+0xfe>
 80063f8:	89a3      	ldrh	r3, [r4, #12]
 80063fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063fe:	81a3      	strh	r3, [r4, #12]
 8006400:	f04f 30ff 	mov.w	r0, #4294967295
 8006404:	e78e      	b.n	8006324 <__sflush_r+0x1c>
 8006406:	4407      	add	r7, r0
 8006408:	eba8 0800 	sub.w	r8, r8, r0
 800640c:	e7e9      	b.n	80063e2 <__sflush_r+0xda>
 800640e:	bf00      	nop
 8006410:	20400001 	.word	0x20400001

08006414 <_fflush_r>:
 8006414:	b538      	push	{r3, r4, r5, lr}
 8006416:	690b      	ldr	r3, [r1, #16]
 8006418:	4605      	mov	r5, r0
 800641a:	460c      	mov	r4, r1
 800641c:	b1db      	cbz	r3, 8006456 <_fflush_r+0x42>
 800641e:	b118      	cbz	r0, 8006428 <_fflush_r+0x14>
 8006420:	6983      	ldr	r3, [r0, #24]
 8006422:	b90b      	cbnz	r3, 8006428 <_fflush_r+0x14>
 8006424:	f000 f860 	bl	80064e8 <__sinit>
 8006428:	4b0c      	ldr	r3, [pc, #48]	; (800645c <_fflush_r+0x48>)
 800642a:	429c      	cmp	r4, r3
 800642c:	d109      	bne.n	8006442 <_fflush_r+0x2e>
 800642e:	686c      	ldr	r4, [r5, #4]
 8006430:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006434:	b17b      	cbz	r3, 8006456 <_fflush_r+0x42>
 8006436:	4621      	mov	r1, r4
 8006438:	4628      	mov	r0, r5
 800643a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800643e:	f7ff bf63 	b.w	8006308 <__sflush_r>
 8006442:	4b07      	ldr	r3, [pc, #28]	; (8006460 <_fflush_r+0x4c>)
 8006444:	429c      	cmp	r4, r3
 8006446:	d101      	bne.n	800644c <_fflush_r+0x38>
 8006448:	68ac      	ldr	r4, [r5, #8]
 800644a:	e7f1      	b.n	8006430 <_fflush_r+0x1c>
 800644c:	4b05      	ldr	r3, [pc, #20]	; (8006464 <_fflush_r+0x50>)
 800644e:	429c      	cmp	r4, r3
 8006450:	bf08      	it	eq
 8006452:	68ec      	ldreq	r4, [r5, #12]
 8006454:	e7ec      	b.n	8006430 <_fflush_r+0x1c>
 8006456:	2000      	movs	r0, #0
 8006458:	bd38      	pop	{r3, r4, r5, pc}
 800645a:	bf00      	nop
 800645c:	0800739c 	.word	0x0800739c
 8006460:	080073bc 	.word	0x080073bc
 8006464:	0800737c 	.word	0x0800737c

08006468 <std>:
 8006468:	2300      	movs	r3, #0
 800646a:	b510      	push	{r4, lr}
 800646c:	4604      	mov	r4, r0
 800646e:	e9c0 3300 	strd	r3, r3, [r0]
 8006472:	6083      	str	r3, [r0, #8]
 8006474:	8181      	strh	r1, [r0, #12]
 8006476:	6643      	str	r3, [r0, #100]	; 0x64
 8006478:	81c2      	strh	r2, [r0, #14]
 800647a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800647e:	6183      	str	r3, [r0, #24]
 8006480:	4619      	mov	r1, r3
 8006482:	2208      	movs	r2, #8
 8006484:	305c      	adds	r0, #92	; 0x5c
 8006486:	f7fe fb5b 	bl	8004b40 <memset>
 800648a:	4b05      	ldr	r3, [pc, #20]	; (80064a0 <std+0x38>)
 800648c:	6263      	str	r3, [r4, #36]	; 0x24
 800648e:	4b05      	ldr	r3, [pc, #20]	; (80064a4 <std+0x3c>)
 8006490:	62a3      	str	r3, [r4, #40]	; 0x28
 8006492:	4b05      	ldr	r3, [pc, #20]	; (80064a8 <std+0x40>)
 8006494:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006496:	4b05      	ldr	r3, [pc, #20]	; (80064ac <std+0x44>)
 8006498:	6224      	str	r4, [r4, #32]
 800649a:	6323      	str	r3, [r4, #48]	; 0x30
 800649c:	bd10      	pop	{r4, pc}
 800649e:	bf00      	nop
 80064a0:	080070c9 	.word	0x080070c9
 80064a4:	080070eb 	.word	0x080070eb
 80064a8:	08007123 	.word	0x08007123
 80064ac:	08007147 	.word	0x08007147

080064b0 <_cleanup_r>:
 80064b0:	4901      	ldr	r1, [pc, #4]	; (80064b8 <_cleanup_r+0x8>)
 80064b2:	f000 b885 	b.w	80065c0 <_fwalk_reent>
 80064b6:	bf00      	nop
 80064b8:	08006415 	.word	0x08006415

080064bc <__sfmoreglue>:
 80064bc:	b570      	push	{r4, r5, r6, lr}
 80064be:	1e4a      	subs	r2, r1, #1
 80064c0:	2568      	movs	r5, #104	; 0x68
 80064c2:	4355      	muls	r5, r2
 80064c4:	460e      	mov	r6, r1
 80064c6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80064ca:	f000 fc53 	bl	8006d74 <_malloc_r>
 80064ce:	4604      	mov	r4, r0
 80064d0:	b140      	cbz	r0, 80064e4 <__sfmoreglue+0x28>
 80064d2:	2100      	movs	r1, #0
 80064d4:	e9c0 1600 	strd	r1, r6, [r0]
 80064d8:	300c      	adds	r0, #12
 80064da:	60a0      	str	r0, [r4, #8]
 80064dc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80064e0:	f7fe fb2e 	bl	8004b40 <memset>
 80064e4:	4620      	mov	r0, r4
 80064e6:	bd70      	pop	{r4, r5, r6, pc}

080064e8 <__sinit>:
 80064e8:	6983      	ldr	r3, [r0, #24]
 80064ea:	b510      	push	{r4, lr}
 80064ec:	4604      	mov	r4, r0
 80064ee:	bb33      	cbnz	r3, 800653e <__sinit+0x56>
 80064f0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80064f4:	6503      	str	r3, [r0, #80]	; 0x50
 80064f6:	4b12      	ldr	r3, [pc, #72]	; (8006540 <__sinit+0x58>)
 80064f8:	4a12      	ldr	r2, [pc, #72]	; (8006544 <__sinit+0x5c>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	6282      	str	r2, [r0, #40]	; 0x28
 80064fe:	4298      	cmp	r0, r3
 8006500:	bf04      	itt	eq
 8006502:	2301      	moveq	r3, #1
 8006504:	6183      	streq	r3, [r0, #24]
 8006506:	f000 f81f 	bl	8006548 <__sfp>
 800650a:	6060      	str	r0, [r4, #4]
 800650c:	4620      	mov	r0, r4
 800650e:	f000 f81b 	bl	8006548 <__sfp>
 8006512:	60a0      	str	r0, [r4, #8]
 8006514:	4620      	mov	r0, r4
 8006516:	f000 f817 	bl	8006548 <__sfp>
 800651a:	2200      	movs	r2, #0
 800651c:	60e0      	str	r0, [r4, #12]
 800651e:	2104      	movs	r1, #4
 8006520:	6860      	ldr	r0, [r4, #4]
 8006522:	f7ff ffa1 	bl	8006468 <std>
 8006526:	2201      	movs	r2, #1
 8006528:	2109      	movs	r1, #9
 800652a:	68a0      	ldr	r0, [r4, #8]
 800652c:	f7ff ff9c 	bl	8006468 <std>
 8006530:	2202      	movs	r2, #2
 8006532:	2112      	movs	r1, #18
 8006534:	68e0      	ldr	r0, [r4, #12]
 8006536:	f7ff ff97 	bl	8006468 <std>
 800653a:	2301      	movs	r3, #1
 800653c:	61a3      	str	r3, [r4, #24]
 800653e:	bd10      	pop	{r4, pc}
 8006540:	08007334 	.word	0x08007334
 8006544:	080064b1 	.word	0x080064b1

08006548 <__sfp>:
 8006548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800654a:	4b1b      	ldr	r3, [pc, #108]	; (80065b8 <__sfp+0x70>)
 800654c:	681e      	ldr	r6, [r3, #0]
 800654e:	69b3      	ldr	r3, [r6, #24]
 8006550:	4607      	mov	r7, r0
 8006552:	b913      	cbnz	r3, 800655a <__sfp+0x12>
 8006554:	4630      	mov	r0, r6
 8006556:	f7ff ffc7 	bl	80064e8 <__sinit>
 800655a:	3648      	adds	r6, #72	; 0x48
 800655c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006560:	3b01      	subs	r3, #1
 8006562:	d503      	bpl.n	800656c <__sfp+0x24>
 8006564:	6833      	ldr	r3, [r6, #0]
 8006566:	b133      	cbz	r3, 8006576 <__sfp+0x2e>
 8006568:	6836      	ldr	r6, [r6, #0]
 800656a:	e7f7      	b.n	800655c <__sfp+0x14>
 800656c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006570:	b16d      	cbz	r5, 800658e <__sfp+0x46>
 8006572:	3468      	adds	r4, #104	; 0x68
 8006574:	e7f4      	b.n	8006560 <__sfp+0x18>
 8006576:	2104      	movs	r1, #4
 8006578:	4638      	mov	r0, r7
 800657a:	f7ff ff9f 	bl	80064bc <__sfmoreglue>
 800657e:	6030      	str	r0, [r6, #0]
 8006580:	2800      	cmp	r0, #0
 8006582:	d1f1      	bne.n	8006568 <__sfp+0x20>
 8006584:	230c      	movs	r3, #12
 8006586:	603b      	str	r3, [r7, #0]
 8006588:	4604      	mov	r4, r0
 800658a:	4620      	mov	r0, r4
 800658c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800658e:	4b0b      	ldr	r3, [pc, #44]	; (80065bc <__sfp+0x74>)
 8006590:	6665      	str	r5, [r4, #100]	; 0x64
 8006592:	e9c4 5500 	strd	r5, r5, [r4]
 8006596:	60a5      	str	r5, [r4, #8]
 8006598:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800659c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80065a0:	2208      	movs	r2, #8
 80065a2:	4629      	mov	r1, r5
 80065a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80065a8:	f7fe faca 	bl	8004b40 <memset>
 80065ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80065b0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80065b4:	e7e9      	b.n	800658a <__sfp+0x42>
 80065b6:	bf00      	nop
 80065b8:	08007334 	.word	0x08007334
 80065bc:	ffff0001 	.word	0xffff0001

080065c0 <_fwalk_reent>:
 80065c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065c4:	4680      	mov	r8, r0
 80065c6:	4689      	mov	r9, r1
 80065c8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80065cc:	2600      	movs	r6, #0
 80065ce:	b914      	cbnz	r4, 80065d6 <_fwalk_reent+0x16>
 80065d0:	4630      	mov	r0, r6
 80065d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80065d6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80065da:	3f01      	subs	r7, #1
 80065dc:	d501      	bpl.n	80065e2 <_fwalk_reent+0x22>
 80065de:	6824      	ldr	r4, [r4, #0]
 80065e0:	e7f5      	b.n	80065ce <_fwalk_reent+0xe>
 80065e2:	89ab      	ldrh	r3, [r5, #12]
 80065e4:	2b01      	cmp	r3, #1
 80065e6:	d907      	bls.n	80065f8 <_fwalk_reent+0x38>
 80065e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80065ec:	3301      	adds	r3, #1
 80065ee:	d003      	beq.n	80065f8 <_fwalk_reent+0x38>
 80065f0:	4629      	mov	r1, r5
 80065f2:	4640      	mov	r0, r8
 80065f4:	47c8      	blx	r9
 80065f6:	4306      	orrs	r6, r0
 80065f8:	3568      	adds	r5, #104	; 0x68
 80065fa:	e7ee      	b.n	80065da <_fwalk_reent+0x1a>

080065fc <_localeconv_r>:
 80065fc:	4b04      	ldr	r3, [pc, #16]	; (8006610 <_localeconv_r+0x14>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	6a18      	ldr	r0, [r3, #32]
 8006602:	4b04      	ldr	r3, [pc, #16]	; (8006614 <_localeconv_r+0x18>)
 8006604:	2800      	cmp	r0, #0
 8006606:	bf08      	it	eq
 8006608:	4618      	moveq	r0, r3
 800660a:	30f0      	adds	r0, #240	; 0xf0
 800660c:	4770      	bx	lr
 800660e:	bf00      	nop
 8006610:	2000000c 	.word	0x2000000c
 8006614:	20000070 	.word	0x20000070

08006618 <__swhatbuf_r>:
 8006618:	b570      	push	{r4, r5, r6, lr}
 800661a:	460e      	mov	r6, r1
 800661c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006620:	2900      	cmp	r1, #0
 8006622:	b096      	sub	sp, #88	; 0x58
 8006624:	4614      	mov	r4, r2
 8006626:	461d      	mov	r5, r3
 8006628:	da07      	bge.n	800663a <__swhatbuf_r+0x22>
 800662a:	2300      	movs	r3, #0
 800662c:	602b      	str	r3, [r5, #0]
 800662e:	89b3      	ldrh	r3, [r6, #12]
 8006630:	061a      	lsls	r2, r3, #24
 8006632:	d410      	bmi.n	8006656 <__swhatbuf_r+0x3e>
 8006634:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006638:	e00e      	b.n	8006658 <__swhatbuf_r+0x40>
 800663a:	466a      	mov	r2, sp
 800663c:	f000 fdaa 	bl	8007194 <_fstat_r>
 8006640:	2800      	cmp	r0, #0
 8006642:	dbf2      	blt.n	800662a <__swhatbuf_r+0x12>
 8006644:	9a01      	ldr	r2, [sp, #4]
 8006646:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800664a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800664e:	425a      	negs	r2, r3
 8006650:	415a      	adcs	r2, r3
 8006652:	602a      	str	r2, [r5, #0]
 8006654:	e7ee      	b.n	8006634 <__swhatbuf_r+0x1c>
 8006656:	2340      	movs	r3, #64	; 0x40
 8006658:	2000      	movs	r0, #0
 800665a:	6023      	str	r3, [r4, #0]
 800665c:	b016      	add	sp, #88	; 0x58
 800665e:	bd70      	pop	{r4, r5, r6, pc}

08006660 <__smakebuf_r>:
 8006660:	898b      	ldrh	r3, [r1, #12]
 8006662:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006664:	079d      	lsls	r5, r3, #30
 8006666:	4606      	mov	r6, r0
 8006668:	460c      	mov	r4, r1
 800666a:	d507      	bpl.n	800667c <__smakebuf_r+0x1c>
 800666c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006670:	6023      	str	r3, [r4, #0]
 8006672:	6123      	str	r3, [r4, #16]
 8006674:	2301      	movs	r3, #1
 8006676:	6163      	str	r3, [r4, #20]
 8006678:	b002      	add	sp, #8
 800667a:	bd70      	pop	{r4, r5, r6, pc}
 800667c:	ab01      	add	r3, sp, #4
 800667e:	466a      	mov	r2, sp
 8006680:	f7ff ffca 	bl	8006618 <__swhatbuf_r>
 8006684:	9900      	ldr	r1, [sp, #0]
 8006686:	4605      	mov	r5, r0
 8006688:	4630      	mov	r0, r6
 800668a:	f000 fb73 	bl	8006d74 <_malloc_r>
 800668e:	b948      	cbnz	r0, 80066a4 <__smakebuf_r+0x44>
 8006690:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006694:	059a      	lsls	r2, r3, #22
 8006696:	d4ef      	bmi.n	8006678 <__smakebuf_r+0x18>
 8006698:	f023 0303 	bic.w	r3, r3, #3
 800669c:	f043 0302 	orr.w	r3, r3, #2
 80066a0:	81a3      	strh	r3, [r4, #12]
 80066a2:	e7e3      	b.n	800666c <__smakebuf_r+0xc>
 80066a4:	4b0d      	ldr	r3, [pc, #52]	; (80066dc <__smakebuf_r+0x7c>)
 80066a6:	62b3      	str	r3, [r6, #40]	; 0x28
 80066a8:	89a3      	ldrh	r3, [r4, #12]
 80066aa:	6020      	str	r0, [r4, #0]
 80066ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066b0:	81a3      	strh	r3, [r4, #12]
 80066b2:	9b00      	ldr	r3, [sp, #0]
 80066b4:	6163      	str	r3, [r4, #20]
 80066b6:	9b01      	ldr	r3, [sp, #4]
 80066b8:	6120      	str	r0, [r4, #16]
 80066ba:	b15b      	cbz	r3, 80066d4 <__smakebuf_r+0x74>
 80066bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80066c0:	4630      	mov	r0, r6
 80066c2:	f000 fd79 	bl	80071b8 <_isatty_r>
 80066c6:	b128      	cbz	r0, 80066d4 <__smakebuf_r+0x74>
 80066c8:	89a3      	ldrh	r3, [r4, #12]
 80066ca:	f023 0303 	bic.w	r3, r3, #3
 80066ce:	f043 0301 	orr.w	r3, r3, #1
 80066d2:	81a3      	strh	r3, [r4, #12]
 80066d4:	89a3      	ldrh	r3, [r4, #12]
 80066d6:	431d      	orrs	r5, r3
 80066d8:	81a5      	strh	r5, [r4, #12]
 80066da:	e7cd      	b.n	8006678 <__smakebuf_r+0x18>
 80066dc:	080064b1 	.word	0x080064b1

080066e0 <malloc>:
 80066e0:	4b02      	ldr	r3, [pc, #8]	; (80066ec <malloc+0xc>)
 80066e2:	4601      	mov	r1, r0
 80066e4:	6818      	ldr	r0, [r3, #0]
 80066e6:	f000 bb45 	b.w	8006d74 <_malloc_r>
 80066ea:	bf00      	nop
 80066ec:	2000000c 	.word	0x2000000c

080066f0 <memcpy>:
 80066f0:	b510      	push	{r4, lr}
 80066f2:	1e43      	subs	r3, r0, #1
 80066f4:	440a      	add	r2, r1
 80066f6:	4291      	cmp	r1, r2
 80066f8:	d100      	bne.n	80066fc <memcpy+0xc>
 80066fa:	bd10      	pop	{r4, pc}
 80066fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006700:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006704:	e7f7      	b.n	80066f6 <memcpy+0x6>

08006706 <_Balloc>:
 8006706:	b570      	push	{r4, r5, r6, lr}
 8006708:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800670a:	4604      	mov	r4, r0
 800670c:	460e      	mov	r6, r1
 800670e:	b93d      	cbnz	r5, 8006720 <_Balloc+0x1a>
 8006710:	2010      	movs	r0, #16
 8006712:	f7ff ffe5 	bl	80066e0 <malloc>
 8006716:	6260      	str	r0, [r4, #36]	; 0x24
 8006718:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800671c:	6005      	str	r5, [r0, #0]
 800671e:	60c5      	str	r5, [r0, #12]
 8006720:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006722:	68eb      	ldr	r3, [r5, #12]
 8006724:	b183      	cbz	r3, 8006748 <_Balloc+0x42>
 8006726:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006728:	68db      	ldr	r3, [r3, #12]
 800672a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800672e:	b9b8      	cbnz	r0, 8006760 <_Balloc+0x5a>
 8006730:	2101      	movs	r1, #1
 8006732:	fa01 f506 	lsl.w	r5, r1, r6
 8006736:	1d6a      	adds	r2, r5, #5
 8006738:	0092      	lsls	r2, r2, #2
 800673a:	4620      	mov	r0, r4
 800673c:	f000 fabe 	bl	8006cbc <_calloc_r>
 8006740:	b160      	cbz	r0, 800675c <_Balloc+0x56>
 8006742:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8006746:	e00e      	b.n	8006766 <_Balloc+0x60>
 8006748:	2221      	movs	r2, #33	; 0x21
 800674a:	2104      	movs	r1, #4
 800674c:	4620      	mov	r0, r4
 800674e:	f000 fab5 	bl	8006cbc <_calloc_r>
 8006752:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006754:	60e8      	str	r0, [r5, #12]
 8006756:	68db      	ldr	r3, [r3, #12]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d1e4      	bne.n	8006726 <_Balloc+0x20>
 800675c:	2000      	movs	r0, #0
 800675e:	bd70      	pop	{r4, r5, r6, pc}
 8006760:	6802      	ldr	r2, [r0, #0]
 8006762:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8006766:	2300      	movs	r3, #0
 8006768:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800676c:	e7f7      	b.n	800675e <_Balloc+0x58>

0800676e <_Bfree>:
 800676e:	b570      	push	{r4, r5, r6, lr}
 8006770:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006772:	4606      	mov	r6, r0
 8006774:	460d      	mov	r5, r1
 8006776:	b93c      	cbnz	r4, 8006788 <_Bfree+0x1a>
 8006778:	2010      	movs	r0, #16
 800677a:	f7ff ffb1 	bl	80066e0 <malloc>
 800677e:	6270      	str	r0, [r6, #36]	; 0x24
 8006780:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006784:	6004      	str	r4, [r0, #0]
 8006786:	60c4      	str	r4, [r0, #12]
 8006788:	b13d      	cbz	r5, 800679a <_Bfree+0x2c>
 800678a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800678c:	686a      	ldr	r2, [r5, #4]
 800678e:	68db      	ldr	r3, [r3, #12]
 8006790:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006794:	6029      	str	r1, [r5, #0]
 8006796:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800679a:	bd70      	pop	{r4, r5, r6, pc}

0800679c <__multadd>:
 800679c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067a0:	690d      	ldr	r5, [r1, #16]
 80067a2:	461f      	mov	r7, r3
 80067a4:	4606      	mov	r6, r0
 80067a6:	460c      	mov	r4, r1
 80067a8:	f101 0c14 	add.w	ip, r1, #20
 80067ac:	2300      	movs	r3, #0
 80067ae:	f8dc 0000 	ldr.w	r0, [ip]
 80067b2:	b281      	uxth	r1, r0
 80067b4:	fb02 7101 	mla	r1, r2, r1, r7
 80067b8:	0c0f      	lsrs	r7, r1, #16
 80067ba:	0c00      	lsrs	r0, r0, #16
 80067bc:	fb02 7000 	mla	r0, r2, r0, r7
 80067c0:	b289      	uxth	r1, r1
 80067c2:	3301      	adds	r3, #1
 80067c4:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80067c8:	429d      	cmp	r5, r3
 80067ca:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80067ce:	f84c 1b04 	str.w	r1, [ip], #4
 80067d2:	dcec      	bgt.n	80067ae <__multadd+0x12>
 80067d4:	b1d7      	cbz	r7, 800680c <__multadd+0x70>
 80067d6:	68a3      	ldr	r3, [r4, #8]
 80067d8:	42ab      	cmp	r3, r5
 80067da:	dc12      	bgt.n	8006802 <__multadd+0x66>
 80067dc:	6861      	ldr	r1, [r4, #4]
 80067de:	4630      	mov	r0, r6
 80067e0:	3101      	adds	r1, #1
 80067e2:	f7ff ff90 	bl	8006706 <_Balloc>
 80067e6:	6922      	ldr	r2, [r4, #16]
 80067e8:	3202      	adds	r2, #2
 80067ea:	f104 010c 	add.w	r1, r4, #12
 80067ee:	4680      	mov	r8, r0
 80067f0:	0092      	lsls	r2, r2, #2
 80067f2:	300c      	adds	r0, #12
 80067f4:	f7ff ff7c 	bl	80066f0 <memcpy>
 80067f8:	4621      	mov	r1, r4
 80067fa:	4630      	mov	r0, r6
 80067fc:	f7ff ffb7 	bl	800676e <_Bfree>
 8006800:	4644      	mov	r4, r8
 8006802:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006806:	3501      	adds	r5, #1
 8006808:	615f      	str	r7, [r3, #20]
 800680a:	6125      	str	r5, [r4, #16]
 800680c:	4620      	mov	r0, r4
 800680e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006812 <__hi0bits>:
 8006812:	0c02      	lsrs	r2, r0, #16
 8006814:	0412      	lsls	r2, r2, #16
 8006816:	4603      	mov	r3, r0
 8006818:	b9b2      	cbnz	r2, 8006848 <__hi0bits+0x36>
 800681a:	0403      	lsls	r3, r0, #16
 800681c:	2010      	movs	r0, #16
 800681e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006822:	bf04      	itt	eq
 8006824:	021b      	lsleq	r3, r3, #8
 8006826:	3008      	addeq	r0, #8
 8006828:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800682c:	bf04      	itt	eq
 800682e:	011b      	lsleq	r3, r3, #4
 8006830:	3004      	addeq	r0, #4
 8006832:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006836:	bf04      	itt	eq
 8006838:	009b      	lsleq	r3, r3, #2
 800683a:	3002      	addeq	r0, #2
 800683c:	2b00      	cmp	r3, #0
 800683e:	db06      	blt.n	800684e <__hi0bits+0x3c>
 8006840:	005b      	lsls	r3, r3, #1
 8006842:	d503      	bpl.n	800684c <__hi0bits+0x3a>
 8006844:	3001      	adds	r0, #1
 8006846:	4770      	bx	lr
 8006848:	2000      	movs	r0, #0
 800684a:	e7e8      	b.n	800681e <__hi0bits+0xc>
 800684c:	2020      	movs	r0, #32
 800684e:	4770      	bx	lr

08006850 <__lo0bits>:
 8006850:	6803      	ldr	r3, [r0, #0]
 8006852:	f013 0207 	ands.w	r2, r3, #7
 8006856:	4601      	mov	r1, r0
 8006858:	d00b      	beq.n	8006872 <__lo0bits+0x22>
 800685a:	07da      	lsls	r2, r3, #31
 800685c:	d423      	bmi.n	80068a6 <__lo0bits+0x56>
 800685e:	0798      	lsls	r0, r3, #30
 8006860:	bf49      	itett	mi
 8006862:	085b      	lsrmi	r3, r3, #1
 8006864:	089b      	lsrpl	r3, r3, #2
 8006866:	2001      	movmi	r0, #1
 8006868:	600b      	strmi	r3, [r1, #0]
 800686a:	bf5c      	itt	pl
 800686c:	600b      	strpl	r3, [r1, #0]
 800686e:	2002      	movpl	r0, #2
 8006870:	4770      	bx	lr
 8006872:	b298      	uxth	r0, r3
 8006874:	b9a8      	cbnz	r0, 80068a2 <__lo0bits+0x52>
 8006876:	0c1b      	lsrs	r3, r3, #16
 8006878:	2010      	movs	r0, #16
 800687a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800687e:	bf04      	itt	eq
 8006880:	0a1b      	lsreq	r3, r3, #8
 8006882:	3008      	addeq	r0, #8
 8006884:	071a      	lsls	r2, r3, #28
 8006886:	bf04      	itt	eq
 8006888:	091b      	lsreq	r3, r3, #4
 800688a:	3004      	addeq	r0, #4
 800688c:	079a      	lsls	r2, r3, #30
 800688e:	bf04      	itt	eq
 8006890:	089b      	lsreq	r3, r3, #2
 8006892:	3002      	addeq	r0, #2
 8006894:	07da      	lsls	r2, r3, #31
 8006896:	d402      	bmi.n	800689e <__lo0bits+0x4e>
 8006898:	085b      	lsrs	r3, r3, #1
 800689a:	d006      	beq.n	80068aa <__lo0bits+0x5a>
 800689c:	3001      	adds	r0, #1
 800689e:	600b      	str	r3, [r1, #0]
 80068a0:	4770      	bx	lr
 80068a2:	4610      	mov	r0, r2
 80068a4:	e7e9      	b.n	800687a <__lo0bits+0x2a>
 80068a6:	2000      	movs	r0, #0
 80068a8:	4770      	bx	lr
 80068aa:	2020      	movs	r0, #32
 80068ac:	4770      	bx	lr

080068ae <__i2b>:
 80068ae:	b510      	push	{r4, lr}
 80068b0:	460c      	mov	r4, r1
 80068b2:	2101      	movs	r1, #1
 80068b4:	f7ff ff27 	bl	8006706 <_Balloc>
 80068b8:	2201      	movs	r2, #1
 80068ba:	6144      	str	r4, [r0, #20]
 80068bc:	6102      	str	r2, [r0, #16]
 80068be:	bd10      	pop	{r4, pc}

080068c0 <__multiply>:
 80068c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068c4:	4614      	mov	r4, r2
 80068c6:	690a      	ldr	r2, [r1, #16]
 80068c8:	6923      	ldr	r3, [r4, #16]
 80068ca:	429a      	cmp	r2, r3
 80068cc:	bfb8      	it	lt
 80068ce:	460b      	movlt	r3, r1
 80068d0:	4688      	mov	r8, r1
 80068d2:	bfbc      	itt	lt
 80068d4:	46a0      	movlt	r8, r4
 80068d6:	461c      	movlt	r4, r3
 80068d8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80068dc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80068e0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80068e4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80068e8:	eb07 0609 	add.w	r6, r7, r9
 80068ec:	42b3      	cmp	r3, r6
 80068ee:	bfb8      	it	lt
 80068f0:	3101      	addlt	r1, #1
 80068f2:	f7ff ff08 	bl	8006706 <_Balloc>
 80068f6:	f100 0514 	add.w	r5, r0, #20
 80068fa:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80068fe:	462b      	mov	r3, r5
 8006900:	2200      	movs	r2, #0
 8006902:	4573      	cmp	r3, lr
 8006904:	d316      	bcc.n	8006934 <__multiply+0x74>
 8006906:	f104 0214 	add.w	r2, r4, #20
 800690a:	f108 0114 	add.w	r1, r8, #20
 800690e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8006912:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8006916:	9300      	str	r3, [sp, #0]
 8006918:	9b00      	ldr	r3, [sp, #0]
 800691a:	9201      	str	r2, [sp, #4]
 800691c:	4293      	cmp	r3, r2
 800691e:	d80c      	bhi.n	800693a <__multiply+0x7a>
 8006920:	2e00      	cmp	r6, #0
 8006922:	dd03      	ble.n	800692c <__multiply+0x6c>
 8006924:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006928:	2b00      	cmp	r3, #0
 800692a:	d05d      	beq.n	80069e8 <__multiply+0x128>
 800692c:	6106      	str	r6, [r0, #16]
 800692e:	b003      	add	sp, #12
 8006930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006934:	f843 2b04 	str.w	r2, [r3], #4
 8006938:	e7e3      	b.n	8006902 <__multiply+0x42>
 800693a:	f8b2 b000 	ldrh.w	fp, [r2]
 800693e:	f1bb 0f00 	cmp.w	fp, #0
 8006942:	d023      	beq.n	800698c <__multiply+0xcc>
 8006944:	4689      	mov	r9, r1
 8006946:	46ac      	mov	ip, r5
 8006948:	f04f 0800 	mov.w	r8, #0
 800694c:	f859 4b04 	ldr.w	r4, [r9], #4
 8006950:	f8dc a000 	ldr.w	sl, [ip]
 8006954:	b2a3      	uxth	r3, r4
 8006956:	fa1f fa8a 	uxth.w	sl, sl
 800695a:	fb0b a303 	mla	r3, fp, r3, sl
 800695e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006962:	f8dc 4000 	ldr.w	r4, [ip]
 8006966:	4443      	add	r3, r8
 8006968:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800696c:	fb0b 840a 	mla	r4, fp, sl, r8
 8006970:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8006974:	46e2      	mov	sl, ip
 8006976:	b29b      	uxth	r3, r3
 8006978:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800697c:	454f      	cmp	r7, r9
 800697e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006982:	f84a 3b04 	str.w	r3, [sl], #4
 8006986:	d82b      	bhi.n	80069e0 <__multiply+0x120>
 8006988:	f8cc 8004 	str.w	r8, [ip, #4]
 800698c:	9b01      	ldr	r3, [sp, #4]
 800698e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8006992:	3204      	adds	r2, #4
 8006994:	f1ba 0f00 	cmp.w	sl, #0
 8006998:	d020      	beq.n	80069dc <__multiply+0x11c>
 800699a:	682b      	ldr	r3, [r5, #0]
 800699c:	4689      	mov	r9, r1
 800699e:	46a8      	mov	r8, r5
 80069a0:	f04f 0b00 	mov.w	fp, #0
 80069a4:	f8b9 c000 	ldrh.w	ip, [r9]
 80069a8:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80069ac:	fb0a 440c 	mla	r4, sl, ip, r4
 80069b0:	445c      	add	r4, fp
 80069b2:	46c4      	mov	ip, r8
 80069b4:	b29b      	uxth	r3, r3
 80069b6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80069ba:	f84c 3b04 	str.w	r3, [ip], #4
 80069be:	f859 3b04 	ldr.w	r3, [r9], #4
 80069c2:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80069c6:	0c1b      	lsrs	r3, r3, #16
 80069c8:	fb0a b303 	mla	r3, sl, r3, fp
 80069cc:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80069d0:	454f      	cmp	r7, r9
 80069d2:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80069d6:	d805      	bhi.n	80069e4 <__multiply+0x124>
 80069d8:	f8c8 3004 	str.w	r3, [r8, #4]
 80069dc:	3504      	adds	r5, #4
 80069de:	e79b      	b.n	8006918 <__multiply+0x58>
 80069e0:	46d4      	mov	ip, sl
 80069e2:	e7b3      	b.n	800694c <__multiply+0x8c>
 80069e4:	46e0      	mov	r8, ip
 80069e6:	e7dd      	b.n	80069a4 <__multiply+0xe4>
 80069e8:	3e01      	subs	r6, #1
 80069ea:	e799      	b.n	8006920 <__multiply+0x60>

080069ec <__pow5mult>:
 80069ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069f0:	4615      	mov	r5, r2
 80069f2:	f012 0203 	ands.w	r2, r2, #3
 80069f6:	4606      	mov	r6, r0
 80069f8:	460f      	mov	r7, r1
 80069fa:	d007      	beq.n	8006a0c <__pow5mult+0x20>
 80069fc:	3a01      	subs	r2, #1
 80069fe:	4c21      	ldr	r4, [pc, #132]	; (8006a84 <__pow5mult+0x98>)
 8006a00:	2300      	movs	r3, #0
 8006a02:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006a06:	f7ff fec9 	bl	800679c <__multadd>
 8006a0a:	4607      	mov	r7, r0
 8006a0c:	10ad      	asrs	r5, r5, #2
 8006a0e:	d035      	beq.n	8006a7c <__pow5mult+0x90>
 8006a10:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006a12:	b93c      	cbnz	r4, 8006a24 <__pow5mult+0x38>
 8006a14:	2010      	movs	r0, #16
 8006a16:	f7ff fe63 	bl	80066e0 <malloc>
 8006a1a:	6270      	str	r0, [r6, #36]	; 0x24
 8006a1c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006a20:	6004      	str	r4, [r0, #0]
 8006a22:	60c4      	str	r4, [r0, #12]
 8006a24:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006a28:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006a2c:	b94c      	cbnz	r4, 8006a42 <__pow5mult+0x56>
 8006a2e:	f240 2171 	movw	r1, #625	; 0x271
 8006a32:	4630      	mov	r0, r6
 8006a34:	f7ff ff3b 	bl	80068ae <__i2b>
 8006a38:	2300      	movs	r3, #0
 8006a3a:	f8c8 0008 	str.w	r0, [r8, #8]
 8006a3e:	4604      	mov	r4, r0
 8006a40:	6003      	str	r3, [r0, #0]
 8006a42:	f04f 0800 	mov.w	r8, #0
 8006a46:	07eb      	lsls	r3, r5, #31
 8006a48:	d50a      	bpl.n	8006a60 <__pow5mult+0x74>
 8006a4a:	4639      	mov	r1, r7
 8006a4c:	4622      	mov	r2, r4
 8006a4e:	4630      	mov	r0, r6
 8006a50:	f7ff ff36 	bl	80068c0 <__multiply>
 8006a54:	4639      	mov	r1, r7
 8006a56:	4681      	mov	r9, r0
 8006a58:	4630      	mov	r0, r6
 8006a5a:	f7ff fe88 	bl	800676e <_Bfree>
 8006a5e:	464f      	mov	r7, r9
 8006a60:	106d      	asrs	r5, r5, #1
 8006a62:	d00b      	beq.n	8006a7c <__pow5mult+0x90>
 8006a64:	6820      	ldr	r0, [r4, #0]
 8006a66:	b938      	cbnz	r0, 8006a78 <__pow5mult+0x8c>
 8006a68:	4622      	mov	r2, r4
 8006a6a:	4621      	mov	r1, r4
 8006a6c:	4630      	mov	r0, r6
 8006a6e:	f7ff ff27 	bl	80068c0 <__multiply>
 8006a72:	6020      	str	r0, [r4, #0]
 8006a74:	f8c0 8000 	str.w	r8, [r0]
 8006a78:	4604      	mov	r4, r0
 8006a7a:	e7e4      	b.n	8006a46 <__pow5mult+0x5a>
 8006a7c:	4638      	mov	r0, r7
 8006a7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a82:	bf00      	nop
 8006a84:	080074d0 	.word	0x080074d0

08006a88 <__lshift>:
 8006a88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a8c:	460c      	mov	r4, r1
 8006a8e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006a92:	6923      	ldr	r3, [r4, #16]
 8006a94:	6849      	ldr	r1, [r1, #4]
 8006a96:	eb0a 0903 	add.w	r9, sl, r3
 8006a9a:	68a3      	ldr	r3, [r4, #8]
 8006a9c:	4607      	mov	r7, r0
 8006a9e:	4616      	mov	r6, r2
 8006aa0:	f109 0501 	add.w	r5, r9, #1
 8006aa4:	42ab      	cmp	r3, r5
 8006aa6:	db32      	blt.n	8006b0e <__lshift+0x86>
 8006aa8:	4638      	mov	r0, r7
 8006aaa:	f7ff fe2c 	bl	8006706 <_Balloc>
 8006aae:	2300      	movs	r3, #0
 8006ab0:	4680      	mov	r8, r0
 8006ab2:	f100 0114 	add.w	r1, r0, #20
 8006ab6:	461a      	mov	r2, r3
 8006ab8:	4553      	cmp	r3, sl
 8006aba:	db2b      	blt.n	8006b14 <__lshift+0x8c>
 8006abc:	6920      	ldr	r0, [r4, #16]
 8006abe:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006ac2:	f104 0314 	add.w	r3, r4, #20
 8006ac6:	f016 021f 	ands.w	r2, r6, #31
 8006aca:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006ace:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006ad2:	d025      	beq.n	8006b20 <__lshift+0x98>
 8006ad4:	f1c2 0e20 	rsb	lr, r2, #32
 8006ad8:	2000      	movs	r0, #0
 8006ada:	681e      	ldr	r6, [r3, #0]
 8006adc:	468a      	mov	sl, r1
 8006ade:	4096      	lsls	r6, r2
 8006ae0:	4330      	orrs	r0, r6
 8006ae2:	f84a 0b04 	str.w	r0, [sl], #4
 8006ae6:	f853 0b04 	ldr.w	r0, [r3], #4
 8006aea:	459c      	cmp	ip, r3
 8006aec:	fa20 f00e 	lsr.w	r0, r0, lr
 8006af0:	d814      	bhi.n	8006b1c <__lshift+0x94>
 8006af2:	6048      	str	r0, [r1, #4]
 8006af4:	b108      	cbz	r0, 8006afa <__lshift+0x72>
 8006af6:	f109 0502 	add.w	r5, r9, #2
 8006afa:	3d01      	subs	r5, #1
 8006afc:	4638      	mov	r0, r7
 8006afe:	f8c8 5010 	str.w	r5, [r8, #16]
 8006b02:	4621      	mov	r1, r4
 8006b04:	f7ff fe33 	bl	800676e <_Bfree>
 8006b08:	4640      	mov	r0, r8
 8006b0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b0e:	3101      	adds	r1, #1
 8006b10:	005b      	lsls	r3, r3, #1
 8006b12:	e7c7      	b.n	8006aa4 <__lshift+0x1c>
 8006b14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006b18:	3301      	adds	r3, #1
 8006b1a:	e7cd      	b.n	8006ab8 <__lshift+0x30>
 8006b1c:	4651      	mov	r1, sl
 8006b1e:	e7dc      	b.n	8006ada <__lshift+0x52>
 8006b20:	3904      	subs	r1, #4
 8006b22:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b26:	f841 2f04 	str.w	r2, [r1, #4]!
 8006b2a:	459c      	cmp	ip, r3
 8006b2c:	d8f9      	bhi.n	8006b22 <__lshift+0x9a>
 8006b2e:	e7e4      	b.n	8006afa <__lshift+0x72>

08006b30 <__mcmp>:
 8006b30:	6903      	ldr	r3, [r0, #16]
 8006b32:	690a      	ldr	r2, [r1, #16]
 8006b34:	1a9b      	subs	r3, r3, r2
 8006b36:	b530      	push	{r4, r5, lr}
 8006b38:	d10c      	bne.n	8006b54 <__mcmp+0x24>
 8006b3a:	0092      	lsls	r2, r2, #2
 8006b3c:	3014      	adds	r0, #20
 8006b3e:	3114      	adds	r1, #20
 8006b40:	1884      	adds	r4, r0, r2
 8006b42:	4411      	add	r1, r2
 8006b44:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006b48:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006b4c:	4295      	cmp	r5, r2
 8006b4e:	d003      	beq.n	8006b58 <__mcmp+0x28>
 8006b50:	d305      	bcc.n	8006b5e <__mcmp+0x2e>
 8006b52:	2301      	movs	r3, #1
 8006b54:	4618      	mov	r0, r3
 8006b56:	bd30      	pop	{r4, r5, pc}
 8006b58:	42a0      	cmp	r0, r4
 8006b5a:	d3f3      	bcc.n	8006b44 <__mcmp+0x14>
 8006b5c:	e7fa      	b.n	8006b54 <__mcmp+0x24>
 8006b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8006b62:	e7f7      	b.n	8006b54 <__mcmp+0x24>

08006b64 <__mdiff>:
 8006b64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b68:	460d      	mov	r5, r1
 8006b6a:	4607      	mov	r7, r0
 8006b6c:	4611      	mov	r1, r2
 8006b6e:	4628      	mov	r0, r5
 8006b70:	4614      	mov	r4, r2
 8006b72:	f7ff ffdd 	bl	8006b30 <__mcmp>
 8006b76:	1e06      	subs	r6, r0, #0
 8006b78:	d108      	bne.n	8006b8c <__mdiff+0x28>
 8006b7a:	4631      	mov	r1, r6
 8006b7c:	4638      	mov	r0, r7
 8006b7e:	f7ff fdc2 	bl	8006706 <_Balloc>
 8006b82:	2301      	movs	r3, #1
 8006b84:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006b88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b8c:	bfa4      	itt	ge
 8006b8e:	4623      	movge	r3, r4
 8006b90:	462c      	movge	r4, r5
 8006b92:	4638      	mov	r0, r7
 8006b94:	6861      	ldr	r1, [r4, #4]
 8006b96:	bfa6      	itte	ge
 8006b98:	461d      	movge	r5, r3
 8006b9a:	2600      	movge	r6, #0
 8006b9c:	2601      	movlt	r6, #1
 8006b9e:	f7ff fdb2 	bl	8006706 <_Balloc>
 8006ba2:	692b      	ldr	r3, [r5, #16]
 8006ba4:	60c6      	str	r6, [r0, #12]
 8006ba6:	6926      	ldr	r6, [r4, #16]
 8006ba8:	f105 0914 	add.w	r9, r5, #20
 8006bac:	f104 0214 	add.w	r2, r4, #20
 8006bb0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8006bb4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8006bb8:	f100 0514 	add.w	r5, r0, #20
 8006bbc:	f04f 0e00 	mov.w	lr, #0
 8006bc0:	f852 ab04 	ldr.w	sl, [r2], #4
 8006bc4:	f859 4b04 	ldr.w	r4, [r9], #4
 8006bc8:	fa1e f18a 	uxtah	r1, lr, sl
 8006bcc:	b2a3      	uxth	r3, r4
 8006bce:	1ac9      	subs	r1, r1, r3
 8006bd0:	0c23      	lsrs	r3, r4, #16
 8006bd2:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8006bd6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006bda:	b289      	uxth	r1, r1
 8006bdc:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8006be0:	45c8      	cmp	r8, r9
 8006be2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006be6:	4694      	mov	ip, r2
 8006be8:	f845 3b04 	str.w	r3, [r5], #4
 8006bec:	d8e8      	bhi.n	8006bc0 <__mdiff+0x5c>
 8006bee:	45bc      	cmp	ip, r7
 8006bf0:	d304      	bcc.n	8006bfc <__mdiff+0x98>
 8006bf2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8006bf6:	b183      	cbz	r3, 8006c1a <__mdiff+0xb6>
 8006bf8:	6106      	str	r6, [r0, #16]
 8006bfa:	e7c5      	b.n	8006b88 <__mdiff+0x24>
 8006bfc:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006c00:	fa1e f381 	uxtah	r3, lr, r1
 8006c04:	141a      	asrs	r2, r3, #16
 8006c06:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006c0a:	b29b      	uxth	r3, r3
 8006c0c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006c10:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8006c14:	f845 3b04 	str.w	r3, [r5], #4
 8006c18:	e7e9      	b.n	8006bee <__mdiff+0x8a>
 8006c1a:	3e01      	subs	r6, #1
 8006c1c:	e7e9      	b.n	8006bf2 <__mdiff+0x8e>

08006c1e <__d2b>:
 8006c1e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006c22:	460e      	mov	r6, r1
 8006c24:	2101      	movs	r1, #1
 8006c26:	ec59 8b10 	vmov	r8, r9, d0
 8006c2a:	4615      	mov	r5, r2
 8006c2c:	f7ff fd6b 	bl	8006706 <_Balloc>
 8006c30:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006c34:	4607      	mov	r7, r0
 8006c36:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006c3a:	bb34      	cbnz	r4, 8006c8a <__d2b+0x6c>
 8006c3c:	9301      	str	r3, [sp, #4]
 8006c3e:	f1b8 0300 	subs.w	r3, r8, #0
 8006c42:	d027      	beq.n	8006c94 <__d2b+0x76>
 8006c44:	a802      	add	r0, sp, #8
 8006c46:	f840 3d08 	str.w	r3, [r0, #-8]!
 8006c4a:	f7ff fe01 	bl	8006850 <__lo0bits>
 8006c4e:	9900      	ldr	r1, [sp, #0]
 8006c50:	b1f0      	cbz	r0, 8006c90 <__d2b+0x72>
 8006c52:	9a01      	ldr	r2, [sp, #4]
 8006c54:	f1c0 0320 	rsb	r3, r0, #32
 8006c58:	fa02 f303 	lsl.w	r3, r2, r3
 8006c5c:	430b      	orrs	r3, r1
 8006c5e:	40c2      	lsrs	r2, r0
 8006c60:	617b      	str	r3, [r7, #20]
 8006c62:	9201      	str	r2, [sp, #4]
 8006c64:	9b01      	ldr	r3, [sp, #4]
 8006c66:	61bb      	str	r3, [r7, #24]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	bf14      	ite	ne
 8006c6c:	2102      	movne	r1, #2
 8006c6e:	2101      	moveq	r1, #1
 8006c70:	6139      	str	r1, [r7, #16]
 8006c72:	b1c4      	cbz	r4, 8006ca6 <__d2b+0x88>
 8006c74:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006c78:	4404      	add	r4, r0
 8006c7a:	6034      	str	r4, [r6, #0]
 8006c7c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006c80:	6028      	str	r0, [r5, #0]
 8006c82:	4638      	mov	r0, r7
 8006c84:	b003      	add	sp, #12
 8006c86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006c8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006c8e:	e7d5      	b.n	8006c3c <__d2b+0x1e>
 8006c90:	6179      	str	r1, [r7, #20]
 8006c92:	e7e7      	b.n	8006c64 <__d2b+0x46>
 8006c94:	a801      	add	r0, sp, #4
 8006c96:	f7ff fddb 	bl	8006850 <__lo0bits>
 8006c9a:	9b01      	ldr	r3, [sp, #4]
 8006c9c:	617b      	str	r3, [r7, #20]
 8006c9e:	2101      	movs	r1, #1
 8006ca0:	6139      	str	r1, [r7, #16]
 8006ca2:	3020      	adds	r0, #32
 8006ca4:	e7e5      	b.n	8006c72 <__d2b+0x54>
 8006ca6:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8006caa:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006cae:	6030      	str	r0, [r6, #0]
 8006cb0:	6918      	ldr	r0, [r3, #16]
 8006cb2:	f7ff fdae 	bl	8006812 <__hi0bits>
 8006cb6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006cba:	e7e1      	b.n	8006c80 <__d2b+0x62>

08006cbc <_calloc_r>:
 8006cbc:	b538      	push	{r3, r4, r5, lr}
 8006cbe:	fb02 f401 	mul.w	r4, r2, r1
 8006cc2:	4621      	mov	r1, r4
 8006cc4:	f000 f856 	bl	8006d74 <_malloc_r>
 8006cc8:	4605      	mov	r5, r0
 8006cca:	b118      	cbz	r0, 8006cd4 <_calloc_r+0x18>
 8006ccc:	4622      	mov	r2, r4
 8006cce:	2100      	movs	r1, #0
 8006cd0:	f7fd ff36 	bl	8004b40 <memset>
 8006cd4:	4628      	mov	r0, r5
 8006cd6:	bd38      	pop	{r3, r4, r5, pc}

08006cd8 <_free_r>:
 8006cd8:	b538      	push	{r3, r4, r5, lr}
 8006cda:	4605      	mov	r5, r0
 8006cdc:	2900      	cmp	r1, #0
 8006cde:	d045      	beq.n	8006d6c <_free_r+0x94>
 8006ce0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ce4:	1f0c      	subs	r4, r1, #4
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	bfb8      	it	lt
 8006cea:	18e4      	addlt	r4, r4, r3
 8006cec:	f000 fa98 	bl	8007220 <__malloc_lock>
 8006cf0:	4a1f      	ldr	r2, [pc, #124]	; (8006d70 <_free_r+0x98>)
 8006cf2:	6813      	ldr	r3, [r2, #0]
 8006cf4:	4610      	mov	r0, r2
 8006cf6:	b933      	cbnz	r3, 8006d06 <_free_r+0x2e>
 8006cf8:	6063      	str	r3, [r4, #4]
 8006cfa:	6014      	str	r4, [r2, #0]
 8006cfc:	4628      	mov	r0, r5
 8006cfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d02:	f000 ba8e 	b.w	8007222 <__malloc_unlock>
 8006d06:	42a3      	cmp	r3, r4
 8006d08:	d90c      	bls.n	8006d24 <_free_r+0x4c>
 8006d0a:	6821      	ldr	r1, [r4, #0]
 8006d0c:	1862      	adds	r2, r4, r1
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	bf04      	itt	eq
 8006d12:	681a      	ldreq	r2, [r3, #0]
 8006d14:	685b      	ldreq	r3, [r3, #4]
 8006d16:	6063      	str	r3, [r4, #4]
 8006d18:	bf04      	itt	eq
 8006d1a:	1852      	addeq	r2, r2, r1
 8006d1c:	6022      	streq	r2, [r4, #0]
 8006d1e:	6004      	str	r4, [r0, #0]
 8006d20:	e7ec      	b.n	8006cfc <_free_r+0x24>
 8006d22:	4613      	mov	r3, r2
 8006d24:	685a      	ldr	r2, [r3, #4]
 8006d26:	b10a      	cbz	r2, 8006d2c <_free_r+0x54>
 8006d28:	42a2      	cmp	r2, r4
 8006d2a:	d9fa      	bls.n	8006d22 <_free_r+0x4a>
 8006d2c:	6819      	ldr	r1, [r3, #0]
 8006d2e:	1858      	adds	r0, r3, r1
 8006d30:	42a0      	cmp	r0, r4
 8006d32:	d10b      	bne.n	8006d4c <_free_r+0x74>
 8006d34:	6820      	ldr	r0, [r4, #0]
 8006d36:	4401      	add	r1, r0
 8006d38:	1858      	adds	r0, r3, r1
 8006d3a:	4282      	cmp	r2, r0
 8006d3c:	6019      	str	r1, [r3, #0]
 8006d3e:	d1dd      	bne.n	8006cfc <_free_r+0x24>
 8006d40:	6810      	ldr	r0, [r2, #0]
 8006d42:	6852      	ldr	r2, [r2, #4]
 8006d44:	605a      	str	r2, [r3, #4]
 8006d46:	4401      	add	r1, r0
 8006d48:	6019      	str	r1, [r3, #0]
 8006d4a:	e7d7      	b.n	8006cfc <_free_r+0x24>
 8006d4c:	d902      	bls.n	8006d54 <_free_r+0x7c>
 8006d4e:	230c      	movs	r3, #12
 8006d50:	602b      	str	r3, [r5, #0]
 8006d52:	e7d3      	b.n	8006cfc <_free_r+0x24>
 8006d54:	6820      	ldr	r0, [r4, #0]
 8006d56:	1821      	adds	r1, r4, r0
 8006d58:	428a      	cmp	r2, r1
 8006d5a:	bf04      	itt	eq
 8006d5c:	6811      	ldreq	r1, [r2, #0]
 8006d5e:	6852      	ldreq	r2, [r2, #4]
 8006d60:	6062      	str	r2, [r4, #4]
 8006d62:	bf04      	itt	eq
 8006d64:	1809      	addeq	r1, r1, r0
 8006d66:	6021      	streq	r1, [r4, #0]
 8006d68:	605c      	str	r4, [r3, #4]
 8006d6a:	e7c7      	b.n	8006cfc <_free_r+0x24>
 8006d6c:	bd38      	pop	{r3, r4, r5, pc}
 8006d6e:	bf00      	nop
 8006d70:	200001fc 	.word	0x200001fc

08006d74 <_malloc_r>:
 8006d74:	b570      	push	{r4, r5, r6, lr}
 8006d76:	1ccd      	adds	r5, r1, #3
 8006d78:	f025 0503 	bic.w	r5, r5, #3
 8006d7c:	3508      	adds	r5, #8
 8006d7e:	2d0c      	cmp	r5, #12
 8006d80:	bf38      	it	cc
 8006d82:	250c      	movcc	r5, #12
 8006d84:	2d00      	cmp	r5, #0
 8006d86:	4606      	mov	r6, r0
 8006d88:	db01      	blt.n	8006d8e <_malloc_r+0x1a>
 8006d8a:	42a9      	cmp	r1, r5
 8006d8c:	d903      	bls.n	8006d96 <_malloc_r+0x22>
 8006d8e:	230c      	movs	r3, #12
 8006d90:	6033      	str	r3, [r6, #0]
 8006d92:	2000      	movs	r0, #0
 8006d94:	bd70      	pop	{r4, r5, r6, pc}
 8006d96:	f000 fa43 	bl	8007220 <__malloc_lock>
 8006d9a:	4a21      	ldr	r2, [pc, #132]	; (8006e20 <_malloc_r+0xac>)
 8006d9c:	6814      	ldr	r4, [r2, #0]
 8006d9e:	4621      	mov	r1, r4
 8006da0:	b991      	cbnz	r1, 8006dc8 <_malloc_r+0x54>
 8006da2:	4c20      	ldr	r4, [pc, #128]	; (8006e24 <_malloc_r+0xb0>)
 8006da4:	6823      	ldr	r3, [r4, #0]
 8006da6:	b91b      	cbnz	r3, 8006db0 <_malloc_r+0x3c>
 8006da8:	4630      	mov	r0, r6
 8006daa:	f000 f97d 	bl	80070a8 <_sbrk_r>
 8006dae:	6020      	str	r0, [r4, #0]
 8006db0:	4629      	mov	r1, r5
 8006db2:	4630      	mov	r0, r6
 8006db4:	f000 f978 	bl	80070a8 <_sbrk_r>
 8006db8:	1c43      	adds	r3, r0, #1
 8006dba:	d124      	bne.n	8006e06 <_malloc_r+0x92>
 8006dbc:	230c      	movs	r3, #12
 8006dbe:	6033      	str	r3, [r6, #0]
 8006dc0:	4630      	mov	r0, r6
 8006dc2:	f000 fa2e 	bl	8007222 <__malloc_unlock>
 8006dc6:	e7e4      	b.n	8006d92 <_malloc_r+0x1e>
 8006dc8:	680b      	ldr	r3, [r1, #0]
 8006dca:	1b5b      	subs	r3, r3, r5
 8006dcc:	d418      	bmi.n	8006e00 <_malloc_r+0x8c>
 8006dce:	2b0b      	cmp	r3, #11
 8006dd0:	d90f      	bls.n	8006df2 <_malloc_r+0x7e>
 8006dd2:	600b      	str	r3, [r1, #0]
 8006dd4:	50cd      	str	r5, [r1, r3]
 8006dd6:	18cc      	adds	r4, r1, r3
 8006dd8:	4630      	mov	r0, r6
 8006dda:	f000 fa22 	bl	8007222 <__malloc_unlock>
 8006dde:	f104 000b 	add.w	r0, r4, #11
 8006de2:	1d23      	adds	r3, r4, #4
 8006de4:	f020 0007 	bic.w	r0, r0, #7
 8006de8:	1ac3      	subs	r3, r0, r3
 8006dea:	d0d3      	beq.n	8006d94 <_malloc_r+0x20>
 8006dec:	425a      	negs	r2, r3
 8006dee:	50e2      	str	r2, [r4, r3]
 8006df0:	e7d0      	b.n	8006d94 <_malloc_r+0x20>
 8006df2:	428c      	cmp	r4, r1
 8006df4:	684b      	ldr	r3, [r1, #4]
 8006df6:	bf16      	itet	ne
 8006df8:	6063      	strne	r3, [r4, #4]
 8006dfa:	6013      	streq	r3, [r2, #0]
 8006dfc:	460c      	movne	r4, r1
 8006dfe:	e7eb      	b.n	8006dd8 <_malloc_r+0x64>
 8006e00:	460c      	mov	r4, r1
 8006e02:	6849      	ldr	r1, [r1, #4]
 8006e04:	e7cc      	b.n	8006da0 <_malloc_r+0x2c>
 8006e06:	1cc4      	adds	r4, r0, #3
 8006e08:	f024 0403 	bic.w	r4, r4, #3
 8006e0c:	42a0      	cmp	r0, r4
 8006e0e:	d005      	beq.n	8006e1c <_malloc_r+0xa8>
 8006e10:	1a21      	subs	r1, r4, r0
 8006e12:	4630      	mov	r0, r6
 8006e14:	f000 f948 	bl	80070a8 <_sbrk_r>
 8006e18:	3001      	adds	r0, #1
 8006e1a:	d0cf      	beq.n	8006dbc <_malloc_r+0x48>
 8006e1c:	6025      	str	r5, [r4, #0]
 8006e1e:	e7db      	b.n	8006dd8 <_malloc_r+0x64>
 8006e20:	200001fc 	.word	0x200001fc
 8006e24:	20000200 	.word	0x20000200

08006e28 <__sfputc_r>:
 8006e28:	6893      	ldr	r3, [r2, #8]
 8006e2a:	3b01      	subs	r3, #1
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	b410      	push	{r4}
 8006e30:	6093      	str	r3, [r2, #8]
 8006e32:	da08      	bge.n	8006e46 <__sfputc_r+0x1e>
 8006e34:	6994      	ldr	r4, [r2, #24]
 8006e36:	42a3      	cmp	r3, r4
 8006e38:	db01      	blt.n	8006e3e <__sfputc_r+0x16>
 8006e3a:	290a      	cmp	r1, #10
 8006e3c:	d103      	bne.n	8006e46 <__sfputc_r+0x1e>
 8006e3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e42:	f7fe bb5d 	b.w	8005500 <__swbuf_r>
 8006e46:	6813      	ldr	r3, [r2, #0]
 8006e48:	1c58      	adds	r0, r3, #1
 8006e4a:	6010      	str	r0, [r2, #0]
 8006e4c:	7019      	strb	r1, [r3, #0]
 8006e4e:	4608      	mov	r0, r1
 8006e50:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e54:	4770      	bx	lr

08006e56 <__sfputs_r>:
 8006e56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e58:	4606      	mov	r6, r0
 8006e5a:	460f      	mov	r7, r1
 8006e5c:	4614      	mov	r4, r2
 8006e5e:	18d5      	adds	r5, r2, r3
 8006e60:	42ac      	cmp	r4, r5
 8006e62:	d101      	bne.n	8006e68 <__sfputs_r+0x12>
 8006e64:	2000      	movs	r0, #0
 8006e66:	e007      	b.n	8006e78 <__sfputs_r+0x22>
 8006e68:	463a      	mov	r2, r7
 8006e6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e6e:	4630      	mov	r0, r6
 8006e70:	f7ff ffda 	bl	8006e28 <__sfputc_r>
 8006e74:	1c43      	adds	r3, r0, #1
 8006e76:	d1f3      	bne.n	8006e60 <__sfputs_r+0xa>
 8006e78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006e7c <_vfiprintf_r>:
 8006e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e80:	460c      	mov	r4, r1
 8006e82:	b09d      	sub	sp, #116	; 0x74
 8006e84:	4617      	mov	r7, r2
 8006e86:	461d      	mov	r5, r3
 8006e88:	4606      	mov	r6, r0
 8006e8a:	b118      	cbz	r0, 8006e94 <_vfiprintf_r+0x18>
 8006e8c:	6983      	ldr	r3, [r0, #24]
 8006e8e:	b90b      	cbnz	r3, 8006e94 <_vfiprintf_r+0x18>
 8006e90:	f7ff fb2a 	bl	80064e8 <__sinit>
 8006e94:	4b7c      	ldr	r3, [pc, #496]	; (8007088 <_vfiprintf_r+0x20c>)
 8006e96:	429c      	cmp	r4, r3
 8006e98:	d158      	bne.n	8006f4c <_vfiprintf_r+0xd0>
 8006e9a:	6874      	ldr	r4, [r6, #4]
 8006e9c:	89a3      	ldrh	r3, [r4, #12]
 8006e9e:	0718      	lsls	r0, r3, #28
 8006ea0:	d55e      	bpl.n	8006f60 <_vfiprintf_r+0xe4>
 8006ea2:	6923      	ldr	r3, [r4, #16]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d05b      	beq.n	8006f60 <_vfiprintf_r+0xe4>
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	9309      	str	r3, [sp, #36]	; 0x24
 8006eac:	2320      	movs	r3, #32
 8006eae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006eb2:	2330      	movs	r3, #48	; 0x30
 8006eb4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006eb8:	9503      	str	r5, [sp, #12]
 8006eba:	f04f 0b01 	mov.w	fp, #1
 8006ebe:	46b8      	mov	r8, r7
 8006ec0:	4645      	mov	r5, r8
 8006ec2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006ec6:	b10b      	cbz	r3, 8006ecc <_vfiprintf_r+0x50>
 8006ec8:	2b25      	cmp	r3, #37	; 0x25
 8006eca:	d154      	bne.n	8006f76 <_vfiprintf_r+0xfa>
 8006ecc:	ebb8 0a07 	subs.w	sl, r8, r7
 8006ed0:	d00b      	beq.n	8006eea <_vfiprintf_r+0x6e>
 8006ed2:	4653      	mov	r3, sl
 8006ed4:	463a      	mov	r2, r7
 8006ed6:	4621      	mov	r1, r4
 8006ed8:	4630      	mov	r0, r6
 8006eda:	f7ff ffbc 	bl	8006e56 <__sfputs_r>
 8006ede:	3001      	adds	r0, #1
 8006ee0:	f000 80c2 	beq.w	8007068 <_vfiprintf_r+0x1ec>
 8006ee4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ee6:	4453      	add	r3, sl
 8006ee8:	9309      	str	r3, [sp, #36]	; 0x24
 8006eea:	f898 3000 	ldrb.w	r3, [r8]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	f000 80ba 	beq.w	8007068 <_vfiprintf_r+0x1ec>
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	f04f 32ff 	mov.w	r2, #4294967295
 8006efa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006efe:	9304      	str	r3, [sp, #16]
 8006f00:	9307      	str	r3, [sp, #28]
 8006f02:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006f06:	931a      	str	r3, [sp, #104]	; 0x68
 8006f08:	46a8      	mov	r8, r5
 8006f0a:	2205      	movs	r2, #5
 8006f0c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8006f10:	485e      	ldr	r0, [pc, #376]	; (800708c <_vfiprintf_r+0x210>)
 8006f12:	f7f9 f965 	bl	80001e0 <memchr>
 8006f16:	9b04      	ldr	r3, [sp, #16]
 8006f18:	bb78      	cbnz	r0, 8006f7a <_vfiprintf_r+0xfe>
 8006f1a:	06d9      	lsls	r1, r3, #27
 8006f1c:	bf44      	itt	mi
 8006f1e:	2220      	movmi	r2, #32
 8006f20:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006f24:	071a      	lsls	r2, r3, #28
 8006f26:	bf44      	itt	mi
 8006f28:	222b      	movmi	r2, #43	; 0x2b
 8006f2a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006f2e:	782a      	ldrb	r2, [r5, #0]
 8006f30:	2a2a      	cmp	r2, #42	; 0x2a
 8006f32:	d02a      	beq.n	8006f8a <_vfiprintf_r+0x10e>
 8006f34:	9a07      	ldr	r2, [sp, #28]
 8006f36:	46a8      	mov	r8, r5
 8006f38:	2000      	movs	r0, #0
 8006f3a:	250a      	movs	r5, #10
 8006f3c:	4641      	mov	r1, r8
 8006f3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f42:	3b30      	subs	r3, #48	; 0x30
 8006f44:	2b09      	cmp	r3, #9
 8006f46:	d969      	bls.n	800701c <_vfiprintf_r+0x1a0>
 8006f48:	b360      	cbz	r0, 8006fa4 <_vfiprintf_r+0x128>
 8006f4a:	e024      	b.n	8006f96 <_vfiprintf_r+0x11a>
 8006f4c:	4b50      	ldr	r3, [pc, #320]	; (8007090 <_vfiprintf_r+0x214>)
 8006f4e:	429c      	cmp	r4, r3
 8006f50:	d101      	bne.n	8006f56 <_vfiprintf_r+0xda>
 8006f52:	68b4      	ldr	r4, [r6, #8]
 8006f54:	e7a2      	b.n	8006e9c <_vfiprintf_r+0x20>
 8006f56:	4b4f      	ldr	r3, [pc, #316]	; (8007094 <_vfiprintf_r+0x218>)
 8006f58:	429c      	cmp	r4, r3
 8006f5a:	bf08      	it	eq
 8006f5c:	68f4      	ldreq	r4, [r6, #12]
 8006f5e:	e79d      	b.n	8006e9c <_vfiprintf_r+0x20>
 8006f60:	4621      	mov	r1, r4
 8006f62:	4630      	mov	r0, r6
 8006f64:	f7fe fb1e 	bl	80055a4 <__swsetup_r>
 8006f68:	2800      	cmp	r0, #0
 8006f6a:	d09d      	beq.n	8006ea8 <_vfiprintf_r+0x2c>
 8006f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8006f70:	b01d      	add	sp, #116	; 0x74
 8006f72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f76:	46a8      	mov	r8, r5
 8006f78:	e7a2      	b.n	8006ec0 <_vfiprintf_r+0x44>
 8006f7a:	4a44      	ldr	r2, [pc, #272]	; (800708c <_vfiprintf_r+0x210>)
 8006f7c:	1a80      	subs	r0, r0, r2
 8006f7e:	fa0b f000 	lsl.w	r0, fp, r0
 8006f82:	4318      	orrs	r0, r3
 8006f84:	9004      	str	r0, [sp, #16]
 8006f86:	4645      	mov	r5, r8
 8006f88:	e7be      	b.n	8006f08 <_vfiprintf_r+0x8c>
 8006f8a:	9a03      	ldr	r2, [sp, #12]
 8006f8c:	1d11      	adds	r1, r2, #4
 8006f8e:	6812      	ldr	r2, [r2, #0]
 8006f90:	9103      	str	r1, [sp, #12]
 8006f92:	2a00      	cmp	r2, #0
 8006f94:	db01      	blt.n	8006f9a <_vfiprintf_r+0x11e>
 8006f96:	9207      	str	r2, [sp, #28]
 8006f98:	e004      	b.n	8006fa4 <_vfiprintf_r+0x128>
 8006f9a:	4252      	negs	r2, r2
 8006f9c:	f043 0302 	orr.w	r3, r3, #2
 8006fa0:	9207      	str	r2, [sp, #28]
 8006fa2:	9304      	str	r3, [sp, #16]
 8006fa4:	f898 3000 	ldrb.w	r3, [r8]
 8006fa8:	2b2e      	cmp	r3, #46	; 0x2e
 8006faa:	d10e      	bne.n	8006fca <_vfiprintf_r+0x14e>
 8006fac:	f898 3001 	ldrb.w	r3, [r8, #1]
 8006fb0:	2b2a      	cmp	r3, #42	; 0x2a
 8006fb2:	d138      	bne.n	8007026 <_vfiprintf_r+0x1aa>
 8006fb4:	9b03      	ldr	r3, [sp, #12]
 8006fb6:	1d1a      	adds	r2, r3, #4
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	9203      	str	r2, [sp, #12]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	bfb8      	it	lt
 8006fc0:	f04f 33ff 	movlt.w	r3, #4294967295
 8006fc4:	f108 0802 	add.w	r8, r8, #2
 8006fc8:	9305      	str	r3, [sp, #20]
 8006fca:	4d33      	ldr	r5, [pc, #204]	; (8007098 <_vfiprintf_r+0x21c>)
 8006fcc:	f898 1000 	ldrb.w	r1, [r8]
 8006fd0:	2203      	movs	r2, #3
 8006fd2:	4628      	mov	r0, r5
 8006fd4:	f7f9 f904 	bl	80001e0 <memchr>
 8006fd8:	b140      	cbz	r0, 8006fec <_vfiprintf_r+0x170>
 8006fda:	2340      	movs	r3, #64	; 0x40
 8006fdc:	1b40      	subs	r0, r0, r5
 8006fde:	fa03 f000 	lsl.w	r0, r3, r0
 8006fe2:	9b04      	ldr	r3, [sp, #16]
 8006fe4:	4303      	orrs	r3, r0
 8006fe6:	f108 0801 	add.w	r8, r8, #1
 8006fea:	9304      	str	r3, [sp, #16]
 8006fec:	f898 1000 	ldrb.w	r1, [r8]
 8006ff0:	482a      	ldr	r0, [pc, #168]	; (800709c <_vfiprintf_r+0x220>)
 8006ff2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006ff6:	2206      	movs	r2, #6
 8006ff8:	f108 0701 	add.w	r7, r8, #1
 8006ffc:	f7f9 f8f0 	bl	80001e0 <memchr>
 8007000:	2800      	cmp	r0, #0
 8007002:	d037      	beq.n	8007074 <_vfiprintf_r+0x1f8>
 8007004:	4b26      	ldr	r3, [pc, #152]	; (80070a0 <_vfiprintf_r+0x224>)
 8007006:	bb1b      	cbnz	r3, 8007050 <_vfiprintf_r+0x1d4>
 8007008:	9b03      	ldr	r3, [sp, #12]
 800700a:	3307      	adds	r3, #7
 800700c:	f023 0307 	bic.w	r3, r3, #7
 8007010:	3308      	adds	r3, #8
 8007012:	9303      	str	r3, [sp, #12]
 8007014:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007016:	444b      	add	r3, r9
 8007018:	9309      	str	r3, [sp, #36]	; 0x24
 800701a:	e750      	b.n	8006ebe <_vfiprintf_r+0x42>
 800701c:	fb05 3202 	mla	r2, r5, r2, r3
 8007020:	2001      	movs	r0, #1
 8007022:	4688      	mov	r8, r1
 8007024:	e78a      	b.n	8006f3c <_vfiprintf_r+0xc0>
 8007026:	2300      	movs	r3, #0
 8007028:	f108 0801 	add.w	r8, r8, #1
 800702c:	9305      	str	r3, [sp, #20]
 800702e:	4619      	mov	r1, r3
 8007030:	250a      	movs	r5, #10
 8007032:	4640      	mov	r0, r8
 8007034:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007038:	3a30      	subs	r2, #48	; 0x30
 800703a:	2a09      	cmp	r2, #9
 800703c:	d903      	bls.n	8007046 <_vfiprintf_r+0x1ca>
 800703e:	2b00      	cmp	r3, #0
 8007040:	d0c3      	beq.n	8006fca <_vfiprintf_r+0x14e>
 8007042:	9105      	str	r1, [sp, #20]
 8007044:	e7c1      	b.n	8006fca <_vfiprintf_r+0x14e>
 8007046:	fb05 2101 	mla	r1, r5, r1, r2
 800704a:	2301      	movs	r3, #1
 800704c:	4680      	mov	r8, r0
 800704e:	e7f0      	b.n	8007032 <_vfiprintf_r+0x1b6>
 8007050:	ab03      	add	r3, sp, #12
 8007052:	9300      	str	r3, [sp, #0]
 8007054:	4622      	mov	r2, r4
 8007056:	4b13      	ldr	r3, [pc, #76]	; (80070a4 <_vfiprintf_r+0x228>)
 8007058:	a904      	add	r1, sp, #16
 800705a:	4630      	mov	r0, r6
 800705c:	f7fd fe0c 	bl	8004c78 <_printf_float>
 8007060:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007064:	4681      	mov	r9, r0
 8007066:	d1d5      	bne.n	8007014 <_vfiprintf_r+0x198>
 8007068:	89a3      	ldrh	r3, [r4, #12]
 800706a:	065b      	lsls	r3, r3, #25
 800706c:	f53f af7e 	bmi.w	8006f6c <_vfiprintf_r+0xf0>
 8007070:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007072:	e77d      	b.n	8006f70 <_vfiprintf_r+0xf4>
 8007074:	ab03      	add	r3, sp, #12
 8007076:	9300      	str	r3, [sp, #0]
 8007078:	4622      	mov	r2, r4
 800707a:	4b0a      	ldr	r3, [pc, #40]	; (80070a4 <_vfiprintf_r+0x228>)
 800707c:	a904      	add	r1, sp, #16
 800707e:	4630      	mov	r0, r6
 8007080:	f7fe f8b0 	bl	80051e4 <_printf_i>
 8007084:	e7ec      	b.n	8007060 <_vfiprintf_r+0x1e4>
 8007086:	bf00      	nop
 8007088:	0800739c 	.word	0x0800739c
 800708c:	080074dc 	.word	0x080074dc
 8007090:	080073bc 	.word	0x080073bc
 8007094:	0800737c 	.word	0x0800737c
 8007098:	080074e2 	.word	0x080074e2
 800709c:	080074e6 	.word	0x080074e6
 80070a0:	08004c79 	.word	0x08004c79
 80070a4:	08006e57 	.word	0x08006e57

080070a8 <_sbrk_r>:
 80070a8:	b538      	push	{r3, r4, r5, lr}
 80070aa:	4c06      	ldr	r4, [pc, #24]	; (80070c4 <_sbrk_r+0x1c>)
 80070ac:	2300      	movs	r3, #0
 80070ae:	4605      	mov	r5, r0
 80070b0:	4608      	mov	r0, r1
 80070b2:	6023      	str	r3, [r4, #0]
 80070b4:	f7fd fbaa 	bl	800480c <_sbrk>
 80070b8:	1c43      	adds	r3, r0, #1
 80070ba:	d102      	bne.n	80070c2 <_sbrk_r+0x1a>
 80070bc:	6823      	ldr	r3, [r4, #0]
 80070be:	b103      	cbz	r3, 80070c2 <_sbrk_r+0x1a>
 80070c0:	602b      	str	r3, [r5, #0]
 80070c2:	bd38      	pop	{r3, r4, r5, pc}
 80070c4:	2000039c 	.word	0x2000039c

080070c8 <__sread>:
 80070c8:	b510      	push	{r4, lr}
 80070ca:	460c      	mov	r4, r1
 80070cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070d0:	f000 f8a8 	bl	8007224 <_read_r>
 80070d4:	2800      	cmp	r0, #0
 80070d6:	bfab      	itete	ge
 80070d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80070da:	89a3      	ldrhlt	r3, [r4, #12]
 80070dc:	181b      	addge	r3, r3, r0
 80070de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80070e2:	bfac      	ite	ge
 80070e4:	6563      	strge	r3, [r4, #84]	; 0x54
 80070e6:	81a3      	strhlt	r3, [r4, #12]
 80070e8:	bd10      	pop	{r4, pc}

080070ea <__swrite>:
 80070ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070ee:	461f      	mov	r7, r3
 80070f0:	898b      	ldrh	r3, [r1, #12]
 80070f2:	05db      	lsls	r3, r3, #23
 80070f4:	4605      	mov	r5, r0
 80070f6:	460c      	mov	r4, r1
 80070f8:	4616      	mov	r6, r2
 80070fa:	d505      	bpl.n	8007108 <__swrite+0x1e>
 80070fc:	2302      	movs	r3, #2
 80070fe:	2200      	movs	r2, #0
 8007100:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007104:	f000 f868 	bl	80071d8 <_lseek_r>
 8007108:	89a3      	ldrh	r3, [r4, #12]
 800710a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800710e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007112:	81a3      	strh	r3, [r4, #12]
 8007114:	4632      	mov	r2, r6
 8007116:	463b      	mov	r3, r7
 8007118:	4628      	mov	r0, r5
 800711a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800711e:	f000 b817 	b.w	8007150 <_write_r>

08007122 <__sseek>:
 8007122:	b510      	push	{r4, lr}
 8007124:	460c      	mov	r4, r1
 8007126:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800712a:	f000 f855 	bl	80071d8 <_lseek_r>
 800712e:	1c43      	adds	r3, r0, #1
 8007130:	89a3      	ldrh	r3, [r4, #12]
 8007132:	bf15      	itete	ne
 8007134:	6560      	strne	r0, [r4, #84]	; 0x54
 8007136:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800713a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800713e:	81a3      	strheq	r3, [r4, #12]
 8007140:	bf18      	it	ne
 8007142:	81a3      	strhne	r3, [r4, #12]
 8007144:	bd10      	pop	{r4, pc}

08007146 <__sclose>:
 8007146:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800714a:	f000 b813 	b.w	8007174 <_close_r>
	...

08007150 <_write_r>:
 8007150:	b538      	push	{r3, r4, r5, lr}
 8007152:	4c07      	ldr	r4, [pc, #28]	; (8007170 <_write_r+0x20>)
 8007154:	4605      	mov	r5, r0
 8007156:	4608      	mov	r0, r1
 8007158:	4611      	mov	r1, r2
 800715a:	2200      	movs	r2, #0
 800715c:	6022      	str	r2, [r4, #0]
 800715e:	461a      	mov	r2, r3
 8007160:	f7fd fb03 	bl	800476a <_write>
 8007164:	1c43      	adds	r3, r0, #1
 8007166:	d102      	bne.n	800716e <_write_r+0x1e>
 8007168:	6823      	ldr	r3, [r4, #0]
 800716a:	b103      	cbz	r3, 800716e <_write_r+0x1e>
 800716c:	602b      	str	r3, [r5, #0]
 800716e:	bd38      	pop	{r3, r4, r5, pc}
 8007170:	2000039c 	.word	0x2000039c

08007174 <_close_r>:
 8007174:	b538      	push	{r3, r4, r5, lr}
 8007176:	4c06      	ldr	r4, [pc, #24]	; (8007190 <_close_r+0x1c>)
 8007178:	2300      	movs	r3, #0
 800717a:	4605      	mov	r5, r0
 800717c:	4608      	mov	r0, r1
 800717e:	6023      	str	r3, [r4, #0]
 8007180:	f7fd fb0f 	bl	80047a2 <_close>
 8007184:	1c43      	adds	r3, r0, #1
 8007186:	d102      	bne.n	800718e <_close_r+0x1a>
 8007188:	6823      	ldr	r3, [r4, #0]
 800718a:	b103      	cbz	r3, 800718e <_close_r+0x1a>
 800718c:	602b      	str	r3, [r5, #0]
 800718e:	bd38      	pop	{r3, r4, r5, pc}
 8007190:	2000039c 	.word	0x2000039c

08007194 <_fstat_r>:
 8007194:	b538      	push	{r3, r4, r5, lr}
 8007196:	4c07      	ldr	r4, [pc, #28]	; (80071b4 <_fstat_r+0x20>)
 8007198:	2300      	movs	r3, #0
 800719a:	4605      	mov	r5, r0
 800719c:	4608      	mov	r0, r1
 800719e:	4611      	mov	r1, r2
 80071a0:	6023      	str	r3, [r4, #0]
 80071a2:	f7fd fb0a 	bl	80047ba <_fstat>
 80071a6:	1c43      	adds	r3, r0, #1
 80071a8:	d102      	bne.n	80071b0 <_fstat_r+0x1c>
 80071aa:	6823      	ldr	r3, [r4, #0]
 80071ac:	b103      	cbz	r3, 80071b0 <_fstat_r+0x1c>
 80071ae:	602b      	str	r3, [r5, #0]
 80071b0:	bd38      	pop	{r3, r4, r5, pc}
 80071b2:	bf00      	nop
 80071b4:	2000039c 	.word	0x2000039c

080071b8 <_isatty_r>:
 80071b8:	b538      	push	{r3, r4, r5, lr}
 80071ba:	4c06      	ldr	r4, [pc, #24]	; (80071d4 <_isatty_r+0x1c>)
 80071bc:	2300      	movs	r3, #0
 80071be:	4605      	mov	r5, r0
 80071c0:	4608      	mov	r0, r1
 80071c2:	6023      	str	r3, [r4, #0]
 80071c4:	f7fd fb09 	bl	80047da <_isatty>
 80071c8:	1c43      	adds	r3, r0, #1
 80071ca:	d102      	bne.n	80071d2 <_isatty_r+0x1a>
 80071cc:	6823      	ldr	r3, [r4, #0]
 80071ce:	b103      	cbz	r3, 80071d2 <_isatty_r+0x1a>
 80071d0:	602b      	str	r3, [r5, #0]
 80071d2:	bd38      	pop	{r3, r4, r5, pc}
 80071d4:	2000039c 	.word	0x2000039c

080071d8 <_lseek_r>:
 80071d8:	b538      	push	{r3, r4, r5, lr}
 80071da:	4c07      	ldr	r4, [pc, #28]	; (80071f8 <_lseek_r+0x20>)
 80071dc:	4605      	mov	r5, r0
 80071de:	4608      	mov	r0, r1
 80071e0:	4611      	mov	r1, r2
 80071e2:	2200      	movs	r2, #0
 80071e4:	6022      	str	r2, [r4, #0]
 80071e6:	461a      	mov	r2, r3
 80071e8:	f7fd fb02 	bl	80047f0 <_lseek>
 80071ec:	1c43      	adds	r3, r0, #1
 80071ee:	d102      	bne.n	80071f6 <_lseek_r+0x1e>
 80071f0:	6823      	ldr	r3, [r4, #0]
 80071f2:	b103      	cbz	r3, 80071f6 <_lseek_r+0x1e>
 80071f4:	602b      	str	r3, [r5, #0]
 80071f6:	bd38      	pop	{r3, r4, r5, pc}
 80071f8:	2000039c 	.word	0x2000039c

080071fc <__ascii_mbtowc>:
 80071fc:	b082      	sub	sp, #8
 80071fe:	b901      	cbnz	r1, 8007202 <__ascii_mbtowc+0x6>
 8007200:	a901      	add	r1, sp, #4
 8007202:	b142      	cbz	r2, 8007216 <__ascii_mbtowc+0x1a>
 8007204:	b14b      	cbz	r3, 800721a <__ascii_mbtowc+0x1e>
 8007206:	7813      	ldrb	r3, [r2, #0]
 8007208:	600b      	str	r3, [r1, #0]
 800720a:	7812      	ldrb	r2, [r2, #0]
 800720c:	1c10      	adds	r0, r2, #0
 800720e:	bf18      	it	ne
 8007210:	2001      	movne	r0, #1
 8007212:	b002      	add	sp, #8
 8007214:	4770      	bx	lr
 8007216:	4610      	mov	r0, r2
 8007218:	e7fb      	b.n	8007212 <__ascii_mbtowc+0x16>
 800721a:	f06f 0001 	mvn.w	r0, #1
 800721e:	e7f8      	b.n	8007212 <__ascii_mbtowc+0x16>

08007220 <__malloc_lock>:
 8007220:	4770      	bx	lr

08007222 <__malloc_unlock>:
 8007222:	4770      	bx	lr

08007224 <_read_r>:
 8007224:	b538      	push	{r3, r4, r5, lr}
 8007226:	4c07      	ldr	r4, [pc, #28]	; (8007244 <_read_r+0x20>)
 8007228:	4605      	mov	r5, r0
 800722a:	4608      	mov	r0, r1
 800722c:	4611      	mov	r1, r2
 800722e:	2200      	movs	r2, #0
 8007230:	6022      	str	r2, [r4, #0]
 8007232:	461a      	mov	r2, r3
 8007234:	f7fd fa7c 	bl	8004730 <_read>
 8007238:	1c43      	adds	r3, r0, #1
 800723a:	d102      	bne.n	8007242 <_read_r+0x1e>
 800723c:	6823      	ldr	r3, [r4, #0]
 800723e:	b103      	cbz	r3, 8007242 <_read_r+0x1e>
 8007240:	602b      	str	r3, [r5, #0]
 8007242:	bd38      	pop	{r3, r4, r5, pc}
 8007244:	2000039c 	.word	0x2000039c

08007248 <__ascii_wctomb>:
 8007248:	b149      	cbz	r1, 800725e <__ascii_wctomb+0x16>
 800724a:	2aff      	cmp	r2, #255	; 0xff
 800724c:	bf85      	ittet	hi
 800724e:	238a      	movhi	r3, #138	; 0x8a
 8007250:	6003      	strhi	r3, [r0, #0]
 8007252:	700a      	strbls	r2, [r1, #0]
 8007254:	f04f 30ff 	movhi.w	r0, #4294967295
 8007258:	bf98      	it	ls
 800725a:	2001      	movls	r0, #1
 800725c:	4770      	bx	lr
 800725e:	4608      	mov	r0, r1
 8007260:	4770      	bx	lr
	...

08007264 <_init>:
 8007264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007266:	bf00      	nop
 8007268:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800726a:	bc08      	pop	{r3}
 800726c:	469e      	mov	lr, r3
 800726e:	4770      	bx	lr

08007270 <_fini>:
 8007270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007272:	bf00      	nop
 8007274:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007276:	bc08      	pop	{r3}
 8007278:	469e      	mov	lr, r3
 800727a:	4770      	bx	lr
